[{"title":"结 束","date":"2022-06-15T14:44:51.000Z","path":"2022/06/an-ending/","text":"845bca6bbae78d3763847ae442c60a8a01b383207734a6604313610aa5eacb0f66ec35fb79ce835c5c64e455f038bc2fa59d832d204ca295ed8ffc3a2a2816b3817e8244e3aebed77d76e71ed82b43d766757a05d0cfa6fa41bce6b0a1298993d196516d5451530e92cd94ef8ac0013966c6a86378470b6f8a171ccfdd92a6b07fb9c97391223bc3ca3c479dea8034edf4a80586509ea16a67a8bea27498b64c9428199a5427731fa600f5745f36f337b8abfde921b0f5b506a9b17646027e69c71cd86ab03286652303998644631928034e6e215506732d519e5d4ca9485aa81efddf8f04532f07c8cc96f39d080d0ebba30783bdc78d891d191753be229c0752795bdee178bcfd0767fea64c8cd94d356753452d190bffcd68ddfaf8eccc1453613a02f636e01448adb42808815761aeaf656e8ca17702eefc59b23b07b32181fbd2968e93b4de95c6a9851e39cf07db4d26d1475afa65d98425b32ccc804dc5e1c09885be141865a31cefc72880d9a03ffe89c1bfc7794fa7defb62efe0c5aff79e0c658f7e2a5e40be51f574a60a2564aabcd00deaa934ea9babce68d4a04855fd49c8ce8245741867930162050c3f1e9c571aac969ef744ec77a9e0d0b6e4952e724366486ac9dc312a5bed5a1395a7b2644eea01972ea388b45b7ba91c458cd75a80fbee55f33898bd4d9342f9f32f055aad5b1746c8fdd22e4997c2a48ef334b5627e31a9d6b15baf009ff65215411687bee93675589e3c59d4e0a720c222fd5c517333c225df05a17704bad4bf5b100fc2f743ccfc77f04900d80ae394647946f084149b260c324087853cdeb3468ff10c08534dc800772a02eccc86fa2f98efb1035f7a6698131c7f8d9f8bf21a8f09aa46b105fb527b237b1bd9a671122d877ae46a5b7336b4795aa123bf50875919ff8a21e5687e6a582014d9d5aa93a911d2e9cd0959d6a8e8d48d51fa4210f5c08235c5e3fbe1b27f4d42d61248521ef5e61ae2ba999eed5651fe83982f75e2fbdb48ff175ccf7b4c08aa7ee2e7045579659fd778114167a5f3fe4058e7522c80ea2867adfdfa5174e45702300298ad2c866f2e31302447c9f51437261e3063ee1cfb1e8c8dcba07d08d4b278b51400a348b4a9b9e5c51f228709aab28c9325af347657d0a25f41bcd69b5cd29b8fd2bcfee6f8d99839158277cc89351188c39941f6c8b01900b8b8a1f53529dc29af74f1146431f7baf9805397f3d4f4434e798d22436fd85fd4a2687bcde1635950d2638211a5bd72a8c11a582d7b3aedd01efde48d2381dd2317c0c26a51413899fc50ad6988f2ffcc8ac61f827095470feb12bfbd3939b55942f00262d544f44bd9ab156ba0c3c7073e766fd0142061eeb96dd805c0bfdba5703170c9027f7eac6de3a7076b0107b5070a7205d857c73fc17786afa68b6e2f3ff9d8007afb8804e2eaadc14b8099a4e024b9dffec7cd26acbd05508edf946fa297f402758bbe368422cb4e9f28f2f2fcfc3759e11ea627046a578071cd038af2285bf8c2c65921a4a9ed4d08677be22a3f6d54ec03e6c86b998336d14746127b7383876ccc244ede297d6ea1448079f757fdf9f3c13c7c344bddc0f4bbe91ace28f7e6d2142d09c00070977ec0ab2b706b11571532c54b145b4a09287241029c5b09897acb26e7557bb799cee12e20d63693e2dbbfbcba5f399da56acb46148839689f0570bbc6a0e77570526fc8b7b5e17c68472e5910a22d373e2fb670aeeefff4f87690c94f07529e451b1745240b0265ab936ca5fc682371c56f6a061b6ebd30fa96e9cf0fa81d3dacd6663020e23f17ecd5d60148ac28f0499d65bfe8784821841a1c0e6b1e72cf3fde71f4f5d96054666f4bfdd5fe8bde06ab9ef4fc4aff4ecbb25473203960a66d0a603656f66abc19a68afa418fd46fecc429b10de018aca277ba5cd9c08f06c8166fb8188834f651843fafc4b7dbbd6ccc44e4581ec42cde2adec55bc949d802d947f75eeb1f9a543aca4d005e58dba59bb66d488df68ff3c5928c454f2fd6f316bfdfef095f9af1ab7c9ce05ccab444fac5f5e9f2200bca87f6caa77dc34c86d1c2ed5e7b4e4925834d1f42cced38cf278253cb0f0d68c3a9f6ec1dcd27452884cbc0598407224464efdc7f3e2c855942c02003bf35762822f2f45c1cf31d0565077bc117c01d14119efe99ba967c9422288a74b282f8189ea0d6c20096e7e88188b7723efb7ba43c227de6cabf1bc35e41958aa95fa283fe Hey, password is required here.","content":"<div class=\"hbe hbe-container\" id=\"hexo-blog-encrypt\" data-wpm=\"Oh, this is an invalid password. Check and try again, please.\" data-whm=\"OOPS, these decrypted content may changed, but you can still have a look.\">\n  <script id=\"hbeData\" type=\"hbeData\" data-hmacdigest=\"d068f3e4f9a5b73e62efed71bf5e3170f61ea2fa9c0133b638b33298472320f2\">845bca6bbae78d3763847ae442c60a8a01b383207734a6604313610aa5eacb0f66ec35fb79ce835c5c64e455f038bc2fa59d832d204ca295ed8ffc3a2a2816b3817e8244e3aebed77d76e71ed82b43d766757a05d0cfa6fa41bce6b0a1298993d196516d5451530e92cd94ef8ac0013966c6a86378470b6f8a171ccfdd92a6b07fb9c97391223bc3ca3c479dea8034edf4a80586509ea16a67a8bea27498b64c9428199a5427731fa600f5745f36f337b8abfde921b0f5b506a9b17646027e69c71cd86ab03286652303998644631928034e6e215506732d519e5d4ca9485aa81efddf8f04532f07c8cc96f39d080d0ebba30783bdc78d891d191753be229c0752795bdee178bcfd0767fea64c8cd94d356753452d190bffcd68ddfaf8eccc1453613a02f636e01448adb42808815761aeaf656e8ca17702eefc59b23b07b32181fbd2968e93b4de95c6a9851e39cf07db4d26d1475afa65d98425b32ccc804dc5e1c09885be141865a31cefc72880d9a03ffe89c1bfc7794fa7defb62efe0c5aff79e0c658f7e2a5e40be51f574a60a2564aabcd00deaa934ea9babce68d4a04855fd49c8ce8245741867930162050c3f1e9c571aac969ef744ec77a9e0d0b6e4952e724366486ac9dc312a5bed5a1395a7b2644eea01972ea388b45b7ba91c458cd75a80fbee55f33898bd4d9342f9f32f055aad5b1746c8fdd22e4997c2a48ef334b5627e31a9d6b15baf009ff65215411687bee93675589e3c59d4e0a720c222fd5c517333c225df05a17704bad4bf5b100fc2f743ccfc77f04900d80ae394647946f084149b260c324087853cdeb3468ff10c08534dc800772a02eccc86fa2f98efb1035f7a6698131c7f8d9f8bf21a8f09aa46b105fb527b237b1bd9a671122d877ae46a5b7336b4795aa123bf50875919ff8a21e5687e6a582014d9d5aa93a911d2e9cd0959d6a8e8d48d51fa4210f5c08235c5e3fbe1b27f4d42d61248521ef5e61ae2ba999eed5651fe83982f75e2fbdb48ff175ccf7b4c08aa7ee2e7045579659fd778114167a5f3fe4058e7522c80ea2867adfdfa5174e45702300298ad2c866f2e31302447c9f51437261e3063ee1cfb1e8c8dcba07d08d4b278b51400a348b4a9b9e5c51f228709aab28c9325af347657d0a25f41bcd69b5cd29b8fd2bcfee6f8d99839158277cc89351188c39941f6c8b01900b8b8a1f53529dc29af74f1146431f7baf9805397f3d4f4434e798d22436fd85fd4a2687bcde1635950d2638211a5bd72a8c11a582d7b3aedd01efde48d2381dd2317c0c26a51413899fc50ad6988f2ffcc8ac61f827095470feb12bfbd3939b55942f00262d544f44bd9ab156ba0c3c7073e766fd0142061eeb96dd805c0bfdba5703170c9027f7eac6de3a7076b0107b5070a7205d857c73fc17786afa68b6e2f3ff9d8007afb8804e2eaadc14b8099a4e024b9dffec7cd26acbd05508edf946fa297f402758bbe368422cb4e9f28f2f2fcfc3759e11ea627046a578071cd038af2285bf8c2c65921a4a9ed4d08677be22a3f6d54ec03e6c86b998336d14746127b7383876ccc244ede297d6ea1448079f757fdf9f3c13c7c344bddc0f4bbe91ace28f7e6d2142d09c00070977ec0ab2b706b11571532c54b145b4a09287241029c5b09897acb26e7557bb799cee12e20d63693e2dbbfbcba5f399da56acb46148839689f0570bbc6a0e77570526fc8b7b5e17c68472e5910a22d373e2fb670aeeefff4f87690c94f07529e451b1745240b0265ab936ca5fc682371c56f6a061b6ebd30fa96e9cf0fa81d3dacd6663020e23f17ecd5d60148ac28f0499d65bfe8784821841a1c0e6b1e72cf3fde71f4f5d96054666f4bfdd5fe8bde06ab9ef4fc4aff4ecbb25473203960a66d0a603656f66abc19a68afa418fd46fecc429b10de018aca277ba5cd9c08f06c8166fb8188834f651843fafc4b7dbbd6ccc44e4581ec42cde2adec55bc949d802d947f75eeb1f9a543aca4d005e58dba59bb66d488df68ff3c5928c454f2fd6f316bfdfef095f9af1ab7c9ce05ccab444fac5f5e9f2200bca87f6caa77dc34c86d1c2ed5e7b4e4925834d1f42cced38cf278253cb0f0d68c3a9f6ec1dcd27452884cbc0598407224464efdc7f3e2c855942c02003bf35762822f2f45c1cf31d0565077bc117c01d14119efe99ba967c9422288a74b282f8189ea0d6c20096e7e88188b7723efb7ba43c227de6cabf1bc35e41958aa95fa283fe</script>\n  <div class=\"hbe hbe-content\">\n    <div class=\"hbe hbe-input hbe-input-default\">\n      <input class=\"hbe hbe-input-field hbe-input-field-default\" type=\"password\" id=\"hbePass\">\n      <label class=\"hbe hbe-input-label hbe-input-label-default\" for=\"hbePass\">\n        <span class=\"hbe hbe-input-label-content hbe-input-label-content-default\">Hey, password is required here.</span>\n      </label>\n    </div>\n  </div>\n</div>\n<script data-pjax src=\"/lib/hbe.js\"></script><link href=\"/css/hbe.style.css\" rel=\"stylesheet\" type=\"text/css\">","tags":[]},{"title":"ch5-low-power-design-The-Art-of-Hardware-Architecture","date":"2022-03-30T03:02:55.000Z","path":"2022/03/ch5-low-power-design-The-Art-of-Hardware-Architecture/","text":"功耗源 浪涌：启动时产生的电流相关。 静态功耗：待机功耗，漏电流 动态功耗：开关功耗或者逻辑转换所引起的功耗。 $$P_{dynamic} = SC_LV_{dd^2}f_{clk}$$ 动态功耗占主要地位，80%为典型值。","content":"<h2 id=\"功耗源\"><a href=\"#功耗源\" class=\"headerlink\" title=\"功耗源\"></a>功耗源</h2><ul>\n<li>浪涌：启动时产生的电流相关。</li>\n<li>静态功耗：待机功耗，漏电流</li>\n<li>动态功耗：开关功耗或者逻辑转换所引起的功耗。</li>\n</ul>\n<p>$$<br>P_{dynamic} = SC_LV_{dd^2}f_{clk}<br>$$</p>\n<p>动态功耗占主要地位，80%为典型值。</p>\n","tags":[{"name":"TAHA","slug":"TAHA","permalink":"https://jonathan1214.github.io/tags/TAHA/"},{"name":"IC","slug":"IC","permalink":"https://jonathan1214.github.io/tags/IC/"},{"name":"低功耗","slug":"低功耗","permalink":"https://jonathan1214.github.io/tags/低功耗/"}]},{"title":"ch4-clock-dividers-The-art-of-hardware-architecture","date":"2022-03-26T06:50:30.000Z","path":"2022/03/ch4-clock-dividers-The-art-of-hardware-architecture/","text":"偶数分频时钟，奇数分频甚至是小数分频也在考虑范围内。 4.2 同步整数分频器使用 Moore 状态机很容易实现同步整数分频。但是无法实现占空比 50% 的奇数分频。 4.3 具有 50% 占空比的奇数整数分频如下图所示，一个三分频，50% 占空比的例子。 计数 0 到 N - 1 在 0 和 (N+1)/2 上生成使能信号 分别在两个使能信号上用上升沿和下降沿做 T 触发器，将得到的结果异或即可 123456789101112131415161718192021222324252627282930313233343536373839module div3( input clk, input rst_n, output div3); reg [1:0] cnt; wire tff_1en; wire tff_2en; reg div1; reg div2; assign tff_1en = cnt == 2'd0; assign tff_2en = cnt == 2'd2; assign div3 = div1 ^ div2; always @(posedge clk or negedge rst_n) begin if (rst_nn == 1'b0) cnt &lt;= 0; else if (cnt == 2'd2) cnt &lt;= 0; else cnt &lt;= cnt + 1'b1; end always @(posedge clk or negedge rst_n) begin if (rst_n == 1'b0) div1 &lt;= 0; else if (tff_1en) div1 &lt;= ~div1; end always @(negedge clk or negedge rst_n) begin if (rst_n == 1'b0) div2 &lt;= 0; else if (tff_2en) div2 &lt;= ~div2; end endmodule 4.4 非整数分频（非50%占空比）这里以 1.5 分频为例，也就是没三个时钟包含两个对称的脉冲。 借助三分频器的辅助，用如下电路可以实现 1.5 分频： 该电路容易出现毛刺，因为多路器的输入经历了不同的延迟，因此会出现这种情况。 分频计数器的实现 使用复位值 000000001 的 9 位移位寄存器，可以在每个时钟上升沿使移位寄存器循环左移一位。 产生第一个脉冲，在半周期时移动第 1 位并将第 1 位与第 2 位进行或操作。 产生第二个脉冲，第 5 位和第 6 位必须在半周期时移动并与原始第 6 位进行或操作。 4.5 N 分频的替换方法","content":"<p>偶数分频时钟，奇数分频甚至是小数分频也在考虑范围内。</p>\n<h2 id=\"4-2-同步整数分频器\"><a href=\"#4-2-同步整数分频器\" class=\"headerlink\" title=\"4.2 同步整数分频器\"></a>4.2 同步整数分频器</h2><p>使用 Moore 状态机很容易实现同步整数分频。但是无法实现占空比 50% 的奇数分频。</p>\n<p><img src=\"D:\\Documents\\Jonathan1214.github.io\\source\\_drafts\\ch4-clock-dividers-The-art-of-hardware-architecture\\image-20220326145407841.png\" alt=\"image-20220326145407841\"></p>\n<h2 id=\"4-3-具有-50-占空比的奇数整数分频\"><a href=\"#4-3-具有-50-占空比的奇数整数分频\" class=\"headerlink\" title=\"4.3 具有 50% 占空比的奇数整数分频\"></a>4.3 具有 50% 占空比的奇数整数分频</h2><p>如下图所示，一个三分频，50% 占空比的例子。</p>\n<p><img src=\"D:\\Documents\\Jonathan1214.github.io\\source\\_drafts\\ch4-clock-dividers-The-art-of-hardware-architecture\\image-20220326145838377.png\" alt=\"image-20220326145838377\"></p>\n<ul>\n<li>计数 <code>0</code> 到 <code>N - 1</code></li>\n<li>在 <code>0</code> 和 <code>(N+1)/2</code> 上生成使能信号</li>\n<li>分别在两个使能信号上用上升沿和下降沿做 T 触发器，将得到的结果异或即可</li>\n</ul>\n<figure class=\"highlight verilog\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">module</span> div3(</span><br><span class=\"line\">    <span class=\"keyword\">input</span> clk,</span><br><span class=\"line\">    <span class=\"keyword\">input</span> rst_n,</span><br><span class=\"line\">    <span class=\"keyword\">output</span> div3</span><br><span class=\"line\">);</span><br><span class=\"line\">    <span class=\"keyword\">reg</span> [<span class=\"number\">1</span>:<span class=\"number\">0</span>] cnt;</span><br><span class=\"line\">    <span class=\"keyword\">wire</span> tff_1en;</span><br><span class=\"line\">    <span class=\"keyword\">wire</span> tff_2en;</span><br><span class=\"line\">    <span class=\"keyword\">reg</span> div1;</span><br><span class=\"line\">    <span class=\"keyword\">reg</span> div2;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">assign</span> tff_1en = cnt == <span class=\"number\">2'd0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">assign</span> tff_2en = cnt == <span class=\"number\">2'd2</span>;</span><br><span class=\"line\">    <span class=\"keyword\">assign</span> div3 = div1 ^ div2;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">always</span> @(<span class=\"keyword\">posedge</span> clk <span class=\"keyword\">or</span> <span class=\"keyword\">negedge</span> rst_n) <span class=\"keyword\">begin</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (rst_nn == <span class=\"number\">1'b0</span>)</span><br><span class=\"line\">            cnt &lt;= <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (cnt == <span class=\"number\">2'd2</span>)</span><br><span class=\"line\">            cnt &lt;= <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">else</span></span><br><span class=\"line\">            cnt &lt;= cnt + <span class=\"number\">1'b1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">end</span></span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">always</span> @(<span class=\"keyword\">posedge</span> clk <span class=\"keyword\">or</span> <span class=\"keyword\">negedge</span> rst_n) <span class=\"keyword\">begin</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (rst_n == <span class=\"number\">1'b0</span>)</span><br><span class=\"line\">            div1 &lt;= <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (tff_1en)</span><br><span class=\"line\">            div1 &lt;= ~div1;</span><br><span class=\"line\">    <span class=\"keyword\">end</span></span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">always</span> @(<span class=\"keyword\">negedge</span> clk <span class=\"keyword\">or</span> <span class=\"keyword\">negedge</span> rst_n) <span class=\"keyword\">begin</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (rst_n == <span class=\"number\">1'b0</span>)</span><br><span class=\"line\">            div2 &lt;= <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (tff_2en)</span><br><span class=\"line\">            div2 &lt;= ~div2;</span><br><span class=\"line\">    <span class=\"keyword\">end</span></span><br><span class=\"line\">    </span><br><span class=\"line\"><span class=\"keyword\">endmodule</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"4-4-非整数分频（非50-占空比）\"><a href=\"#4-4-非整数分频（非50-占空比）\" class=\"headerlink\" title=\"4.4 非整数分频（非50%占空比）\"></a>4.4 非整数分频（非50%占空比）</h2><p>这里以 1.5 分频为例，也就是没三个时钟包含两个对称的脉冲。</p>\n<p>借助三分频器的辅助，用如下电路可以实现 1.5 分频：</p>\n<p><img src=\"D:\\Documents\\Jonathan1214.github.io\\source\\_drafts\\ch4-clock-dividers-The-art-of-hardware-architecture\\image-20220326151453897.png\" alt=\"image-20220326151453897\"></p>\n<p>该电路容易出现毛刺，因为多路器的输入经历了不同的延迟，因此会出现这种情况。</p>\n<h3 id=\"分频计数器的实现\"><a href=\"#分频计数器的实现\" class=\"headerlink\" title=\"分频计数器的实现\"></a>分频计数器的实现</h3><ul>\n<li>使用复位值 <code>000000001</code> 的 9 位移位寄存器，可以在每个时钟上升沿使移位寄存器循环左移一位。</li>\n<li>产生第一个脉冲，在半周期时移动第 1 位并将第 1 位与第 2 位进行或操作。</li>\n<li>产生第二个脉冲，第 5 位和第 6 位必须在半周期时移动并与原始第 6 位进行或操作。</li>\n</ul>\n<h2 id=\"4-5-N-分频的替换方法\"><a href=\"#4-5-N-分频的替换方法\" class=\"headerlink\" title=\"4.5 N 分频的替换方法\"></a>4.5 N 分频的替换方法</h2><p><img src=\"D:\\Documents\\Jonathan1214.github.io\\source\\_drafts\\ch4-clock-dividers-The-art-of-hardware-architecture\\image-20220326153413988.png\" alt=\"image-20220326153413988\"></p>\n","tags":[{"name":"TAHA","slug":"TAHA","permalink":"https://jonathan1214.github.io/tags/TAHA/"},{"name":"IC","slug":"IC","permalink":"https://jonathan1214.github.io/tags/IC/"},{"name":"时钟","slug":"时钟","permalink":"https://jonathan1214.github.io/tags/时钟/"}]},{"title":"ch3-handling-multiple-clocks-The-art-of-hardware-architecture","date":"2022-03-25T02:21:57.000Z","path":"2022/03/ch3-handling-multiple-clocks-The-art-of-hardware-architecture/","text":"单时钟设计（或者说是同步设计），在单时钟域中，有单个时钟贯穿整个设计，同多时钟设计相比，这样的设计更易于实现，并且更少产生与亚稳态、建立和保持时间违背方面的问题。 3.2 多时钟域包含如下时钟关系之一的设计： 时钟的频率不同 时钟频率相同，但相位不同 3.3 多时钟域设计的难题面临下列问题： 建立时间和保持时间的违背 亚稳态 违背建立时间和保持时间建立时间：在时钟脉冲到来前，输入数据需要保持稳定的时间。 保持时间：在时钟脉冲到达后，输入数据扔需要保持稳定的时间。 在多时钟域下，容易违背这两个条件，如下图所示： 3.4 多时钟设计的处理技术通用的准则： 时钟命名规则 分模块设计 所谓时钟命名规则，就是信号名中需要带有其所属时钟域的信息。如，系统时钟可以命名为 sys_clk，发送时钟命名为 tx_clk，系统时钟驱动的信号，可以用类似 sys_rom_addr 这样的方式作为名字。之所以这么做，是为了易于分辨。 分模块设计 每个模块只应当在单个时钟下工作 在信号跨时钟域传输时，使用同步器模块，使得所有信号进入某个时钟域内的模块时，与该模块的时钟保持同步。 同步器模块的规模应尽可能小 跨时钟域两类信号： 控制信号 数据信号 控制信号跨时钟域传输时，需要使用多级同步器以降低亚稳态出现的概率，但是会增加电路的延时。 一般来讲，使用两级同步器即可，只有在时钟频率非常高的设计中才要求使用三级同步器。 保证数据信号正确传输的方法： 使用握手信号 使用异步 FIFO 控制信号和数据信号的区别就在于信号的宽度，控制信号一般是 1bit，而数据信号是多比特的，多比特信号简单使用寄存器打拍的方式同步。 3.5 跨时钟域这里涵盖的是 跨同步时钟域 的问题： 同频零相位差时钟 同频恒定相位差时钟 非同频可变相位差时钟 整数倍时钟 有理数倍时钟 3.6 握手信号方法 要求： 数据应该在发送时钟域内稳定至少两个时钟上升沿。 请求信号 xreq 的宽度应该超过两个上升沿时钟，否则从告诉时钟域向低速时钟域传递可能无法捕捉到该信号。 缺点：延迟太大。 3.7 使用同步 FIFO 传输数据 核心是判断空满，一种方法是扩大位宽，另一种方法是直接判断空满： full：wr_fifo &amp;&amp; (rd_ptr == wr_ptr + 1&#39;b1) empty：rd_fifo &amp;&amp; (rw_ptr == rd_ptr + 1&#39;b1) 3.7 异步 FIFO FIFO 用于对性能要求较高的设计中，尤其是时钟延迟比系统资源更为重要的环境中。 为什么要使用格雷码？格雷码下相邻地址信号只有 1bit 差距，因此，可以看作是异步的单比特信号。 使用格雷码直接判断空满情况，而不需要转换到二进制码。","content":"<p>单时钟设计（或者说是同步设计），在单时钟域中，有单个时钟贯穿整个设计，同多时钟设计相比，这样的设计更易于实现，并且更少产生与亚稳态、建立和保持时间违背方面的问题。</p>\n<h2 id=\"3-2-多时钟域\"><a href=\"#3-2-多时钟域\" class=\"headerlink\" title=\"3.2 多时钟域\"></a>3.2 多时钟域</h2><p>包含如下时钟关系之一的设计：</p>\n<ul>\n<li>时钟的频率不同</li>\n<li>时钟频率相同，但相位不同</li>\n</ul>\n<p><img src=\"D:\\Documents\\Jonathan1214.github.io\\source\\_drafts\\ch3-handling-multiple-clocks-The-art-of-hardware-architecture\\image-20220325102523304.png\" alt=\"image-20220325102523304\"></p>\n<h2 id=\"3-3-多时钟域设计的难题\"><a href=\"#3-3-多时钟域设计的难题\" class=\"headerlink\" title=\"3.3 多时钟域设计的难题\"></a>3.3 多时钟域设计的难题</h2><p>面临下列问题：</p>\n<ul>\n<li>建立时间和保持时间的违背</li>\n<li>亚稳态</li>\n</ul>\n<h3 id=\"违背建立时间和保持时间\"><a href=\"#违背建立时间和保持时间\" class=\"headerlink\" title=\"违背建立时间和保持时间\"></a>违背建立时间和保持时间</h3><p><strong>建立时间</strong>：在时钟脉冲到来前，输入数据需要保持稳定的时间。</p>\n<p><strong>保持时间</strong>：在时钟脉冲到达后，输入数据扔需要保持稳定的时间。</p>\n<p>在多时钟域下，容易违背这两个条件，如下图所示：</p>\n<p><img src=\"D:\\Documents\\Jonathan1214.github.io\\source\\_drafts\\ch3-handling-multiple-clocks-The-art-of-hardware-architecture\\image-20220325102839053.png\" alt=\"image-20220325102839053\"></p>\n<h2 id=\"3-4-多时钟设计的处理技术\"><a href=\"#3-4-多时钟设计的处理技术\" class=\"headerlink\" title=\"3.4 多时钟设计的处理技术\"></a>3.4 多时钟设计的处理技术</h2><p>通用的准则：</p>\n<ul>\n<li>时钟命名规则</li>\n<li>分模块设计</li>\n</ul>\n<p>所谓时钟命名规则，就是信号名中需要带有其所属时钟域的信息。如，系统时钟可以命名为 sys_clk，发送时钟命名为 tx_clk，系统时钟驱动的信号，可以用类似 sys_rom_addr 这样的方式作为名字。之所以这么做，是为了易于分辨。</p>\n<h3 id=\"分模块设计\"><a href=\"#分模块设计\" class=\"headerlink\" title=\"分模块设计\"></a>分模块设计</h3><ul>\n<li>每个模块只应当在单个时钟下工作</li>\n<li>在信号跨时钟域传输时，使用同步器模块，使得所有信号进入某个时钟域内的模块时，与该模块的时钟保持同步。</li>\n<li>同步器模块的规模应尽可能小</li>\n</ul>\n<h3 id=\"跨时钟域\"><a href=\"#跨时钟域\" class=\"headerlink\" title=\"跨时钟域\"></a>跨时钟域</h3><p>两类信号：</p>\n<ul>\n<li>控制信号</li>\n<li>数据信号</li>\n</ul>\n<p>控制信号跨时钟域传输时，<strong>需要使用多级同步器以降低亚稳态出现的概率，但是会增加电路的延时。</strong></p>\n<p><img src=\"D:\\Documents\\Jonathan1214.github.io\\source\\_drafts\\ch3-handling-multiple-clocks-The-art-of-hardware-architecture\\image-20220325104047078.png\" alt=\"image-20220325104047078\"></p>\n<p>一般来讲，使用两级同步器即可，只有在时钟频率非常高的设计中才要求使用三级同步器。</p>\n<p>保证数据信号正确传输的方法：</p>\n<ul>\n<li>使用握手信号</li>\n<li>使用异步 FIFO</li>\n</ul>\n<blockquote>\n<p>控制信号和数据信号的区别就在于信号的宽度，控制信号一般是 1bit，而数据信号是多比特的，多比特信号简单使用寄存器打拍的方式同步。</p>\n</blockquote>\n<h2 id=\"3-5-跨时钟域\"><a href=\"#3-5-跨时钟域\" class=\"headerlink\" title=\"3.5 跨时钟域\"></a>3.5 跨时钟域</h2><p>这里涵盖的是 <strong>跨同步时钟域</strong> 的问题：</p>\n<ul>\n<li>同频零相位差时钟</li>\n<li>同频恒定相位差时钟</li>\n<li>非同频可变相位差时钟<ul>\n<li>整数倍时钟</li>\n<li>有理数倍时钟</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"3-6-握手信号方法\"><a href=\"#3-6-握手信号方法\" class=\"headerlink\" title=\"3.6 握手信号方法\"></a>3.6 握手信号方法</h2><p><img src=\"D:\\Documents\\Jonathan1214.github.io\\source\\_drafts\\ch3-handling-multiple-clocks-The-art-of-hardware-architecture\\image-20220326090836705.png\" alt=\"image-20220326090836705\"></p>\n<p>要求：</p>\n<ul>\n<li>数据应该在发送时钟域内稳定至少两个时钟上升沿。</li>\n<li>请求信号 xreq 的宽度应该超过两个上升沿时钟，否则从告诉时钟域向低速时钟域传递可能无法捕捉到该信号。</li>\n</ul>\n<p>缺点：延迟太大。</p>\n<h2 id=\"3-7-使用同步-FIFO-传输数据\"><a href=\"#3-7-使用同步-FIFO-传输数据\" class=\"headerlink\" title=\"3.7 使用同步 FIFO 传输数据\"></a>3.7 使用同步 FIFO 传输数据</h2><p><img src=\"D:\\Documents\\Jonathan1214.github.io\\source\\_drafts\\ch3-handling-multiple-clocks-The-art-of-hardware-architecture\\image-20220326091114307.png\" alt=\"image-20220326091114307\"></p>\n<p>核心是判断空满，一种方法是扩大位宽，另一种方法是直接判断空满：</p>\n<ul>\n<li>full：<code>wr_fifo &amp;&amp; (rd_ptr == wr_ptr + 1&#39;b1)</code></li>\n<li>empty：<code>rd_fifo &amp;&amp; (rw_ptr == rd_ptr + 1&#39;b1)</code></li>\n</ul>\n<h2 id=\"3-7-异步-FIFO\"><a href=\"#3-7-异步-FIFO\" class=\"headerlink\" title=\"3.7 异步 FIFO\"></a>3.7 异步 FIFO</h2><p><img src=\"D:\\Documents\\Jonathan1214.github.io\\source\\_drafts\\ch3-handling-multiple-clocks-The-art-of-hardware-architecture\\image-20220326100924782.png\" alt=\"image-20220326100924782\"></p>\n<p>FIFO 用于对性能要求较高的设计中，尤其是时钟延迟比系统资源更为重要的环境中。</p>\n<p>为什么要使用格雷码？格雷码下相邻地址信号只有 1bit 差距，因此，可以看作是异步的单比特信号。</p>\n<p><img src=\"D:\\Documents\\Jonathan1214.github.io\\source\\_drafts\\ch3-handling-multiple-clocks-The-art-of-hardware-architecture\\image-20220326104345632.png\" alt=\"image-20220326104345632\"></p>\n<p>使用格雷码直接判断空满情况，而不需要转换到二进制码。</p>\n","tags":[{"name":"TAHA","slug":"TAHA","permalink":"https://jonathan1214.github.io/tags/TAHA/"},{"name":"IC","slug":"IC","permalink":"https://jonathan1214.github.io/tags/IC/"},{"name":"CDC","slug":"CDC","permalink":"https://jonathan1214.github.io/tags/CDC/"}]},{"title":"『TAHA』02 时钟和复位","date":"2022-03-23T12:35:10.000Z","path":"2022/03/ch2-clock-and-reset-of-The-art-of-hardware-architecture/","text":"同步设计何为同步设计？在同步设计中，由单个主时钟和单个主置位、复位信号驱动设计中所有的时序器件。 经验表明，对 ASIC 时序控制最安全的方法就是同步设计。 同步设计避坑指南： 避免使用行波计数器 门控时钟 双边沿或混合边沿时钟 用触发器驱动另一个触发器的异步复位端 推荐的设计技术： 避免在设计中出现组合环路 避免数字设计中的延迟链 避免使用异步脉冲产生器 避免使用锁存器 避免使用双沿时钟 时钟方案避免在内部产生时钟 时钟分频可以使用同步计数器而不是行波计数器 小心使用多路时钟 小心使用门控时钟 门控时钟方法学使用门控时钟主要是为了降低功耗。 在同步设计中，系统时钟连接到每个寄存器的时钟端，这使得功耗主要由三部分组成： 时钟沿变化的组合逻辑产生的功耗 触发器产生的功耗 设计中时钟树产生的功耗 门控时钟可以存在于时钟树的根部、末端，或者两者之间的任何位置。 复位信号的设计策略最好的方法，注意在这种情况下，第二个触发器不会出现恢复时间亚稳态问题，因为在移除复位时该触发器的输入和输出都为低电平。 控制时钟偏移对于同一时钟边沿偏移较大的寄存器，如果舒徐相邻，那么在向其提供时钟时，就会有违背时序的潜在风险。 如上图所示，两个触发器之间的时钟偏移定义为： $$T_{skew_{i,j}}=T_{c_i}-T_{c_j}$$ 这里 $$T_{c_i}$$ 和 $$T_{c_j}$$ 分别是从时钟源到触发器 $$F_i$$ 和 $$F_j$$ 的延迟。 时钟偏移并不都是有害的，其实会帮助我们的建立时间，但是时钟偏移过大也会导致保持时间问题，即出现短路径问题。","content":"<h2 id=\"同步设计\"><a href=\"#同步设计\" class=\"headerlink\" title=\"同步设计\"></a>同步设计</h2><p><strong>何为同步设计？</strong>在同步设计中，由单个主时钟和单个主置位、复位信号驱动设计中所有的时序器件。</p>\n<p>经验表明，对 ASIC 时序控制最安全的方法就是同步设计。</p>\n<p>同步设计避坑指南：</p>\n<ul>\n<li>避免使用行波计数器</li>\n<li>门控时钟</li>\n<li>双边沿或混合边沿时钟</li>\n<li>用触发器驱动另一个触发器的异步复位端</li>\n</ul>\n<p>推荐的设计技术：</p>\n<ul>\n<li>避免在设计中出现组合环路</li>\n<li>避免数字设计中的延迟链</li>\n<li>避免使用异步脉冲产生器</li>\n<li>避免使用锁存器</li>\n<li>避免使用双沿时钟</li>\n</ul>\n<h2 id=\"时钟方案\"><a href=\"#时钟方案\" class=\"headerlink\" title=\"时钟方案\"></a>时钟方案</h2><p>避免在内部产生时钟</p>\n<p>时钟分频可以使用同步计数器而不是行波计数器</p>\n<p>小心使用多路时钟</p>\n<p>小心使用门控时钟</p>\n<h2 id=\"门控时钟方法学\"><a href=\"#门控时钟方法学\" class=\"headerlink\" title=\"门控时钟方法学\"></a>门控时钟方法学</h2><p>使用门控时钟主要是为了降低功耗。</p>\n<p>在同步设计中，系统时钟连接到每个寄存器的时钟端，这使得功耗主要由三部分组成：</p>\n<ul>\n<li>时钟沿变化的组合逻辑产生的功耗</li>\n<li>触发器产生的功耗</li>\n<li>设计中时钟树产生的功耗</li>\n</ul>\n<p>门控时钟可以存在于时钟树的根部、末端，或者两者之间的任何位置。</p>\n<p><img src=\"D:\\Documents\\Jonathan1214.github.io\\source\\_drafts\\ch2-clock-and-reset-of-The-art-of-hardware-architecture\\image-20220323223559804.png\" alt=\"image-20220323223559804\"></p>\n<h2 id=\"复位信号的设计策略\"><a href=\"#复位信号的设计策略\" class=\"headerlink\" title=\"复位信号的设计策略\"></a>复位信号的设计策略</h2><p>最好的方法，注意在这种情况下，第二个触发器不会出现恢复时间亚稳态问题，因为在移除复位时该触发器的输入和输出都为低电平。</p>\n<p><img src=\"D:\\Documents\\Jonathan1214.github.io\\source\\_drafts\\ch2-clock-and-reset-of-The-art-of-hardware-architecture\\image-20220323225848060.png\" alt=\"image-20220323225848060\"></p>\n<h2 id=\"控制时钟偏移\"><a href=\"#控制时钟偏移\" class=\"headerlink\" title=\"控制时钟偏移\"></a>控制时钟偏移</h2><p>对于同一时钟边沿偏移较大的寄存器，如果舒徐相邻，那么在向其提供时钟时，就会有违背时序的潜在风险。</p>\n<p><img src=\"D:\\Documents\\Jonathan1214.github.io\\source\\_drafts\\ch2-clock-and-reset-of-The-art-of-hardware-architecture\\image-20220323230645958.png\" alt=\"image-20220323230645958\"></p>\n<p>如上图所示，两个触发器之间的时钟偏移定义为：</p>\n<p>$$T_{skew_{i,j}}=T_{c_i}-T_{c_j}$$</p>\n<p>这里 $$T_{c_i}$$ 和 $$T_{c_j}$$ 分别是从时钟源到触发器 $$F_i$$ 和 $$F_j$$ 的延迟。</p>\n<p>时钟偏移并不都是有害的，其实会帮助我们的建立时间，但是时钟偏移过大也会导致保持时间问题，即出现短路径问题。</p>\n","tags":[{"name":"Verilog","slug":"Verilog","permalink":"https://jonathan1214.github.io/tags/Verilog/"},{"name":"TAHA","slug":"TAHA","permalink":"https://jonathan1214.github.io/tags/TAHA/"},{"name":"IC","slug":"IC","permalink":"https://jonathan1214.github.io/tags/IC/"}]},{"title":"输入序列连续的序列检测","date":"2022-03-15T01:30:01.000Z","path":"2022/03/advanced-VL1-sequenc-detection/","text":"这段时间在准备暑期实习，刚好牛客上新开放了 Verilog 刷题的模块，大概是为了这波风口，大家都在一起疯狂。 输入序列连续的序列检测 序列检测算是比较简单的题了，无非两种方法，移位寄存然后判断，或者更复杂一点的用状态机实现，序列检测还可以分为可重复检测和非可重复检测，具体实现上有细微的差别，都不算复杂。","content":"<p>这段时间在准备暑期实习，刚好牛客上新开放了 Verilog 刷题的模块，大概是为了这波风口，大家都在一起疯狂。</p>\n<p><a href=\"https://www.nowcoder.com/practice/d65c2204fae944d2a6d9a3b32aa37b39?tpId=302&amp;tqId=5000628&amp;ru=/exam/oj&amp;qru=/ta/verilog-advanced/question-ranking&amp;sourceUrl=%2Fexam%2Foj%3Ftab%3DVerilog%25E7%25AF%2587%26topicId%3D302\" target=\"_blank\" rel=\"noopener\">输入序列连续的序列检测</a></p>\n<p>序列检测算是比较简单的题了，无非两种方法，移位寄存然后判断，或者更复杂一点的用状态机实现，序列检测还可以分为可重复检测和非可重复检测，具体实现上有细微的差别，都不算复杂。</p>\n","tags":[{"name":"Verilog","slug":"Verilog","permalink":"https://jonathan1214.github.io/tags/Verilog/"},{"name":"IC设计","slug":"IC设计","permalink":"https://jonathan1214.github.io/tags/IC设计/"},{"name":"序列检测","slug":"序列检测","permalink":"https://jonathan1214.github.io/tags/序列检测/"}]},{"title":"我的前20年","date":"2021-10-24T13:02:23.000Z","path":"2021/10/past-20-years/","text":"845bca6bbae78d3763847ae442c60a8a7cf96903570fc32e27cf6b2c3cb32f9c78381f89342c8a3592d0dfbc6c66272c4794ceedaf7391ae7ced0d3e16f60b2cc717d69cd27dfb7bfa22b8dc5697a7a20184111ab72865610412bcd079a2201368f3a6ad42f35f4a54aaea2145cbdb8653b6cfc0a9abaebf30bd47cfb723118512999e9c5989684f3dd5b095d60aaff712d0d392bfd14585258b25862ef7d4580abacc87c53f57da42735bbd6ec2e369e79cdc76b53314cf9a6a342f0f8cf05e948b544c557224cf1055180231da9139734ec6f23912c80b5f65fe60a2623b0cdfb56202b159c7bf413fcd0b16aa72a2d595721a57c66ada4e81aed97116ae16bb12a15d096807bcfde949eaf76d49428a9c1a7463968d1f6ca5265d6ece42320afb01f55be2d44a3a3d36d98ddbe0679c50aec38ca0a7644e9b2f3ad1762b4c0d59204d8e81e88e9e2be0e276d9709521e3f891f687dd314f3846d899bd05c38bde5bb75098e348720b5201725b9c0beb5bdaa2f8dd0bec2b4f93615f7055e5a8109d7ad4307d62dae0206a0e39779da90abc7bf71e4acac0892dff6afad7f9c0e392977ae368eb2073911ebae552dc77aa4b0765e1cade43f1d6a1a008db941adab484a5658e1e19acb00d8045dd3ffc999aa89c03e65eee2a27ff1ab0bbb703a7a54a1674775d9af4fc51fe6266b837bd1ae60fafc58ae491830acb6dcaefb2f5f1ebac81156b1784afdcf4fe483acd7362c36d98eae3face31a53a79a1f4899a786596371eed3419e541405b4250e420d8dcbb1dfb097e51b561fc136e40dab080f2e500c2ab52d184ebe31fc2e27d4e204caea0e3e500ee4f9d78e8abc2258090dde2484ec1f7c138aea0a672de90d0ce567b04a47e04a605c02b4f93da68bf86d2072d2e904b953addd7ad584c29cd9ee2ba5fb56876e0468ff738399d1ceaebd5e93a58d7aa06cf081f321f4a3e7a3d566d1705071550d78bca2d5fc1497c3cbf8dabf13492515c460e05df5fc8e60b8996ba678d36d29a8489b63eb5b60a15ce5f397e2044eff53fe09d59f779c1fe508155990022fb7f4408e98de9365219e35ad589406c03f58f71cb81db7e1260abbc1fbe7004eed08dd1701e716f6d8e7b265de31cb9837de5028fc782d8454be25160edef2cdedef5824ee1ae5b63bf49241f781772b543c58fb6e58cd4e720944e5d95ef37272cd8560773b58eb2d69d070a0e5d4b5988683b07f0a05d359f0ff7abd45edc1870b903ddd4ca74bee47d362c0bf418ad518a314cf6866cecff923ec6bb5983757d76f4e114a2889e23ebbfe90aeaef68daca91e1cd2cb89c7bd3d9a26c4a96f6bc3809f635874ae3293b318f9cbc5086e3e600ab0bf70712ac03b16459959487b2035c00a570d244c1befc337e573358f9b41a4a8368836fd6a77d446756537505095ca0f1f1ce41d50814b9c49a32d20e880ee5183e38ce0b01974ae69cf8aca7e6e5c55a643d06c200c1f8c57b2e21236f7301d34a010d3eb4abb4ceb8b94445052610928f547b209de51529576b48a970004c86da9bce7f9768d0caa52794df570eb2a639ec2a76888206d7e3448be984a24d3d1b08b5902f1a199902e85dd72bc45a12227a018d64cfa50141b1c252c2f1cb21fbdce34ea0c642a1625363a98b2cf3ded6039c750c95677e545f13cd7ee7aa7965b8e8f8f4d2a016679855904f0a4f7975969c66f21065d8a5f07359206093603a5b7246d1ce94b6e79313caa4dddc0c252a22a94ea58eb7f3cc07867159489671968a8f64cb5d2e95b863304f2bf5426da318e478524a5cef46198ca8c5ea39323e8d75f39daf17b32231792e04f63433bd769a209dabebabd6ebd73ab0747a6449fc7d8992c927f9ebf4d154b0a6cdb6a356ba502dd0e0dc1a7d9e55fb884bb3d1f610d7c616dd571855de845c1541f780720ea056baddb1053cee1273db9ab16b4afdf23420a9942ac6ca19fb732d59b0f4c684cb59a99ae0b6710665cc7d998634c84f3e4af556a9479e5ba3684f9bb0a078761d8a18ff4618c0faace355f90d21bc003942d671adc4fcca0ba40ef76c305304ba05ea0691c4808010a3e50344bfd2c6a8d78ee53616ad4bcdc61589edb7f20e22049461a712d120717740d10f69b20e517db064418cfbd5ab6b59e069d8d2134cea9720378580d57571662e377db21b719399e810f6936ca590fdba55d4fbcce3b710d115b0698c827e25b5060d1c18c6d55531709cd1c5203916b24b7a5c2cc407da79dee18c73494628245cb969a048472d2e58e74967282d4e0fa68311135935b6edfa3b039969815dcc56395f4e7cc917bd872dbced09aebde73a24088bfff3cd2db13ca32ac271c9f267a1fae4070c887fa7cf8b6279b90b5dbec4fcc47abb60de0d9ba2be2aa3117e136ce5d49d6f629bb57c92c7db1ba87f22f16cc7f9cf1ee9fd23e3dd1a3fcd68c147dc74aaf086a93f39525e436da8c69784a250fd20b7865e59f299b1e0f1ac0b82e50e361d62e751c8076a0fec69d8e4f09ebfeed4a43e1c0e3793ae08acdf90a2e45126ca88f8a53a6759e552bd2fe20483e47523c45af92b3143f89fe1c2614ac13fe01fda4d3abb3c5f632aacb6974737cc816108cdd5644e7faee4fefe2197376d68bcefa1d689e8a6f2ef6198e9371e4c9667f60d56b8cd3ed6772dafa91b7c92bac380883403c2ba895a5d1db1cd83bd70fbf998b85d99db57682de5d164b7dbe73a2a0062ce97f76fc9ff4e4e984b0ecc9661a87fdad23539627ace31ea943afb1fd698389e9b1839b6f43a75c333e67df1bc93ad0995b4d0985dbe4f85359e1b7c803b6314f1397131102e3933a4c1074f10e8d62b5eb844e8bd1c4a8ee535902932ffd9fd2e92a25c54db550f560f02cdda52dcd6d1de5f0b69d24f85add54e94864a319243332f99982f0aeaed2072c48b9977684410ff5ce2190f192fb79d848f895d58878eaa42cec34334effc3e752939aa514f9f967b2be18746c67a330527bb7651bdcf3d990d9972c1549f8cba8d5669f1ec3e34a542cdfb65949d79a1db4fc0601f004a63b93b72cc3b29b8d7ce7a037493fcf77403fef6be55f709f099d17da67f578ce3cc0809270556b7537fdbb63440a6400d466550f8923cf7a8cef6bc2a9093cefb46708489c8acb119fd579ec265ebfbaefe8320d92550e9fb290a8d7272cc53a933d15f388bdfbdee3319143de6ffed6baa27f035bf8ca43a5a9fa43d47d8ab4db93b870d74bc48173fd662c8aa08344abced505da79e3abf5b0a9ab1a0d508e5b8729fc4c8e33bfd82279f220afb4acbaf534e1b4247678aebfb2f3455bb061bb3b5457e42ae7350f2070ad2e6d43c8877916dccf70cd3c92e9f73266e8176bc89a6a35768c5e8ac35d9ffbdc225c4abdb553abec7f764e4f8780b92e4fd01120bdb963d5e4bcfedf7dd23e8ceede60ea56b30d76da176ee910d1cdbeeef4f07aaf165c711e13c3e44e5406932cddd66004d2550674cca6dff6cf0194c8852bbd58d471aa4d4b14ce56fbdfb44447357f628ef33e7874b7aeb3dcff330a37e677d57300bec41f1f0bed4a55fb5165b97bffce170dae4b4c355e7d7c888f1440785d7b66c1157341644cc3e4b62804303d045fdf6eb445ecdf56a22083e8389f11708f6a84933f8057ac18db9b0b2dd28967d8fc671c6d76d80061935be282315eb974db888404ceb6758673c6839ea9b32886e4bb284b53841636af46585eb62dd8d52669f67b7a2dcfab59a59a96522164241b7e5ac95384c4822f970632d273845de76bcdd4c60886382952acb8d3a6070e7c171e544e6b47d9feb0c1b66969c6be6480024d939dc9db21c19e9529589c63f5dc43a9669f9ce2397a2f8552ee9a3e56272b3665bb3a4cbc953c5d9ad54eb26e26598697a66ed5ea31cfdd07cae67bf3f7e13b562c35176906286714b8e030736b98b95df74b9280bdcad3dcba010ce0b5a62f75c85f5d8b31e0f89af3b5130e92cce4b3a04c71f4f00c5afa6f1c905ce24d9f77bae5f3ac04fd18c160edb7f7acb5a747fc2bd78702d209c2b57506834f994c772334538b52096fedda6c60136dcf2053494a96798f3e0d58951d3bf6976189cb5b4821813078db3bc204be7d8f7eb7958ce8c9c189603832592334fca98a3e49f40bc3078cfaa0385196627e1ffa9d2e0a1f908cea922d85d41de1f621c188443d1ae92ca5063f85fc51670291769459afcc2912cadee236459fa661a535ba341220f4bd00a2630433d6e9e179b0c5b3df6897fca56df73de727ecbfacc41a4aff62fd51c70df8a140a71cf0cda1dd8c896eca96648039445d3c3f0a6ed6d076c3e883640394f01024b2864cc27fa5c2a9ffd1393d862462439abf5bf4f9542adb8c125e89733a1e1d278b1a484199c39c4dc5795bf9d2f32b3e0507c4f4726d751c32ff99645a1446e40202c15baf69b36439fa3b30a8b4f3688bedcd4dfc16a688e53180a7443a56548fcdf7da3c1c95183629de104985953aa9b82bc926da523da6925f61a3b77578691ea5112fa3593e584952ba47587178eb88827af06052737646304c0068ef0895b7bebdb79d18958c35fe0b34ac3a0ebc92ac9b138e6d14a24e58fa84dc026392da51862d823d8ef77904b448f5f48b948f27f77b3bf71696a4040ffdcd7c42f0b0074e459467b6d14c12f461bbf7519a14c071aed1e318269894073efc6dd5c59a239298d3fd12ae1d1c70fa0ede584cc3588922c6390ef56c7404570c5e85e420f0c27845e6f7e642cbe85b7ea761ed78d40dcaa322f0982bc1e0b8037ce7d77d0be45215f0ff809b300551be3f4ac0fafd5277ce4e6d7896ebba11c59cae25584733dc019ed9c86d358418de18ff8a0337398d437af41e5034a4dac184ae16fae1bb1163f72c002f95f26cd552259719d1caf8947f17f6f286468a35eb96ad6a195e513a22590029cff32a025d9a207cd4ce484778d1718242e149ffddc1006ea68ab0e40fb83f957ccec875776042abe2b833fe5ebe293db25aebfef2c892bec52de811b14f84d7e7a6808694677d5439a023a44dc2d20d46e189527bbf0f52bb71ad2f5ccbd9ff22259800877ca3e3e49a1ec16af3d6d3b72828df19346bb611af477258fc57e3cf961f708583be08327646879ef5ef99db2a200feb348e1cc0522766c43b87a8b2d2458bd4c95ba6e40530ad78a389f21e05f3e764d67d77c8df25794f3f75020b5855bb3d5fd74c062fa19cc9732bb86a06fbe59b4f1ca196ffd0f832d54548230a014add2c62cf5486d0ed3013844a1b6408bdea30bf2e1ece44ec200779d9733feec4ebeaa0d716888acc4c3a4d42e85828eee517bc7718c9e381bc687b049e77f6a1aff71f613131e3137911f5b7ee416a23f17d42789877a1cd2ba3947eb74ead5e7bb5295125e743ced14298281a4d62c01a9b65c173923b99882412e3c708be8bbf2f1bd4430799daab021ac8fc57b66e9a329c593bda7c6aaeb134abddcc4f7e502fc11752a43e910c63f8da4ea51a034c85245bd8de1df2c78ee2e10d167f68fe50d2d8121df9363cb78db382d05a41b24daf7d253fc8cc2ea150ccacdfee269e6936622f5847bc3cdcee8702be879f1cd39affc50a8f53cf0f6062971a57542cb59aff01b8bdf58a17626e717ee9c5219f1b0728f7ab68202910574c64ac66525ac97bdf6a74effb356ac6250f2921104ab6614b2c0e6bc44013811a8d6600dd901db2144fd9e53f7ea8d86afc0162cced0ab605c39f5d2771e2840df70ff00c3f1e8cd14b4a90d94278d0680fd8b63f5f7076c1b097e4b2fe38b15f5b2a3b967a8014a8cc2db81449ec6b72ba8362bf1e8e877763f0b40f44adbf7990d5bb98b2ceda4cce238fe7827c81dddf512494fbd8e081d093c15f15412b50b8d5183cdb3dee92530b88e642cc0d8d0d5f826875f444ab691f96e7eee48b1d3554816dd5ae20df1a0dd820ac1a4aa0a27d9cb3c17bf5545c4bee55c60007d1fa3542dd615a75fda7fe05c17ef457f76738aa9f0ba57dbb77c74a950ff00823504d64054c2038ca1dc3290811deee5d660e69d9f9b18e14857e8967c9966ac9ffaac0ae4465470957ef44e7328bc82cf1de84717edfa011665d7133016e243d5eff1603591419a2a2a894deb6c343e9f1869e85598a56e85076c6a9f5a5fc25b19c0111d8eb70fc656f2fe45dcd3be41c7ec892b181d043fdc1f9fd4a9f94adab47fd6607903c93dc44f0ceabdd516a9e48ea651a74e3445599ef38e6f69b6e6873608ecd4e0f3d2cb775e81f8c42375c616ae64ca1bde7cf333dbb5958099a166c127722fe31a4a74709bcf2a469115a96b38f38af8e6115e3be4b6ed34570e6537633f309b69976c2c3a4e3e004612f008bc8fc02f570167aa39e7653af06f80f2a3069863d83a50508c25887b3965fcc65a7f52b6ea8a13d1cdf646dfaeb6da352e6ff0aaea0a358dbef581f4699046c52289973fbd460f60c526f1cfb13e9b2e94eaeedd4637b3c8bf819ad6f0992b80947ad15ddecff205a66dbd73f8b77c1c83d24c87a67701ce07019d94c616265b9b708cab2e4ba4b33041a1339860f30fa4cac40c438fa4f1e29aeccbca52596f754ff6020e9450f4b9064a2399d3937d47b249fa3a6c33487e33eab869deefeefdcab8941181f0a0e26bc8a23136e6963953b4b9f2a98a6723e21bbcd80352d6e7bd41630a6d5c548d58a00f237bb51c881f1a673a9264a6ae16b2e0dd9678fd43d5c54634b18f6532f5289baf6137f82dd63b20f832c1b91ee30df47b39ff068c64e9d768b85fcc76141cdf6801efc726104ce90beb028ca87cf9a283f5625599c0eefe4d95f4f45259119be829ec7be8137a754d5fbaa654cdca20489f9b77f0d94b40c5edcc3ca8d072d8a90698800726872e7ea4076b0d32f3a20d0b609937dbc14b64cc808fddb9dda68bc7fe9672806a6d691b8d12a2dbc96e4cf2fc2ac9e4b167fe278aa5430fd36abbb140b79698e5f57ba1bfdc59047a0d0d4e13c366c314b79c46dcfcaef8b6834f7ef657828506f5b96e71edac160c1cbfc25be3ce133a011c4351f86a87bda2ea000624565856 Hey, password is required here.","content":"<div class=\"hbe hbe-container\" id=\"hexo-blog-encrypt\" data-wpm=\"Oh, this is an invalid password. Check and try again, please.\" data-whm=\"OOPS, these decrypted content may changed, but you can still have a look.\">\n  <script id=\"hbeData\" type=\"hbeData\" data-hmacdigest=\"50af4a60ff81a150471d1b5e5385dc8d87a54f0bda204ce15149bebca6dee28d\"></script>\n  <div class=\"hbe hbe-content\">\n    <div class=\"hbe hbe-input hbe-input-default\">\n      <input class=\"hbe hbe-input-field hbe-input-field-default\" type=\"password\" id=\"hbePass\">\n      <label class=\"hbe hbe-input-label hbe-input-label-default\" for=\"hbePass\">\n        <span class=\"hbe hbe-input-label-content hbe-input-label-content-default\">Hey, password is required here.</span>\n      </label>\n    </div>\n  </div>\n</div>\n<script data-pjax src=\"/lib/hbe.js\"></script><link href=\"/css/hbe.style.css\" rel=\"stylesheet\" type=\"text/css\">","tags":[{"name":"记录","slug":"记录","permalink":"https://jonathan1214.github.io/tags/记录/"}]},{"title":"211017-周记","date":"2021-10-17T15:49:05.000Z","path":"2021/10/last-week-211017/","text":"845bca6bbae78d3763847ae442c60a8a9ae4733fc54ead5266e5a336ee68550e4ea3af755c7ec23681a6a76e8fb0904d25c7255c63f949f47303d65d911573c5ef45fd19f7b979cea3904b7f38a42c4f1c2e90d7dbfd68a23d0c5716e99155aa0015555d79f0e5df30b77f491d1c3ef5a6b16adeab760c2ea91c9f4eee1b1d531d3800a8f7806fc9f8d3a49807d8ba82ee320c14c9bd9af5a4568b600820e72593c0a301f0097676538271b85574d1046d602368ff337f1be1ad855990122d32d589cfda7762f825a4f94b2cb4325b982f9aa590a4d0718193ca1ff3d097dc27706ee7aa936355f36aeebd03142edb108094d529da9935728febdf28eb2dde749625c49b807498cfc6a684cdb9c8d763933634a1649eba88ee6c651e74bd87d5a24ab5a5f504af86ecda863272efb0af3d72e5b1108ada2044028835eef347e3efb28660141fe93b8f8a93a67b84ad6b6f44721f551aacec872ac91518c31cac09cd3d7f72f47f1dd19406c4a8a95baa1b1eabcc36dcd6b051a44877ed06a81c7ff64783b64734dd8982f576b80185bf61c7dadb3aad2461e61afa138176d208b1f8fcf60e94c3dea597a453f755780c52790a0b0fc2f95b49f4b26ddb0cb0db2db34444c6515430c9c0a1bba541c011e6048bf989d58c4883a099ed05f42b2e12aba4a300efb1ff6329166ec78459527cae60a5a14b2eeade79c993f51db3480d2fa28934c86b34ea71d4f72ed29bcbedb2a53df1ffc05367d08577276179e8a8be3e7e53e97b04252532f102466238d1367c75b1641ff42e451735137113a422fe8c5cd8864ad2a44b49e8f1a03d93e21fb328e45ff55a6f8264bf007e74b3625865b9d87fed89e469a3c45391aa90c75079b9f81641466b1ff833b65da985e5ded89e21c3e91d8ebf4afa2927776a99b1c1f0820874272d90583cff9743ef50df1c7583c25f52307c6543e8d0c47b1a5e33643b70da103a004a48924f153b41f470b57a52873501b4c58920c58050186b613e84f8fb5f72d4eeec3f93df018c822b364d46e3ef74124cb6d49dfa8f6bd87114e9a3e609395d1284fa23392f496c63a63300c211e3192470fdc367b7bf7857765d4c9fe8398e179161bb56f41b87dca146f0b6fdf244de2d1086c730f70beb59dcaa91d055944e8e0f84f3cc8a1b06e814ff1be3cc1f1e4454af97fa0b883c965485262fc85ec32f8cb33417c31190faf0976a192c43f8846c5d6174b5c86c0308bde312996f3514b5c1152c99febb073b4f789dd302ae2f96bfec7d2ec60a82ba856ee4f367234af3ba6bec283c9f4540ea76451421a1c6a2971f00592fd039a59727ebf3b481ebd759151274798c8c7acb881d3bcc60a9b75d8fb46667f1ccf6f187c7e5d1e3ec4e885a9cfe29c73dbe11eab974579f8a661f61f989208618e6b7dd055e98ab6bac9d0fbfeb8414844a587a6174966da3d635b55537efdcb6bb474cb0a5a1926dcdb7d7761fea7e5ff95861ffd2a81bc6bf357db7b202942481b4560508268f024f654a9801bed0d286b4276b06f10b4c153c6961594f37dd8b9c309300c9ce67114e2d9bc2a79f9425167c40cc58c9f3b2cb9eb9e69b3c6af02303b496b4d28e78720e344e724aaed33198ab21762979d78e6625894e737ff52f916e1a291286aaee3313c3f7fb20cc829b30012eb08816b572ab872b528d61f8572ca64f5a4d055e82b5568e0cb2b05c2ca79f01a0e9da39727b881d173d50c46f93abd9bd22614efd5f5cd5d371d20316721e42affccef2012fea5e968bd801254cf0c17bda7df41904dc04a93c4fc58356d04b7ec9737b782f1246bf062fddaa133d83db607c3cc794da7afdc1342042c1b0d7e9c639c640406523061ab9c42e84e7d42783aebfb66297327a570a1c194f95ca0957359ea710030581dbc6490fb8ec503d575ac3508b6df690b3d5443c6906801bb364836d3e Hey, password is required here.","content":"<div class=\"hbe hbe-container\" id=\"hexo-blog-encrypt\" data-wpm=\"Oh, this is an invalid password. Check and try again, please.\" data-whm=\"OOPS, these decrypted content may changed, but you can still have a look.\">\n  <script id=\"hbeData\" type=\"hbeData\" data-hmacdigest=\"e60b686489d63ca0c00c68f3b7c30a380e2504d33db72677f833c8d6e29fe3bb\">845bca6bbae78d3763847ae442c60a8a9ae4733fc54ead5266e5a336ee68550e4ea3af755c7ec23681a6a76e8fb0904d25c7255c63f949f47303d65d911573c5ef45fd19f7b979cea3904b7f38a42c4f1c2e90d7dbfd68a23d0c5716e99155aa0015555d79f0e5df30b77f491d1c3ef5a6b16adeab760c2ea91c9f4eee1b1d531d3800a8f7806fc9f8d3a49807d8ba82ee320c14c9bd9af5a4568b600820e72593c0a301f0097676538271b85574d1046d602368ff337f1be1ad855990122d32d589cfda7762f825a4f94b2cb4325b982f9aa590a4d0718193ca1ff3d097dc27706ee7aa936355f36aeebd03142edb108094d529da9935728febdf28eb2dde749625c49b807498cfc6a684cdb9c8d763933634a1649eba88ee6c651e74bd87d5a24ab5a5f504af86ecda863272efb0af3d72e5b1108ada2044028835eef347e3efb28660141fe93b8f8a93a67b84ad6b6f44721f551aacec872ac91518c31cac09cd3d7f72f47f1dd19406c4a8a95baa1b1eabcc36dcd6b051a44877ed06a81c7ff64783b64734dd8982f576b80185bf61c7dadb3aad2461e61afa138176d208b1f8fcf60e94c3dea597a453f755780c52790a0b0fc2f95b49f4b26ddb0cb0db2db34444c6515430c9c0a1bba541c011e6048bf989d58c4883a099ed05f42b2e12aba4a300efb1ff6329166ec78459527cae60a5a14b2eeade79c993f51db3480d2fa28934c86b34ea71d4f72ed29bcbedb2a53df1ffc05367d08577276179e8a8be3e7e53e97b04252532f102466238d1367c75b1641ff42e451735137113a422fe8c5cd8864ad2a44b49e8f1a03d93e21fb328e45ff55a6f8264bf007e74b3625865b9d87fed89e469a3c45391aa90c75079b9f81641466b1ff833b65da985e5ded89e21c3e91d8ebf4afa2927776a99b1c1f0820874272d90583cff9743ef50df1c7583c25f52307c6543e8d0c47b1a5e33643b70da103a004a48924f153b41f470b57a52873501b4c58920c58050186b613e84f8fb5f72d4eeec3f93df018c822b364d46e3ef74124cb6d49dfa8f6bd87114e9a3e609395d1284fa23392f496c63a63300c211e3192470fdc367b7bf7857765d4c9fe8398e179161bb56f41b87dca146f0b6fdf244de2d1086c730f70beb59dcaa91d055944e8e0f84f3cc8a1b06e814ff1be3cc1f1e4454af97fa0b883c965485262fc85ec32f8cb33417c31190faf0976a192c43f8846c5d6174b5c86c0308bde312996f3514b5c1152c99febb073b4f789dd302ae2f96bfec7d2ec60a82ba856ee4f367234af3ba6bec283c9f4540ea76451421a1c6a2971f00592fd039a59727ebf3b481ebd759151274798c8c7acb881d3bcc60a9b75d8fb46667f1ccf6f187c7e5d1e3ec4e885a9cfe29c73dbe11eab974579f8a661f61f989208618e6b7dd055e98ab6bac9d0fbfeb8414844a587a6174966da3d635b55537efdcb6bb474cb0a5a1926dcdb7d7761fea7e5ff95861ffd2a81bc6bf357db7b202942481b4560508268f024f654a9801bed0d286b4276b06f10b4c153c6961594f37dd8b9c309300c9ce67114e2d9bc2a79f9425167c40cc58c9f3b2cb9eb9e69b3c6af02303b496b4d28e78720e344e724aaed33198ab21762979d78e6625894e737ff52f916e1a291286aaee3313c3f7fb20cc829b30012eb08816b572ab872b528d61f8572ca64f5a4d055e82b5568e0cb2b05c2ca79f01a0e9da39727b881d173d50c46f93abd9bd22614efd5f5cd5d371d20316721e42affccef2012fea5e968bd801254cf0c17bda7df41904dc04a93c4fc58356d04b7ec9737b782f1246bf062fddaa133d83db607c3cc794da7afdc1342042c1b0d7e9c639c640406523061ab9c42e84e7d42783aebfb66297327a570a1c194f95ca0957359ea710030581dbc6490fb8ec503d575ac3508b6df690b3d5443c6906801bb364836d3e</script>\n  <div class=\"hbe hbe-content\">\n    <div class=\"hbe hbe-input hbe-input-default\">\n      <input class=\"hbe hbe-input-field hbe-input-field-default\" type=\"password\" id=\"hbePass\">\n      <label class=\"hbe hbe-input-label hbe-input-label-default\" for=\"hbePass\">\n        <span class=\"hbe hbe-input-label-content hbe-input-label-content-default\">Hey, password is required here.</span>\n      </label>\n    </div>\n  </div>\n</div>\n<script data-pjax src=\"/lib/hbe.js\"></script><link href=\"/css/hbe.style.css\" rel=\"stylesheet\" type=\"text/css\">","tags":[{"name":"记录","slug":"记录","permalink":"https://jonathan1214.github.io/tags/记录/"},{"name":"weekly","slug":"weekly","permalink":"https://jonathan1214.github.io/tags/weekly/"}]},{"title":"一次长谈","date":"2021-08-08T14:36:55.000Z","path":"2021/08/a-long-talk/","text":"845bca6bbae78d3763847ae442c60a8a0262eaa90797026afe30de83a9de84a917b15eaa525498118071a2595307f0f0db8210b478770e3355e4c5c7b531a9103733186aeebbd7f0e0f28436d68f65916b4f98c14a6db166aefe8d778bd26851218be1a6eff33515fe1252db19b994546a3a700d037043148eed9952f0a6bbefbe9cc6258068482627e0ae4eb151e7b997189b887aa902af808c254b704efc24a8f0e3f4421fcff0856a8a5203e375a627232439162b6b67d569d6a58ba653875ce6ed6b12f0865bece1339aab470886e84c687768fd6c0d3b07fa5f837df1c93a011e88b6ae63659b1f75de2d4c3f59820272187a3e761d10d67f9cb8bd2fa73df42674dba2a72cd8feba34680ed288507faf4c74bfa2218be6617787f1336c7e7ea6bc0f99009c2baa78bfaa5f0593b93a0175f086892a965e2bd23b051f850e27e243472e51bbba0628daefdbe5bb2dd488fe4d19095e3e19ef75897725ec5605fce706b313a829179c067eb3caa4457e3c13c6aa7325354701a4d4e6ad0c976f67348ea9a6a579ed3c8688e0e5667b4526765f42ec216d230df3749c3946da69cdb153818a8ed951ee4f123105ba7856f2622eb8701054ae7eb28f013eb738f7fb218aa9d5dbe932d8d75060c52e57123d4e5f5814c2d70367b347f6f979c6bc2167ba5507d068d71c697e2079194a066d72ecb74b2c66d7d070b510c739a57375698d45e90a9ed9a957801568489faebafa92cdfe3067873f2b10d2ae0a2b8ff5bbe9e4a062cd2b0e5c02ad985dc2226c327cb0d5df0efc31eb4b2f8159a3cbd69d14e0f5c1337f260e2a6ea08d653b4c01312041322acd379dde4845968877688af1233892ee493d0ead550e87ead43cc1785cf8c4d663b7776baf5e48c553c10bb371ce72f532c24ffd67e832d3f7d818896e305eca002bf890e0f1edf27841e81fcafbbe8c384568ee81d9d26ad507a1d8d297b6afebf25ea183d264e7b369a137486f50fa240a338f029c464cbbdd44824bff49325587fff1e6e32f999c3b7f6c8507e5e329699ba2c1ee33b60854c8cd9cd27b21384a969992125ea7183065535c372a5fbb733db408ad429fbdf7eda80c1450328fedef7793a858b128a4ee2c3d197d8085349aee87c5613a261dc01b380de368552c495d92f5ec091dc23ce8281e49f4a615894db2741b9e4399d05a3e21122fabf4119fb38a086b4bc7d1a87847978ae20b089f2e46162b94c76d16d00a735476c87dc88f7b475ead2ae5b80b60f50001583abeda6661a11bf7fba43ee9ef7c625c1050ed47188c45af6546c139cbef9a229c72c2ec4bdb6c71ee55c03e7227edfd81243a4550428d6abacecfa472157643fe38f85659d1bcccec00e7f00c68c4190da9d38095ea2203f82e58170cfb7c91fda6e87f486dbdb5bfb82cde885e09515b74ac348ac64f6620bb5e7056423566a778b7ae7da19035da7d68c1d6f8a4f56da4bf3595cc4854f4bee1d826a2b63ed6fc68bd458d2ea5606522a03f56e60a036f80f3899bd1d83458dc0ee5464c135e15828c8151ef204c9091cc9fbff1647bb58860fd38f6a6b7a80de2848119789d16586c7a8ac1a918af709caa93678b7ec23555454cc4e999bafcd969bb01be71c04413e24da591000712e2dbd6b462517a8c8eb9f96c320334b05d79d0bc1606ce9337af98134f5a6ab935841fc4e472e1f0466d35d40c151f7a1084e9880a07c1b463f46f863ccbf2d30e0972f3b9eb0be4a50b00f0696b9bd635f4753a33784339f435bf6fc761a0b1f367607ec5970737b8acf325409581950b133a002a151268633c47e303cb6d7724166319ef1d097beeff052f54070df8c22bc096450b8ca079223112aa33d6dea74d8af354dc3ce9fca1ce1beaeeb54de5486921432b4a19d326bc01b0d78242d007087ae1c3fd375aa5b9e63950378c77eea1488f00a61b5bd1db9b951e8241148189f0ce4fe97109a62de02448e318de7f95fc494b57299f6437f28f983b5c876f09a5da1a27c8b673c0b4057fde9b39d83b6f9310a1b382b3aa43fcdc9fb59e66791c6b26ec37c34e02fbe22a891c0f22b5f04f0aa5abd4c289ee77e0cdf894dc86afc2cc26ddf9392498a4a1ba964a1c99f8c386f294c8f4ac1eeec131f3e9d31a9ed69cfec13b4ca2a2a0253a97ce501212207f47c29f9266b6c7cda89bf552e347c74e37ae82b60f461794e472917293095a50ca4e4ff8ba090da8bb829cfc0441409db59e26410cd35815b28e1a574036491172395fb19a67e535eeb62e54b2eee8622e3d3251785c74e17f0da924e7c949582b8eae0acb439ebce2321ef24796ed157aa52e5a027545593afb77e339f4b80469141f797f8d8d8cb4043ef76418185aa272598bee9964404665df433252f63f1e7692a75fd8d29f9d612e2139eb9c5c1ac477b826680ebb25667e646ed42d11f4ed6276cb6264fbe0178b7489485b03c9e65403fc48fb56a8763478ddb740877ecaba6a135d41d81eed561015d073eb7f5e0508c1f69b92f9003061c26cbcf5f68605296e584ef325c73027e47d5cf2433221d7f6290e526a845f3edb5a3bb4e6ba8cc13f925d5aa1bfcb5220fe21c6c9cc9c7e Hey, password is required here.","content":"<div class=\"hbe hbe-container\" id=\"hexo-blog-encrypt\" data-wpm=\"Oh, this is an invalid password. Check and try again, please.\" data-whm=\"OOPS, these decrypted content may changed, but you can still have a look.\">\n  <script id=\"hbeData\" type=\"hbeData\" data-hmacdigest=\"aa0d9c01839857969bca9cb73651a8bb4cf3008155cda24575c349aa43a5a271\">845bca6bbae78d3763847ae442c60a8a0262eaa90797026afe30de83a9de84a917b15eaa525498118071a2595307f0f0db8210b478770e3355e4c5c7b531a9103733186aeebbd7f0e0f28436d68f65916b4f98c14a6db166aefe8d778bd26851218be1a6eff33515fe1252db19b994546a3a700d037043148eed9952f0a6bbefbe9cc6258068482627e0ae4eb151e7b997189b887aa902af808c254b704efc24a8f0e3f4421fcff0856a8a5203e375a627232439162b6b67d569d6a58ba653875ce6ed6b12f0865bece1339aab470886e84c687768fd6c0d3b07fa5f837df1c93a011e88b6ae63659b1f75de2d4c3f59820272187a3e761d10d67f9cb8bd2fa73df42674dba2a72cd8feba34680ed288507faf4c74bfa2218be6617787f1336c7e7ea6bc0f99009c2baa78bfaa5f0593b93a0175f086892a965e2bd23b051f850e27e243472e51bbba0628daefdbe5bb2dd488fe4d19095e3e19ef75897725ec5605fce706b313a829179c067eb3caa4457e3c13c6aa7325354701a4d4e6ad0c976f67348ea9a6a579ed3c8688e0e5667b4526765f42ec216d230df3749c3946da69cdb153818a8ed951ee4f123105ba7856f2622eb8701054ae7eb28f013eb738f7fb218aa9d5dbe932d8d75060c52e57123d4e5f5814c2d70367b347f6f979c6bc2167ba5507d068d71c697e2079194a066d72ecb74b2c66d7d070b510c739a57375698d45e90a9ed9a957801568489faebafa92cdfe3067873f2b10d2ae0a2b8ff5bbe9e4a062cd2b0e5c02ad985dc2226c327cb0d5df0efc31eb4b2f8159a3cbd69d14e0f5c1337f260e2a6ea08d653b4c01312041322acd379dde4845968877688af1233892ee493d0ead550e87ead43cc1785cf8c4d663b7776baf5e48c553c10bb371ce72f532c24ffd67e832d3f7d818896e305eca002bf890e0f1edf27841e81fcafbbe8c384568ee81d9d26ad507a1d8d297b6afebf25ea183d264e7b369a137486f50fa240a338f029c464cbbdd44824bff49325587fff1e6e32f999c3b7f6c8507e5e329699ba2c1ee33b60854c8cd9cd27b21384a969992125ea7183065535c372a5fbb733db408ad429fbdf7eda80c1450328fedef7793a858b128a4ee2c3d197d8085349aee87c5613a261dc01b380de368552c495d92f5ec091dc23ce8281e49f4a615894db2741b9e4399d05a3e21122fabf4119fb38a086b4bc7d1a87847978ae20b089f2e46162b94c76d16d00a735476c87dc88f7b475ead2ae5b80b60f50001583abeda6661a11bf7fba43ee9ef7c625c1050ed47188c45af6546c139cbef9a229c72c2ec4bdb6c71ee55c03e7227edfd81243a4550428d6abacecfa472157643fe38f85659d1bcccec00e7f00c68c4190da9d38095ea2203f82e58170cfb7c91fda6e87f486dbdb5bfb82cde885e09515b74ac348ac64f6620bb5e7056423566a778b7ae7da19035da7d68c1d6f8a4f56da4bf3595cc4854f4bee1d826a2b63ed6fc68bd458d2ea5606522a03f56e60a036f80f3899bd1d83458dc0ee5464c135e15828c8151ef204c9091cc9fbff1647bb58860fd38f6a6b7a80de2848119789d16586c7a8ac1a918af709caa93678b7ec23555454cc4e999bafcd969bb01be71c04413e24da591000712e2dbd6b462517a8c8eb9f96c320334b05d79d0bc1606ce9337af98134f5a6ab935841fc4e472e1f0466d35d40c151f7a1084e9880a07c1b463f46f863ccbf2d30e0972f3b9eb0be4a50b00f0696b9bd635f4753a33784339f435bf6fc761a0b1f367607ec5970737b8acf325409581950b133a002a151268633c47e303cb6d7724166319ef1d097beeff052f54070df8c22bc096450b8ca079223112aa33d6dea74d8af354dc3ce9fca1ce1beaeeb54de5486921432b4a19d326bc01b0d78242d007087ae1c3fd375aa5b9e63950378c77eea1488f00a61b5bd1db9b951e8241148189f0ce4fe97109a62de02448e318de7f95fc494b57299f6437f28f983b5c876f09a5da1a27c8b673c0b4057fde9b39d83b6f9310a1b382b3aa43fcdc9fb59e66791c6b26ec37c34e02fbe22a891c0f22b5f04f0aa5abd4c289ee77e0cdf894dc86afc2cc26ddf9392498a4a1ba964a1c99f8c386f294c8f4ac1eeec131f3e9d31a9ed69cfec13b4ca2a2a0253a97ce501212207f47c29f9266b6c7cda89bf552e347c74e37ae82b60f461794e472917293095a50ca4e4ff8ba090da8bb829cfc0441409db59e26410cd35815b28e1a574036491172395fb19a67e535eeb62e54b2eee8622e3d3251785c74e17f0da924e7c949582b8eae0acb439ebce2321ef24796ed157aa52e5a027545593afb77e339f4b80469141f797f8d8d8cb4043ef76418185aa272598bee9964404665df433252f63f1e7692a75fd8d29f9d612e2139eb9c5c1ac477b826680ebb25667e646ed42d11f4ed6276cb6264fbe0178b7489485b03c9e65403fc48fb56a8763478ddb740877ecaba6a135d41d81eed561015d073eb7f5e0508c1f69b92f9003061c26cbcf5f68605296e584ef325c73027e47d5cf2433221d7f6290e526a845f3edb5a3bb4e6ba8cc13f925d5aa1bfcb5220fe21c6c9cc9c7e</script>\n  <div class=\"hbe hbe-content\">\n    <div class=\"hbe hbe-input hbe-input-default\">\n      <input class=\"hbe hbe-input-field hbe-input-field-default\" type=\"password\" id=\"hbePass\">\n      <label class=\"hbe hbe-input-label hbe-input-label-default\" for=\"hbePass\">\n        <span class=\"hbe hbe-input-label-content hbe-input-label-content-default\">Hey, password is required here.</span>\n      </label>\n    </div>\n  </div>\n</div>\n<script data-pjax src=\"/lib/hbe.js\"></script><link href=\"/css/hbe.style.css\" rel=\"stylesheet\" type=\"text/css\">","tags":[{"name":"记录","slug":"记录","permalink":"https://jonathan1214.github.io/tags/记录/"}]},{"title":"调试小记","date":"2021-08-04T11:05:19.000Z","path":"2021/08/debug-whisper/","text":"又是什么都没做的一天，这次是真正意义上的什么都没做，虽然手头上也有几件重要的事情要做，但内心深处认为不应该在这些事情上花费太多时间，因为这不是我想做的方向，但是没有办法，我必须得继续做下去，实在是痛苦万分。先前用来排解的理由也都不好使了，因为时间真的不多了，而人的精力又是十分有限的，我必须做出选择。倘若我是去做另一个方向那倒好了，但我是什么都没做，纯粹地在玩耍，这是可耻的逃避，我必须面对了。 为了挽救一点点，且把昨天的调试记录写下，先说下调试的结论，我没有找到任何问题，这意味着我又不知道该怎么进行下去了。 现在的情况是这样的，我再对ldpc_cpu.v模块进行单独的测试，输入是固定的数据，最后比较输出的结果是否符合预期，出人意料的是，测试结果完全符合预期，这就意味着至少在当前的设计规模下，ldpc_cpu.v模块是正确的。这无疑是好消息，不过从另一个角度来说也是坏消息，我不知道该如何进行下去了，最终的模块还是存在问题，下一步调试该如何进行下去呢？也许可以从下面几个角度出发进行尝试： 测试ldpc_vpu.v模块 测试ldpc_cpu.v和intrinsic_ram.v协同工作时的情况 测试ldpc_vpu.v和intrinsic_ram.v协同工作时的情况 测试整体译码器的工作情况 大概就是这么个思路吧，具体代码写起来应该也不是太大问题，终究是个业余的设计，暂时也不去苛求细节的美观了，又是一次得过且过的尝试，应该不会有太好的结果，但我还是祈祷也许会有奇迹出现。 最有可能出现问题的是哪个地方呢？ldpc_cpu.v模块的最后输出前的大规模比较造成了奇怪的时序问题，这绝对是个值得怀疑的地方，可以拓宽一点思路，所有出现了大规模组合逻辑的地方都有可能出现问题，一点点排查吧，只是要记住，要坚持一点点磨下去，时间到了，东西自然也就完成了，只希望自己可以调整好心态，不要在中途放弃了。","content":"<p>又是什么都没做的一天，这次是真正意义上的什么都没做，虽然手头上也有几件重要的事情要做，但内心深处认为不应该在这些事情上花费太多时间，因为这不是我想做的方向，但是没有办法，我必须得继续做下去，实在是痛苦万分。先前用来排解的理由也都不好使了，因为时间真的不多了，而人的精力又是十分有限的，我必须做出选择。倘若我是去做另一个方向那倒好了，但我是什么都没做，纯粹地在玩耍，这是可耻的逃避，我必须面对了。</p>\n<p>为了挽救一点点，且把昨天的调试记录写下，先说下调试的结论，我没有找到任何问题，这意味着我又不知道该怎么进行下去了。</p>\n<a id=\"more\"></a>\n<p>现在的情况是这样的，我再对<code>ldpc_cpu.v</code>模块进行单独的测试，输入是固定的数据，最后比较输出的结果是否符合预期，出人意料的是，测试结果完全符合预期，这就意味着至少在当前的设计规模下，<code>ldpc_cpu.v</code>模块是正确的。这无疑是好消息，不过从另一个角度来说也是坏消息，我不知道该如何进行下去了，最终的模块还是存在问题，下一步调试该如何进行下去呢？也许可以从下面几个角度出发进行尝试：</p>\n<ul>\n<li>测试<code>ldpc_vpu.v</code>模块</li>\n<li>测试<code>ldpc_cpu.v</code>和<code>intrinsic_ram.v</code>协同工作时的情况</li>\n<li>测试<code>ldpc_vpu.v</code>和<code>intrinsic_ram.v</code>协同工作时的情况</li>\n<li>测试整体译码器的工作情况</li>\n</ul>\n<p>大概就是这么个思路吧，具体代码写起来应该也不是太大问题，终究是个业余的设计，暂时也不去苛求细节的美观了，又是一次得过且过的尝试，应该不会有太好的结果，但我还是祈祷也许会有奇迹出现。</p>\n<p>最有可能出现问题的是哪个地方呢？<code>ldpc_cpu.v</code>模块的最后输出前的大规模比较造成了奇怪的时序问题，这绝对是个值得怀疑的地方，可以拓宽一点思路，<strong>所有出现了大规模组合逻辑的地方都有可能出现问题</strong>，一点点排查吧，只是要记住，要坚持一点点磨下去，时间到了，东西自然也就完成了，只希望自己可以调整好心态，不要在中途放弃了。</p>\n","tags":[{"name":"记录","slug":"记录","permalink":"https://jonathan1214.github.io/tags/记录/"},{"name":"FPGA","slug":"FPGA","permalink":"https://jonathan1214.github.io/tags/FPGA/"},{"name":"Verilog","slug":"Verilog","permalink":"https://jonathan1214.github.io/tags/Verilog/"}]},{"title":"懒惰的日子","date":"2021-07-30T06:31:23.000Z","path":"2021/07/lazy-days/","text":"845bca6bbae78d3763847ae442c60a8a4b5dfc32b7205ed86ef673ba536d8017601892070a3d5c62329871529bfaee745a21374024c9dea2102bc3551b402e959ac7746711d3815998da3bfab07ee9acaeb5c54a74cb3d61062d08a0f10bac8551859c9cd97d197fd9ae4a6dfb7d75427d028fedb0ae010190ca5184bd0e0dd39be1bcb63664e033f129ca6b078cd4b077ed226dea59ed49185485b88b5696a76bc53b4e719b651ed3d3f7aa878506f94ae7a5bfce1cdbb1f47bf024464208dc62e21febd3fac41e6922f20ba82766f7bc42ef9655172a356845b7d43e9853795d139d17abfb9ce1b1ee61ab79feae285ec566af770a18a834479bf5cc06d82d50320535cfef831f1f5b2490dd18e8768839ab95beece5a6d9ea102f8e724f8f2c4401171871f76092b68ce2615f26cb10abe53dcb37222f69077924f6371dbf4191945c4bc9d1d3bded99d022604184d1d880ae032da8c6f694b94caf698b6480e3ea0c717cdeebf408a8b1d7e8a63b598c4ef039cba531933f81346499e57536d21f04c593c8cfc33ef6283a8dd174d23191f2232d44742cf6544633e9970ff095a8d8bc3e2f6ac21c77f91ca9daa8751bf14a8496d9894ddc762eeb0c54b5fb7caee0a4c9faddc39881f8d53b2cbb2b4c828ca768d36adeb7c45b179fe4c33b26a33926027f8ad71c335cb7cf97d988f35d08a1907e9e0a6ed6be862da1043ee13620b9b49980a2eb79f05cd1cff4c98f76a649f4029e1f076deef62b27223efde4a703cdb1a47d510f88b499d22b02223754cc8d1b3a4a9dbf9a687c0e8bc49aba626bcaf050df5beb9dd2643530aba1ed72a9df42d9a5990fe5a7561261d9d8630e992c8f2dfa05e2401e9df5e098c7f05d605d54182edf9dd8105d3e2c778e0dac3424c34394c047f61f22992393d49bcd563f58128bd6c9491d75c204bbc7859f053ecf96d2aa969e2af29aff748abe8eb847ad9240ef9b7d884f73857c4617d87f3bd8f864436d1d770bc08f4c766db43e4f639e902a09d29b60a26caebe7cbeb57aab09031b925544ec41337edb6202d751329342a6057368be8f1c27c1d491a63edd08afca2ccd1933095a587516ead8b7925b0c7ebe52a738c06fa6f28e22eece1c9a1e7b362c19d91cb53ef33989f151abb4b279ded0318e0b30c81f521b8ddc039a3ba8c613faf96ddd2024804925599cc6b7df74c328a18e1615cbb12c5d55d558cde94e60fc91f3ae3ae313c1a272c6ed1582be759a59f8b0438998f91e40ad9371b7e9008c56444582c47350c59faaf2ced4d525e4f33d222dda374483bf66752b0d4eefd8eff35949799bdf249a1d00536a8bf52a89a386bba24a04718cbd070d05791123ed2186161d018b9d0c0e610cd87dc4d707aad0ba09eec5437ef34fe273c26fd616e5e0f9d6d0cb5efc7223a884104f3367bad105eea59549a14708e7d3499b628abf7ddb56b4d8e7d9f02fdfca05f331c9986a9cdbb7c2a6f65ada06b1f6e9360e4fcacf885597d0c278783b020bedad73b3cdb8ced41fcae4262a5857a14ddbd2dde1f24b682c0d046c6a87078f550e65e45f9920283b96b96bb0252b201d4499e77933d65b263fed2eb66d034902ea5b1805d43ef5537f60f8cefd40a00eaa0c6e1b105e11d13d9f87ad7ba23133e5aa935d6c7ee67495884549bb6eca8f9009dc17a31ccb0067bcab453f35ca2ffffe6275e382824429b0d177716853d99c3b578d113b747eb63e936fdc9afaac11b82aa002cbc397bc22ea50fdfb1bc14164594adcb50934c0c1f5d7a13c27d5e6ec9bba3ea122c87871de14804a90cb3e7f3bb1b86427526b226e9084c4cc5de972a21064bb4971ca4a31ac9161ad9c42664823525c00ac8405ffb8bb4e471fc0fa9896971eb1fd12c9ab2067c921701e02412b1a7654205303998f888d75196b4774392697c155644f923466d47e0f614487032a5813dc71ccb1f8ffde63ea74c0e8fd284663f53750e5d25e35c3f889943276de7b6725fb8e34e1e4c3996f1e9817f2348325d602261d8f35c5e098fb32c0c9175025a357f04bd0212f3d0b5bd31c132a4755d3ae5b1e0096c3e114ac997b83e3e97e2e58cdc0fa8091aa9e45c4df7e9d91a6b36c428ca7b189263a302ad46148443325bfacd2fd3828365503d969a1c30f4e7356112ade201a590a47d3ec651f8429f369485fcfc535c044100b164ddacae62c350d7d9f421d18e0919cab1d879d7bb1136842284d6953f754d9c2885f355ce2a8069a96607fabac52321267d0d080aac38fa795b14a126028fc248ef3f05d2f380ca71f8f7e7c71d9f47abac76ad84fe2639f01395ea44bd95e843e05285d5e00b8429c2c8218ca316828bad98f9920cf8795fcf76b6c2a3c600738a728c0e59b120895a3371e3c2bf3157c1551c18e08d4c0cb0756f4ac2ca70dfab33adcb242d02ef0ec5022a84e56fd85e57a973d888cc2578ebc4112d138d1cacb70d9730cf37fe048c98b439dc66db0c7ee8725f2c7c5a9defe106d1940f942f70085eb225304c2610b46ba118933bc8d349a6840d4366f34d5dfa0f2014c1ee21009e3e0301374671436991d03fe33d8d5b52b2b3e65c260f5d921c1d36aa7ae9512eed1f59166d9b7427f53c64d76399c19070fdd49cf523ec5ee522d474105458ce31798edb1b8a0a87ab75bd1ebf0a0e42a7fb6fc78ccb6cd6cb48fc712dc0073747f0cdac57ed021689ed72eac07383fd518dc4e734e475c024507db66eaf7ea26707070a4489130024b7544d85b35947345c68442320457393786797687149b0eedb4c5c9a437020e1f60ef1972a98a5407394efa1cadc07f104b99273c73b2680a12069571ee929b99c2b9b39424f3b88a7b9da4834857150b4806755689f7ad5a74998d4e0f88bb11c1689061711d63374fb4c87df5dc9f4804417c0e7f326bbfd2e07e484cc946e64ee1fcd5ad353be29de13df029fd85e98138a34928c078f0d752ad7d216b2a325d3053b1b0ca27523d0b0520734efbcafa38473c40cc8727e8a5f12389dfd5778561e4b286a7a22def7591b8ef78c9b1356cca4a630fd9b7af7ae4512d39097fef888c175bb5139aafc5c815e6a058969e273d83373a421565ffb9bfbfa11f8b7fb8f9b207663b34901020d4a14da61973710a860583df64dfb3d5e2dbc0b5b808226cf3a8ecb21ca4b60b92b2137e3566a5553228d2037bb7096b27655e97e8a83cbcb83a7d554af7c7af5378130ab10dbab95f0da7eca981e38b2390d943aba3015841258b54a002df977d96de3a41c84bfb95c18e3c92cd64d357a7e630beaeac26ce5352bdea192aba30bccea973d80192d176f4ede4def09007386327176a7a514d2c93463af8b5930bc056e555293202b78deb566efa4fed64731bca77455f4b04d2610c658b5b4307f2827a278444cd179d35891c2fb9f4aed9eb64b602da9974550f7fbd80bffde7bcf0edfd7759c7d6e2c0efc287ba5ffcae3f8c6da16c7adaf92777bcf04c1df16eb5c86d671562df560523735dc2c5171ce288b8063eb868d36a8f77ed821a020a0fa955afbd9d2ccbacfbd62cbb86255bce0884707374ff9184f2056c26aa97f07af34a519871ac67e49ca2c6880b090669303ab3b757e6dd38ad7467b2c078590db83f495cffc88cd76a4d55666d28e1f3d27b294e8ff5af00f420fa3e4741ac9d4c7672c1823246fa39a2b954aa2d6f636b0a682b6d6b9e2285a9dfdd96e72fd3b9fab161ebff2a5afbf4b6a09d15249cff8717d2868b4a3a84c608b7e0e3a96ae62811469646973ed94ed3bd437e43bb694192bdd9b0006c51984ccbe817014d3c0b82f4bb8ccc993bf92e7d8cf89a879911f15e5964c9d01c0b9312708b88e995409b1a84d3bb991d362ba64f5d7f395285336b3bc60f0e0635c98d22b181786895f311483cd1408545aa8ff39691307401dfb90c31b37647123746d98221f833f6ae9cdea3d55d3bc4e79ff107d3c3e69e24d9b6bc05e143c0967dd81759927254d1ac2ae12e45f4476b45d3ecd7f81a1dcbff1714aaac828b13e2ca3d07a14945096f210e70dd029d24f8363a27d4308879b54113569d328a9c3c53ed10b886dd183dc2578dc36326184364eaa06790ad9886f6842cebbbee8792abfd0dcff3f3b539235057fa8d3aabdead8808a55ffcb75b4b5744a0dc6dfabee284a1d1c65eb2a5f5721c9322e742d60e87fb4d80e11ed6f2eef1c8c8746e23ee06c82d1ee0dad1c507944d11ecaf910a65ddcd86469c70ea265944f812f98f7858a6a9e966fdbbebc8d5f07fa58ba51715c6162c15b0f11ccfba67a126e052e9cb95720f5aaa4c1d5a1f24fbc49f747e7233f8324a89deebe5ad6aae67d91018472bf3da5d749d5a6216195178803187ef3d0a14da9181a19868ab96f07a32755a4276553f60bf24dfd7d4c6ace7bfee37263f482c4348d36cc4e79bac46f8fb10913cb36eb6fa63a9da7a931982d9b03fda31903bde03982251d33f2473ce3403ca8006155d11c8548d281e4d79e3cbe20a84ad298bf945934e323089051c61c6905900a0d71522c262fbb94a5b1e1984d4eda34267df6f429fdbee1fa97599b7468a139da4dcccbe8a341710785db4929b71021b273e659c970cc7a94c1af309a6bd15e8a6a5b2e058c88304e4088e57e41c80d16c084b39ad27681fbf2839a08a6c95f6e860e2b878fe3e084a78e00d9f5d9973d4391f7c6e3c70e79c4dbaa460a93035da7634ccdb07f41016a5b659cba9dbd8116274077267ecfd6f09a542e00f44ab8fa8a6a9eb6b7a4c6e952c401ba91c0ec03852c960f4d1472f04a83ec4c9d8cf9e53926f2777722886c2625bfe1193cfc9731f993a4c4ef494286f0b7f806555838e4b21acd5641228a04b4254e9598c3daab7d64f8eb435b3e8afca7621c36bfc32157ece21e7a356afe51a5197208bf2d211c916777fe2cb2c1898b7f1fdf569448729b4b97333f32c4a190af32158c2933a6f612516322e5d4d684b1cae77a4815c4e4e4109c1a843759fc255191463cd800a587472468a7b266fb9657c219a1ada2cc9d157c05de67b16d6ce5704638bc7ced985eda99cc151e11dfae61b37128a Hey, password is required here.","content":"<div class=\"hbe hbe-container\" id=\"hexo-blog-encrypt\" data-wpm=\"Oh, this is an invalid password. Check and try again, please.\" data-whm=\"OOPS, these decrypted content may changed, but you can still have a look.\">\n  <script id=\"hbeData\" type=\"hbeData\" data-hmacdigest=\"c09bd15619c74ecde3a44bef60abbd6212ea3522140c2afeb4b808ac102209fa\">845bca6bbae78d3763847ae442c60a8a4b5dfc32b7205ed86ef673ba536d8017601892070a3d5c62329871529bfaee745a21374024c9dea2102bc3551b402e959ac7746711d3815998da3bfab07ee9acaeb5c54a74cb3d61062d08a0f10bac8551859c9cd97d197fd9ae4a6dfb7d75427d028fedb0ae010190ca5184bd0e0dd39be1bcb63664e033f129ca6b078cd4b077ed226dea59ed49185485b88b5696a76bc53b4e719b651ed3d3f7aa878506f94ae7a5bfce1cdbb1f47bf024464208dc62e21febd3fac41e6922f20ba82766f7bc42ef9655172a356845b7d43e9853795d139d17abfb9ce1b1ee61ab79feae285ec566af770a18a834479bf5cc06d82d50320535cfef831f1f5b2490dd18e8768839ab95beece5a6d9ea102f8e724f8f2c4401171871f76092b68ce2615f26cb10abe53dcb37222f69077924f6371dbf4191945c4bc9d1d3bded99d022604184d1d880ae032da8c6f694b94caf698b6480e3ea0c717cdeebf408a8b1d7e8a63b598c4ef039cba531933f81346499e57536d21f04c593c8cfc33ef6283a8dd174d23191f2232d44742cf6544633e9970ff095a8d8bc3e2f6ac21c77f91ca9daa8751bf14a8496d9894ddc762eeb0c54b5fb7caee0a4c9faddc39881f8d53b2cbb2b4c828ca768d36adeb7c45b179fe4c33b26a33926027f8ad71c335cb7cf97d988f35d08a1907e9e0a6ed6be862da1043ee13620b9b49980a2eb79f05cd1cff4c98f76a649f4029e1f076deef62b27223efde4a703cdb1a47d510f88b499d22b02223754cc8d1b3a4a9dbf9a687c0e8bc49aba626bcaf050df5beb9dd2643530aba1ed72a9df42d9a5990fe5a7561261d9d8630e992c8f2dfa05e2401e9df5e098c7f05d605d54182edf9dd8105d3e2c778e0dac3424c34394c047f61f22992393d49bcd563f58128bd6c9491d75c204bbc7859f053ecf96d2aa969e2af29aff748abe8eb847ad9240ef9b7d884f73857c4617d87f3bd8f864436d1d770bc08f4c766db43e4f639e902a09d29b60a26caebe7cbeb57aab09031b925544ec41337edb6202d751329342a6057368be8f1c27c1d491a63edd08afca2ccd1933095a587516ead8b7925b0c7ebe52a738c06fa6f28e22eece1c9a1e7b362c19d91cb53ef33989f151abb4b279ded0318e0b30c81f521b8ddc039a3ba8c613faf96ddd2024804925599cc6b7df74c328a18e1615cbb12c5d55d558cde94e60fc91f3ae3ae313c1a272c6ed1582be759a59f8b0438998f91e40ad9371b7e9008c56444582c47350c59faaf2ced4d525e4f33d222dda374483bf66752b0d4eefd8eff35949799bdf249a1d00536a8bf52a89a386bba24a04718cbd070d05791123ed2186161d018b9d0c0e610cd87dc4d707aad0ba09eec5437ef34fe273c26fd616e5e0f9d6d0cb5efc7223a884104f3367bad105eea59549a14708e7d3499b628abf7ddb56b4d8e7d9f02fdfca05f331c9986a9cdbb7c2a6f65ada06b1f6e9360e4fcacf885597d0c278783b020bedad73b3cdb8ced41fcae4262a5857a14ddbd2dde1f24b682c0d046c6a87078f550e65e45f9920283b96b96bb0252b201d4499e77933d65b263fed2eb66d034902ea5b1805d43ef5537f60f8cefd40a00eaa0c6e1b105e11d13d9f87ad7ba23133e5aa935d6c7ee67495884549bb6eca8f9009dc17a31ccb0067bcab453f35ca2ffffe6275e382824429b0d177716853d99c3b578d113b747eb63e936fdc9afaac11b82aa002cbc397bc22ea50fdfb1bc14164594adcb50934c0c1f5d7a13c27d5e6ec9bba3ea122c87871de14804a90cb3e7f3bb1b86427526b226e9084c4cc5de972a21064bb4971ca4a31ac9161ad9c42664823525c00ac8405ffb8bb4e471fc0fa9896971eb1fd12c9ab2067c921701e02412b1a7654205303998f888d75196b4774392697c155644f923466d47e0f614487032a5813dc71ccb1f8ffde63ea74c0e8fd284663f53750e5d25e35c3f889943276de7b6725fb8e34e1e4c3996f1e9817f2348325d602261d8f35c5e098fb32c0c9175025a357f04bd0212f3d0b5bd31c132a4755d3ae5b1e0096c3e114ac997b83e3e97e2e58cdc0fa8091aa9e45c4df7e9d91a6b36c428ca7b189263a302ad46148443325bfacd2fd3828365503d969a1c30f4e7356112ade201a590a47d3ec651f8429f369485fcfc535c044100b164ddacae62c350d7d9f421d18e0919cab1d879d7bb1136842284d6953f754d9c2885f355ce2a8069a96607fabac52321267d0d080aac38fa795b14a126028fc248ef3f05d2f380ca71f8f7e7c71d9f47abac76ad84fe2639f01395ea44bd95e843e05285d5e00b8429c2c8218ca316828bad98f9920cf8795fcf76b6c2a3c600738a728c0e59b120895a3371e3c2bf3157c1551c18e08d4c0cb0756f4ac2ca70dfab33adcb242d02ef0ec5022a84e56fd85e57a973d888cc2578ebc4112d138d1cacb70d9730cf37fe048c98b439dc66db0c7ee8725f2c7c5a9defe106d1940f942f70085eb225304c2610b46ba118933bc8d349a6840d4366f34d5dfa0f2014c1ee21009e3e0301374671436991d03fe33d8d5b52b2b3e65c260f5d921c1d36aa7ae9512eed1f59166d9b7427f53c64d76399c19070fdd49cf523ec5ee522d474105458ce31798edb1b8a0a87ab75bd1ebf0a0e42a7fb6fc78ccb6cd6cb48fc712dc0073747f0cdac57ed021689ed72eac07383fd518dc4e734e475c024507db66eaf7ea26707070a4489130024b7544d85b35947345c68442320457393786797687149b0eedb4c5c9a437020e1f60ef1972a98a5407394efa1cadc07f104b99273c73b2680a12069571ee929b99c2b9b39424f3b88a7b9da4834857150b4806755689f7ad5a74998d4e0f88bb11c1689061711d63374fb4c87df5dc9f4804417c0e7f326bbfd2e07e484cc946e64ee1fcd5ad353be29de13df029fd85e98138a34928c078f0d752ad7d216b2a325d3053b1b0ca27523d0b0520734efbcafa38473c40cc8727e8a5f12389dfd5778561e4b286a7a22def7591b8ef78c9b1356cca4a630fd9b7af7ae4512d39097fef888c175bb5139aafc5c815e6a058969e273d83373a421565ffb9bfbfa11f8b7fb8f9b207663b34901020d4a14da61973710a860583df64dfb3d5e2dbc0b5b808226cf3a8ecb21ca4b60b92b2137e3566a5553228d2037bb7096b27655e97e8a83cbcb83a7d554af7c7af5378130ab10dbab95f0da7eca981e38b2390d943aba3015841258b54a002df977d96de3a41c84bfb95c18e3c92cd64d357a7e630beaeac26ce5352bdea192aba30bccea973d80192d176f4ede4def09007386327176a7a514d2c93463af8b5930bc056e555293202b78deb566efa4fed64731bca77455f4b04d2610c658b5b4307f2827a278444cd179d35891c2fb9f4aed9eb64b602da9974550f7fbd80bffde7bcf0edfd7759c7d6e2c0efc287ba5ffcae3f8c6da16c7adaf92777bcf04c1df16eb5c86d671562df560523735dc2c5171ce288b8063eb868d36a8f77ed821a020a0fa955afbd9d2ccbacfbd62cbb86255bce0884707374ff9184f2056c26aa97f07af34a519871ac67e49ca2c6880b090669303ab3b757e6dd38ad7467b2c078590db83f495cffc88cd76a4d55666d28e1f3d27b294e8ff5af00f420fa3e4741ac9d4c7672c1823246fa39a2b954aa2d6f636b0a682b6d6b9e2285a9dfdd96e72fd3b9fab161ebff2a5afbf4b6a09d15249cff8717d2868b4a3a84c608b7e0e3a96ae62811469646973ed94ed3bd437e43bb694192bdd9b0006c51984ccbe817014d3c0b82f4bb8ccc993bf92e7d8cf89a879911f15e5964c9d01c0b9312708b88e995409b1a84d3bb991d362ba64f5d7f395285336b3bc60f0e0635c98d22b181786895f311483cd1408545aa8ff39691307401dfb90c31b37647123746d98221f833f6ae9cdea3d55d3bc4e79ff107d3c3e69e24d9b6bc05e143c0967dd81759927254d1ac2ae12e45f4476b45d3ecd7f81a1dcbff1714aaac828b13e2ca3d07a14945096f210e70dd029d24f8363a27d4308879b54113569d328a9c3c53ed10b886dd183dc2578dc36326184364eaa06790ad9886f6842cebbbee8792abfd0dcff3f3b539235057fa8d3aabdead8808a55ffcb75b4b5744a0dc6dfabee284a1d1c65eb2a5f5721c9322e742d60e87fb4d80e11ed6f2eef1c8c8746e23ee06c82d1ee0dad1c507944d11ecaf910a65ddcd86469c70ea265944f812f98f7858a6a9e966fdbbebc8d5f07fa58ba51715c6162c15b0f11ccfba67a126e052e9cb95720f5aaa4c1d5a1f24fbc49f747e7233f8324a89deebe5ad6aae67d91018472bf3da5d749d5a6216195178803187ef3d0a14da9181a19868ab96f07a32755a4276553f60bf24dfd7d4c6ace7bfee37263f482c4348d36cc4e79bac46f8fb10913cb36eb6fa63a9da7a931982d9b03fda31903bde03982251d33f2473ce3403ca8006155d11c8548d281e4d79e3cbe20a84ad298bf945934e323089051c61c6905900a0d71522c262fbb94a5b1e1984d4eda34267df6f429fdbee1fa97599b7468a139da4dcccbe8a341710785db4929b71021b273e659c970cc7a94c1af309a6bd15e8a6a5b2e058c88304e4088e57e41c80d16c084b39ad27681fbf2839a08a6c95f6e860e2b878fe3e084a78e00d9f5d9973d4391f7c6e3c70e79c4dbaa460a93035da7634ccdb07f41016a5b659cba9dbd8116274077267ecfd6f09a542e00f44ab8fa8a6a9eb6b7a4c6e952c401ba91c0ec03852c960f4d1472f04a83ec4c9d8cf9e53926f2777722886c2625bfe1193cfc9731f993a4c4ef494286f0b7f806555838e4b21acd5641228a04b4254e9598c3daab7d64f8eb435b3e8afca7621c36bfc32157ece21e7a356afe51a5197208bf2d211c916777fe2cb2c1898b7f1fdf569448729b4b97333f32c4a190af32158c2933a6f612516322e5d4d684b1cae77a4815c4e4e4109c1a843759fc255191463cd800a587472468a7b266fb9657c219a1ada2cc9d157c05de67b16d6ce5704638bc7ced985eda99cc151e11dfae61b37128a</script>\n  <div class=\"hbe hbe-content\">\n    <div class=\"hbe hbe-input hbe-input-default\">\n      <input class=\"hbe hbe-input-field hbe-input-field-default\" type=\"password\" id=\"hbePass\">\n      <label class=\"hbe hbe-input-label hbe-input-label-default\" for=\"hbePass\">\n        <span class=\"hbe hbe-input-label-content hbe-input-label-content-default\">Hey, password is required here.</span>\n      </label>\n    </div>\n  </div>\n</div>\n<script data-pjax src=\"/lib/hbe.js\"></script><link href=\"/css/hbe.style.css\" rel=\"stylesheet\" type=\"text/css\">","tags":[{"name":"记录","slug":"记录","permalink":"https://jonathan1214.github.io/tags/记录/"}]},{"title":"一些自言自语","date":"2021-07-22T05:54:55.000Z","path":"2021/07/whisper-to-myself/","text":"845bca6bbae78d3763847ae442c60a8afb1eb7136d251ee1fddabb37e481a2e778fb634938e0f92ee54dffa0c49d4f288212a4318b1994bcfe1dbea4f06971398db3d61a6cbb410ab5a69ebe3939b331f4becd612b6d55d660bd94d0671fe9bbe27cd7787c5f986bbc58c6d158dabe1bdf46f2766c6de8b0a6316ba4aac92c422e6ea7e1209eba35461e13a3364077c2dd28421bcf774237bfd81c5e37b0ec7d61b028e4feed6402720d1bb6898c039888166a8052359e50e6414690af43ffd4348f93c63c06896e95d316663c2a819425ca35325d9136fe518e896d952efe533a511f821b5dc2029806d3c39f760914032b195311c7c5f1fc3b5cd539e0f459dc61e93f2fda325900f14e2b4428a69942032b00d8e8467b121a8718865a6d59089c1e75b2b139c7fc0adafdb63538c3a4543b434150df58e4c99684103d10ddd4bde2c9d6d71fe01f37b8573d909aa9a5463f9f507f4a34c95ae6869b0c198d143487aaa757bacec4b855879e03f706c8f84284c0f912ef0396f874b6394bde714c67c4257eff60304830182968cecd4a3be63811bbe944175a34d87dca02b9b0e4ed4f5769333880fbf1e26afdce972df8038400c3e88b472f7abb0d4ef46b5f415b62d790119759551cd528cd345e2a79c479fc914ee1e44a1e9aba123de86279fd47a0d9fa496d21f355f5d1dc4d476cbabeb64481e3bede8160cc23baf9b8cb3c80fd0849717e5be6163b67475c18fb9809bb1b73ccae6ab7590013b85607b29822a19203fd38ab86c8f0f131fa1bd3d3e8cd9b4bae4aba75a166f0c904585db8875918db4ccf1a4f56db91bf008d9eea59095762c780ca31c2f17a2bd0cbd57da3a66b2ec6d32e10aa3824e021cfbed5b7ea90a7695a9d9e05381cc28771ed05d1ac9abb02ca24f8af0933323d878309f94d4b13f4dd4fc15a84ed81db84c1d1fa5efd48407f6d9b88560053c9173a2b35b8b01195eda8d62d39f187b3bf2281bf4adce6cdcb7cccf7c14336b9b861b6abc8016f6d06068b3b54395b5120ec85f09e2e20e6016519c9c67712f9cf4bc34ef946e7d12fcdf6b18212fb03c6f49d3bfa05475d04228da30061ff0b07d462aafa55c61eb175f6362392f63e9251191edfeccf1672463e3c0eec8d8bab91a1f452ac9fb837f3e0d3012f2725c868c9fc2d245a98d7644d1d761e9239c26f338282b36a99e0cec91ee5dfd2a042204c17dd98597ab3033ade9ed64b4ed178ea3d9b3ea615a947ddc0cc519d76edfe4a590560457028ad6ff27ae6b54b35e585b3fc92d6e61d94488bf38c4b46fa9e7ef55880f0c8bd4be9780284c4f627fae770315f28857a5af0efe4ff125486586f2d88cca933d0691a24879c81c5b6bdf084f5b0bd51d4ba6907c38d79e73934934a7625a0ef76e59675b7b30ab41d5e7140937be3a9b5139cd34d04ab53cf5c4c16995ca7f1755d3c27907bbc8acb60e3db9144042f84ff9fa0ea344ff593d9dd9a556fe17186e422fc55ab4a479ae33fdf93702e81eb1a2a377040e5b3c2163472f5bfb0340bb3e941968a1e9c2f8ab1dee9154eeb2dc2a47119978c18abe27728b0d74e112a13871cc6f41e37fc55807e26730ef16699f589788adc5d2b770143ef0f8e83ca2a95d2bb89412aa4b0e3f483c881c9fb1b846f533385ded477f93192f6003825b016bfc8f6e351478fa9031e1a60a20a77694da8ec6adeeda387d186f7f56ee36b5974e1610dbecf02a7434567aeb6b3ec2520311ddc68785d39cbc25ea155f9514984f055355cdc315254837824837fe6f0497d87ef02602241a14e7a5146b3df99f974f621d8d82c52598b7fd4ba43302f0a95b9f6a5194217f287eb6dd1b1130110a4ecbf0bc2a02e45e2f55ede824765a44d04f94df056b3688a84b19e183b8cfe1fabd38017cbb36f120fb9acb091e6c7da32f46b57be27a995359e286d5f0b13d9c2ef8f7861e0a17f095327d98e807f40ab9c6e92f75fe41537d2d686f7a308da8244e7be15f38050f3a94bb1c1880e8c975efe3c2ac54f40cb222a63c323779c057165a1634ffcc6a19e8144066cfec2dde08686616fe51bbc34520c7a79655b3706dffec46f6f0bff31088841ede092a3a768dac56eadeabfaaab5375f1a58571216d0da56e166200aff02d863834978e8a164cb1c38886cefe165cde9da7afe2cb556fa753f339e4ab1ef3050c86fbe7236e8f587b40962ff8a8d39a5c3312978b502cc8c586de579d2146eeb10e9feac763692fa3a42ad0363862d242cfbe7b5178e02a78868c13a9af5972358d20a48a9eaea6b2874e5fcfdbd4fb309c4b2cf84347d1771100c47c4a93a903474f98aef5e5a1a7d14dff8f088c35344356c380e4d0e6a89c086a78249780ad46bba8b4833782710a6ed16bab642ba82ea55cdb845b02dca925f0c82027b61c8374f7d09b4c4e43417dbd38dcab87f2682b146f6e118a29fea50a2a4a22c249c2f8138f44fd640a8a42bd83d092b7fdd3e257c9dcb0c974f05d001c6ff911630e90b6c2e9 Hey, password is required here.","content":"<div class=\"hbe hbe-container\" id=\"hexo-blog-encrypt\" data-wpm=\"Oh, this is an invalid password. Check and try again, please.\" data-whm=\"OOPS, these decrypted content may changed, but you can still have a look.\">\n  <script id=\"hbeData\" type=\"hbeData\" data-hmacdigest=\"e6b0acbe57be7824ef586c0f938115c59368d516b1988fd703ca9704f5ccf3f1\">845bca6bbae78d3763847ae442c60a8afb1eb7136d251ee1fddabb37e481a2e778fb634938e0f92ee54dffa0c49d4f288212a4318b1994bcfe1dbea4f06971398db3d61a6cbb410ab5a69ebe3939b331f4becd612b6d55d660bd94d0671fe9bbe27cd7787c5f986bbc58c6d158dabe1bdf46f2766c6de8b0a6316ba4aac92c422e6ea7e1209eba35461e13a3364077c2dd28421bcf774237bfd81c5e37b0ec7d61b028e4feed6402720d1bb6898c039888166a8052359e50e6414690af43ffd4348f93c63c06896e95d316663c2a819425ca35325d9136fe518e896d952efe533a511f821b5dc2029806d3c39f760914032b195311c7c5f1fc3b5cd539e0f459dc61e93f2fda325900f14e2b4428a69942032b00d8e8467b121a8718865a6d59089c1e75b2b139c7fc0adafdb63538c3a4543b434150df58e4c99684103d10ddd4bde2c9d6d71fe01f37b8573d909aa9a5463f9f507f4a34c95ae6869b0c198d143487aaa757bacec4b855879e03f706c8f84284c0f912ef0396f874b6394bde714c67c4257eff60304830182968cecd4a3be63811bbe944175a34d87dca02b9b0e4ed4f5769333880fbf1e26afdce972df8038400c3e88b472f7abb0d4ef46b5f415b62d790119759551cd528cd345e2a79c479fc914ee1e44a1e9aba123de86279fd47a0d9fa496d21f355f5d1dc4d476cbabeb64481e3bede8160cc23baf9b8cb3c80fd0849717e5be6163b67475c18fb9809bb1b73ccae6ab7590013b85607b29822a19203fd38ab86c8f0f131fa1bd3d3e8cd9b4bae4aba75a166f0c904585db8875918db4ccf1a4f56db91bf008d9eea59095762c780ca31c2f17a2bd0cbd57da3a66b2ec6d32e10aa3824e021cfbed5b7ea90a7695a9d9e05381cc28771ed05d1ac9abb02ca24f8af0933323d878309f94d4b13f4dd4fc15a84ed81db84c1d1fa5efd48407f6d9b88560053c9173a2b35b8b01195eda8d62d39f187b3bf2281bf4adce6cdcb7cccf7c14336b9b861b6abc8016f6d06068b3b54395b5120ec85f09e2e20e6016519c9c67712f9cf4bc34ef946e7d12fcdf6b18212fb03c6f49d3bfa05475d04228da30061ff0b07d462aafa55c61eb175f6362392f63e9251191edfeccf1672463e3c0eec8d8bab91a1f452ac9fb837f3e0d3012f2725c868c9fc2d245a98d7644d1d761e9239c26f338282b36a99e0cec91ee5dfd2a042204c17dd98597ab3033ade9ed64b4ed178ea3d9b3ea615a947ddc0cc519d76edfe4a590560457028ad6ff27ae6b54b35e585b3fc92d6e61d94488bf38c4b46fa9e7ef55880f0c8bd4be9780284c4f627fae770315f28857a5af0efe4ff125486586f2d88cca933d0691a24879c81c5b6bdf084f5b0bd51d4ba6907c38d79e73934934a7625a0ef76e59675b7b30ab41d5e7140937be3a9b5139cd34d04ab53cf5c4c16995ca7f1755d3c27907bbc8acb60e3db9144042f84ff9fa0ea344ff593d9dd9a556fe17186e422fc55ab4a479ae33fdf93702e81eb1a2a377040e5b3c2163472f5bfb0340bb3e941968a1e9c2f8ab1dee9154eeb2dc2a47119978c18abe27728b0d74e112a13871cc6f41e37fc55807e26730ef16699f589788adc5d2b770143ef0f8e83ca2a95d2bb89412aa4b0e3f483c881c9fb1b846f533385ded477f93192f6003825b016bfc8f6e351478fa9031e1a60a20a77694da8ec6adeeda387d186f7f56ee36b5974e1610dbecf02a7434567aeb6b3ec2520311ddc68785d39cbc25ea155f9514984f055355cdc315254837824837fe6f0497d87ef02602241a14e7a5146b3df99f974f621d8d82c52598b7fd4ba43302f0a95b9f6a5194217f287eb6dd1b1130110a4ecbf0bc2a02e45e2f55ede824765a44d04f94df056b3688a84b19e183b8cfe1fabd38017cbb36f120fb9acb091e6c7da32f46b57be27a995359e286d5f0b13d9c2ef8f7861e0a17f095327d98e807f40ab9c6e92f75fe41537d2d686f7a308da8244e7be15f38050f3a94bb1c1880e8c975efe3c2ac54f40cb222a63c323779c057165a1634ffcc6a19e8144066cfec2dde08686616fe51bbc34520c7a79655b3706dffec46f6f0bff31088841ede092a3a768dac56eadeabfaaab5375f1a58571216d0da56e166200aff02d863834978e8a164cb1c38886cefe165cde9da7afe2cb556fa753f339e4ab1ef3050c86fbe7236e8f587b40962ff8a8d39a5c3312978b502cc8c586de579d2146eeb10e9feac763692fa3a42ad0363862d242cfbe7b5178e02a78868c13a9af5972358d20a48a9eaea6b2874e5fcfdbd4fb309c4b2cf84347d1771100c47c4a93a903474f98aef5e5a1a7d14dff8f088c35344356c380e4d0e6a89c086a78249780ad46bba8b4833782710a6ed16bab642ba82ea55cdb845b02dca925f0c82027b61c8374f7d09b4c4e43417dbd38dcab87f2682b146f6e118a29fea50a2a4a22c249c2f8138f44fd640a8a42bd83d092b7fdd3e257c9dcb0c974f05d001c6ff911630e90b6c2e9</script>\n  <div class=\"hbe hbe-content\">\n    <div class=\"hbe hbe-input hbe-input-default\">\n      <input class=\"hbe hbe-input-field hbe-input-field-default\" type=\"password\" id=\"hbePass\">\n      <label class=\"hbe hbe-input-label hbe-input-label-default\" for=\"hbePass\">\n        <span class=\"hbe hbe-input-label-content hbe-input-label-content-default\">Hey, password is required here.</span>\n      </label>\n    </div>\n  </div>\n</div>\n<script data-pjax src=\"/lib/hbe.js\"></script><link href=\"/css/hbe.style.css\" rel=\"stylesheet\" type=\"text/css\">","tags":[{"name":"记录","slug":"记录","permalink":"https://jonathan1214.github.io/tags/记录/"},{"name":"无题","slug":"无题","permalink":"https://jonathan1214.github.io/tags/无题/"}]},{"title":"迭代器（iterators）与 traits 编程技巧","date":"2021-07-13T14:22:04.000Z","path":"2021/07/iterator-and-traits-programming/","text":"本篇是阅读《STL源码剖析》第3章后作的笔记，本不想写的，嫌太麻烦，思来想去，为了提高学习的效果，也是为了给自己找点事做，还是认真写完这篇笔记。 阅读时随手截图以及一些理解放在notion中了，链接在此iterator笔记，其实里面不过是几张截图，没写多少文字，又多了一篇水的笔记。 《Design Pattern》中提到的Iterator模式定义如下： 提供一种方法，使之能够依序访问某个聚合物（容器）所含的各个元素，而又无需暴露该聚合物的内部表述方式。 这个定义需要关注的有两个：依序访问以及不暴露内部表述方式。这两个要求对迭代器的设计有很大的影响。 第 1 节强调了迭代器是STL的关键所在。因为有了迭代器，STL能够将数据容器（containers）和算法（algorithms）分开，彼此独立设计，而迭代器扮演了两者的胶合剂。对于容器和算法的泛化，class templates 和 function templates 可分别完成目标，但是两者胶合剂——迭代器的设计却需要花一番心思。 第 2 节开始引入迭代器。从 smart pointer 的角度理解迭代器，实际上在使用迭代器时，把它当作 pointer 就好。因此，迭代器最重要的工作就是像指针一样工作，因此需要完成 operator* 和 operator-&gt; 的重载，以通过迭代器完成dereference和member access 的工作。 接着举了一个设计 list 迭代器的例子，包括三个模板类：List，ListItem 和 ListIter。这样一来，迭代器确实可以设计起来，而且声明一个迭代器可以如下方式：ListIter&lt;ListItem&lt;int&gt;&gt; begin()。这个时候问题出现了，如果在一个算法中，需要用到 *iter != value 类似的操作，那么就要为 ListItem 定义全局的 operator!= 函数了，这暴露了类的具体实现。 最终的结论是，这种暴露无法避免，因此 List 的设计者也需要完成迭代器的开发工作，因此，每一种 STL 容器都提供有专属迭代器的。 第3节介绍了迭代器的相应型别（associated types）。我不太认可这里的中文翻译，当然 jjhou 可能也是如此，因此加上来英文原名——associated types。迭代器的 associate type 可以理解成迭代器所指之物的类型。考虑这个问题是有实际意义的，如果算法中必须声明一个变量，且变量类型是迭代器所指向对象的型别，解决办法是：利用 function template 的参数推导（argument deducation）机制。 这里还需要说明的时，迭代器相应型别（associated types）不只是『迭代器所指对象的型别』而已，实际上有 5 种，后面会详细提到。 第 4 节介绍了 Traits 编程技巧。终于到了正题 了，jjhou 把 Traits 称作 STL 源代码门匙，其对于 STL 的重要性不言而喻。 上述的参数推导虽好，但是如果需要进行返回值的推导，我们就需要新的方法了。声明内嵌型别（nested type）似乎是个好主意。像下面这样： 看起来不错，但是有一个陷阱：并不是所有的迭代器都是 class type。比如原生指针，无法为它定义内嵌型别。为了处理这个问题，我们需要模板偏特化（template partial specialization）： 如果 class template 拥有一个以上的 template 参数，我们可以针对其中某些 template 参数进行特化工作，即在泛化设计中提供一个特化版本。 现在，我们可以解决原生指针带来的问题了，为迭代器的template参数为指针的情况，设计特化版的迭代器。 如下就是整个设计的关键，traits，专门用来萃取迭代器的特性。 1234template &lt;class T&gt;struct iterator_traits &#123; typedef typename I::value_type value_type;&#125; 而对于迭代器是原生指针的情况，可以设计偏特化版本： 1234template &lt;class T&gt;struct iterator_traits&lt;T*&gt; &#123; typedef T value_type;&#125; 那么在设计函数时可以这样写： 123template &lt;class I&gt;typename iterator_traits&lt;I&gt;::value_typefunc(I ite) &#123; return *ite; &#125; 对于原生指针的 I 可以调用偏特化的版本，这正是我们想要的，实在是太酷了！ 为了应对 const 指针，还需要另外一个偏特化版本： 1234template &lt;class T&gt;struct iterator_traits&lt;const T*&gt; &#123; typedef T value_type;&#125; 这样对迭代器相应型别中的推导就完成了，实际上 STL 也是如此设计的，iterator_traits 包括两个偏特化版本。 接着依次介绍了 value_type，difference_type，reference_type，pointer_type 和 iterator_category。 最复杂的是最后一个 iterator_category 的设计，也许要明天再写了。 迭代器的分类如下： 当然，其实我们不用过多关注category，只要明白设计这么多种类是贴合实际的，是为了提高某些代码运行时的效率，但是这样一来就需要对不同类型的迭代器分别设计函数，这显然不够泛化，因此进行了一系列的设计，以期望对函数进行重载。这又用到 traits，我们期望 traits 能够萃取出迭代器的种类！这个类别必须是class type，因为编译器需要依赖它进行重载决议（overloaded resolution）。 大概重要的内容就是这些，关键是 traits 的想法，实在是巧妙，但其实也是没有办法的事情，因为 C++ 没有类型推导如 typeof 这样的函数，只能通过这种方法来完成了。","content":"<p>本篇是阅读《STL源码剖析》第3章后作的笔记，本不想写的，嫌太麻烦，思来想去，为了提高学习的效果，也是为了给自己找点事做，还是认真写完这篇笔记。</p>\n<p>阅读时随手截图以及一些理解放在notion中了，链接在此<a href=\"https://www.notion.so/lijiangxuan/3-traits-aeaa810b59c74001800a098508f00dec\" target=\"_blank\" rel=\"noopener\">iterator笔记</a>，其实里面不过是几张截图，没写多少文字，又多了一篇水的笔记。</p>\n<hr>\n<a id=\"more\"></a>\n<p>《Design Pattern》中提到的Iterator模式定义如下：</p>\n<blockquote>\n<p>提供一种方法，使之能够依序访问某个聚合物（容器）所含的各个元素，而又无需暴露该聚合物的内部表述方式。</p>\n</blockquote>\n<p>这个定义需要关注的有两个：依序访问以及不暴露内部表述方式。这两个要求对迭代器的设计有很大的影响。</p>\n<p>第 1 节强调了迭代器是STL的关键所在。因为有了迭代器，<strong>STL能够将数据容器（containers）和算法（algorithms）分开，彼此独立设计，而迭代器扮演了两者的胶合剂。</strong>对于容器和算法的泛化，class templates 和 function templates 可分别完成目标，但是两者胶合剂——迭代器的设计却需要花一番心思。</p>\n<p>第 2 节开始引入迭代器。从 smart pointer 的角度理解迭代器，实际上在使用迭代器时，把它当作 pointer 就好。因此，迭代器最重要的工作就是像指针一样工作，因此需要完成 <code>operator*</code> 和 <code>operator-&gt;</code> 的重载，以通过迭代器完成dereference和member access 的工作。</p>\n<p>接着举了一个设计 <code>list</code> 迭代器的例子，包括三个模板类：List，ListItem 和 ListIter。这样一来，迭代器确实可以设计起来，而且声明一个迭代器可以如下方式：<code>ListIter&lt;ListItem&lt;int&gt;&gt; begin()</code>。这个时候问题出现了，如果在一个算法中，需要用到 <code>*iter != value</code> 类似的操作，那么就要为 <code>ListItem</code> 定义全局的 <code>operator!=</code> 函数了，这暴露了类的具体实现。</p>\n<p>最终的结论是，这种暴露无法避免，因此 List 的设计者也需要完成迭代器的开发工作，因此，<strong>每一种 STL 容器都提供有专属迭代器的</strong>。</p>\n<p>第3节介绍了迭代器的相应型别（associated types）。我不太认可这里的中文翻译，当然 jjhou 可能也是如此，因此加上来英文原名——associated types。迭代器的 associate type 可以理解成迭代器所指之物的类型。考虑这个问题是有实际意义的，如果算法中必须声明一个变量，且变量类型是<strong>迭代器所指向对象的型别</strong>，解决办法是：利用 function template 的参数推导（argument deducation）机制。</p>\n<img src=\"/2021/07/iterator-and-traits-programming/image-20210713230331626.png\" title=\"参数推导\">\n<p>这里还需要说明的时，迭代器相应型别（associated types）不只是『迭代器所指对象的型别』而已，实际上有 5 种，后面会详细提到。</p>\n<p>第 4 节介绍了 Traits 编程技巧。终于到了正题 了，jjhou 把 Traits 称作 STL 源代码门匙，其对于 STL 的重要性不言而喻。</p>\n<p>上述的参数推导虽好，但是如果需要进行返回值的推导，我们就需要新的方法了。声明<strong>内嵌型别</strong>（nested type）似乎是个好主意。像下面这样：</p>\n<img src=\"/2021/07/iterator-and-traits-programming/image-20210713231308026.png\">\n<p>看起来不错，但是有一个陷阱：<strong>并不是所有的迭代器都是 class type</strong>。比如原生指针，无法为它定义内嵌型别。为了处理这个问题，我们需要模板偏特化（template partial specialization）：</p>\n<blockquote>\n<p> 如果 class template 拥有一个以上的 template 参数，我们可以针对其中某些 template 参数进行特化工作，即在泛化设计中提供一个特化版本。</p>\n</blockquote>\n<img src=\"/2021/07/iterator-and-traits-programming/image-20210713232048166.png\">\n<p>现在，我们可以解决原生指针带来的问题了，为迭代器的template参数为指针的情况，设计特化版的迭代器。</p>\n<p>如下就是整个设计的关键，traits，专门<strong>用来萃取迭代器的特性</strong>。</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">template</span> &lt;<span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">T</span>&gt;</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"title\">struct</span> <span class=\"title\">iterator_traits</span> &#123;</span></span><br><span class=\"line\">    <span class=\"keyword\">typedef</span> <span class=\"keyword\">typename</span> I::value_type value_type;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>而对于迭代器是原生指针的情况，可以设计偏特化版本：</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">template</span> &lt;<span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">T</span>&gt;</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"title\">struct</span> <span class=\"title\">iterator_traits</span>&lt;T*&gt; &#123;</span></span><br><span class=\"line\">    <span class=\"keyword\">typedef</span> T value_type;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>那么在设计函数时可以这样写：</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">template</span> &lt;<span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">I</span>&gt;</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"title\">typename</span> <span class=\"title\">iterator_traits</span>&lt;I&gt;:</span>:value_type</span><br><span class=\"line\">func(I ite) &#123; <span class=\"keyword\">return</span> *ite; &#125;</span><br></pre></td></tr></table></figure>\n<p>对于原生指针的 I 可以调用偏特化的版本，这正是我们想要的，实在是太酷了！</p>\n<p>为了应对 const 指针，还需要另外一个偏特化版本：</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">template</span> &lt;<span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">T</span>&gt;</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"title\">struct</span> <span class=\"title\">iterator_traits</span>&lt;const T*&gt; &#123;</span></span><br><span class=\"line\">    <span class=\"keyword\">typedef</span> T value_type;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这样对迭代器相应型别中的推导就完成了，实际上 STL 也是如此设计的，iterator_traits 包括两个偏特化版本。</p>\n<img src=\"/2021/07/iterator-and-traits-programming/image-20210713233540292.png\">\n<p>接着依次介绍了 value_type，difference_type，reference_type，pointer_type 和 iterator_category。</p>\n<p>最复杂的是最后一个 iterator_category 的设计，也许要明天再写了。</p>\n<p>迭代器的分类如下：</p>\n<img src=\"/2021/07/iterator-and-traits-programming/image-20210713234006100.png\">\n<p>当然，其实我们不用过多关注category，只要明白设计这么多种类是贴合实际的，是为了提高某些代码运行时的效率，但是这样一来就需要对不同类型的迭代器分别设计函数，这显然不够泛化，因此进行了一系列的设计，以期望对函数进行重载。这又用到 traits，我们期望 traits 能够萃取出迭代器的种类！这个类别必须是class type，因为编译器需要依赖它进行重载决议（overloaded resolution）。</p>\n<img src=\"/2021/07/iterator-and-traits-programming/image-20210713234514174.png\">\n<p>大概重要的内容就是这些，关键是 traits 的想法，实在是巧妙，但其实也是没有办法的事情，因为 C++ 没有类型推导如 typeof 这样的函数，只能通过这种方法来完成了。</p>\n","tags":[{"name":"C/C++","slug":"C-C","permalink":"https://jonathan1214.github.io/tags/C-C/"},{"name":"STL","slug":"STL","permalink":"https://jonathan1214.github.io/tags/STL/"}]},{"title":"这不是世界末日","date":"2021-07-12T23:54:08.000Z","path":"2021/07/it-s-not-the-end-of-the-world/","text":"还是没有缓过来，我还需要一点点时间，今天就是最后的日子，从今天开始重新站起来。这不是世界末日，一切都好，都可以继续下去，没必要这么早就否定自己，这些事情不过只是人生中的小风浪，当一切尘埃落定，我们一定会发现这一切不过如此，不要到时候再后悔自己现在没有早点爬起来。人生不止于此，我们还有更加重要的事情要去做。","content":"<p>还是没有缓过来，我还需要一点点时间，今天就是最后的日子，从今天开始重新站起来。这不是世界末日，一切都好，都可以继续下去，没必要这么早就否定自己，这些事情不过只是人生中的小风浪，当一切尘埃落定，我们一定会发现这一切不过如此，不要到时候再后悔自己现在没有早点爬起来。人生不止于此，我们还有更加重要的事情要去做。</p>\n","tags":[{"name":"记录","slug":"记录","permalink":"https://jonathan1214.github.io/tags/记录/"}]},{"title":"迟到的周年纪念","date":"2021-07-11T13:59:31.000Z","path":"2021/07/late-anniversary/","text":"845bca6bbae78d3763847ae442c60a8aae65871bad17929fd15df8197313ac86d506e05e33d0d667b744e6b2b7d0eefdfb0eac8c7baa7fcfac4cfea8467665841e8703ddb1586b123a92678c4aa1b38b9352355c88df162c3ba648d44351561c87e64872c467c9f5713f39e408bfd0e832c1a2343c212d8cbc219104c3d28be3d026ad3739521920bd54e256026db58da3472cf40b9b70e509517646931b9a3efbbdc258a2387de7972e4e3db83da8b33fee0d0b1536929611c23417a52a8ae8404cdbace80d88bf3aafe90b473397653bfc998a65f15ce2789580e7172395c0344b522cf8a17a4f093ec0e0baf2d017057de65d340ef1611c26b0c48165529672939cdd1d01d95bf7c12fb05aff265a1e576237d49c42c36bb37f7cf1538291452e8beff5664cd996817af84f866d1fa714662ecde4ffcd979a3939b07e78bf0596792e1aab89456fabe09be74ddbeb3049126498c1ab8a7fb98192cf0a20c10d45b0a654469dd80737b536e739b0df5ba94744923ef19cec303c8f828faf8bd3742167fb558973e7bda1601105c35ce476cce11c8f332d32f0d5e6e91d90f05376241d4ec3e96d0633cd9f7348ee9f735151cf09569d6b66fad903ed2ff3f6ca0dd87b8a63293683c19a1919e7f76ad8a5fb84214dcb7b223abe1d74d4926dcf3971bb68efaf08b3f04dfa46cdf81e14bf70a0ba0b3aa91d570f9902402fd22a54f31557e26121b6278fc0219984c806db1bdec76aaf17fbc7e3eae2799c49daf7d0e5be48eec2b964ee0ba0d3ce886a529e273c4d0da83e299f5c4ed0c14507ed19e2511754baede2afbdb1685936d1c0149a76eb980414bc5c92b33e9913c73ad390d59833c1b5b013530d792fe149df8fac2ba8e9650b37015c557122faeefc7aa73e7a2a5c468f4757deac648aeff2704f3fe6f7044cf8ce1f1a1b03d04df9e62f3af1481c1e495f562c6bd47bdc428ed18fffcf2cc9046e0fdffe8868ece6d9e2a7ba9c328dc108b7069208639029d83ac38da2291b3aba96b20eac2c02b4d26f989d4b6beff72fd0b4fe12c5c734e707fdd31c1fd8fc3db350f1c43d0b07609cb5d68cefa56fd51efa5124fae44526f4f23d9d37e424a32c200a23e2a9460d3e1d9a9b0c67f5c52490322e28759179d3a082f0241a01586fbbe633df76877a841848cd74e442c3d4cc28b21ddd9a4c523a75b002920ee5001a10eb62462b89bda5ad699e1009d9c955ca7167832f4a6fd2dba5a66e93e9ac626e638bd79a9d3869894208ef5cd9a0cb4a1c5b57968071214dbf9d7fa458f0b5594bb8fc79c924adad99b572a0de68c9bef642cbf4648e2e5c9651dd65ed1c140bd5b2621672a9ffcc406283c4d65b0622a4b24cb98a21c2156866ddaf83803163aaebb746c715b74d71a03fc380591c29ecd5526130d97a63a854af2ce0813c00912e9767fa451a1caef89b9d5037b0e175a3417061a9669fe0198e9e3f7b14fcb828e4d0a1a1fb99648d96560a2e524964ae1d7e18044037d0505908be0e0e1348fba7734c6b1bd77c06034a3438ee6787d14d618b7fa08ac6b68dd21198f006190389a338385e2b5d3ebb3a34067302bba516089914a7da0c8c244557cb327e90db9b09a3f61380ee8b52172c567cddc7d0093ccfea180c3f91222af1ced4c1bfb64b6cfe63518f198df42c36c96f430c7b9cd670531d2914d4f6d2b5c64b8745be60793b702035b1219afb14b0390b06da49d2cc36b1496a3b09b523960d5c0645bbf050df664b7ff934ee3346e0fdf9190c161c167ca616d5b1127c3778d5aea3ae60acb7d3db4f956f5013961e4bcefb991c47c8eab45d40fc5b93637df16b116cd3f0c1dc8bb2018ec7c66293fa246442977e3aa5fd40d94ddec909decb7c84ff411b366a50138f21ac7554f9eaae720a2c2f38636f20ae1276c25f01180a180f79a8e5c35de4df78e7814e5b931ff992b0dbbd926491c0b77108ab4e0aae10d9e819da05829b3e17ee277dfb6dc642b010b4aa012ba8082e0222ca862cf32e0a7f69c29316fb27f31c7d7353613e9efae496906658605049d149eb0cdeac0f035068d7db1d35f9c6d7912da4cd3efe6495117b62f0f942e65953b5ac6f243c0474bd89bcec194507a57b0019291b931a90a5ec11a2c25111741d99a51d9ef9f2c0e753c8072ecc509f10cdb23d89275ddd272b24fee7d592b0eb842e60f620b288af676f1242ddf6e7120b918f6e736368046a87274545450991198c6c4cb88fb1715a56d32b22abc93ac49877364c289603895727f7ed7a543129cc71a01e0f1f4d7c45a33c3172370340b6a17d142b442226d45ba98faa84489e2bd4ed0c8265b6c35182f89db149ded70e71e0a14895d9f8d35b0f96e3ddf0e02d5a0a5e Hey, password is required here.","content":"<div class=\"hbe hbe-container\" id=\"hexo-blog-encrypt\" data-wpm=\"Oh, this is an invalid password. Check and try again, please.\" data-whm=\"OOPS, these decrypted content may changed, but you can still have a look.\">\n  <script id=\"hbeData\" type=\"hbeData\" data-hmacdigest=\"c2f6dd71547a0a6c20e271250a263ffc00e63ca7c958379954b31daee5d143c4\">845bca6bbae78d3763847ae442c60a8aae65871bad17929fd15df8197313ac86d506e05e33d0d667b744e6b2b7d0eefdfb0eac8c7baa7fcfac4cfea8467665841e8703ddb1586b123a92678c4aa1b38b9352355c88df162c3ba648d44351561c87e64872c467c9f5713f39e408bfd0e832c1a2343c212d8cbc219104c3d28be3d026ad3739521920bd54e256026db58da3472cf40b9b70e509517646931b9a3efbbdc258a2387de7972e4e3db83da8b33fee0d0b1536929611c23417a52a8ae8404cdbace80d88bf3aafe90b473397653bfc998a65f15ce2789580e7172395c0344b522cf8a17a4f093ec0e0baf2d017057de65d340ef1611c26b0c48165529672939cdd1d01d95bf7c12fb05aff265a1e576237d49c42c36bb37f7cf1538291452e8beff5664cd996817af84f866d1fa714662ecde4ffcd979a3939b07e78bf0596792e1aab89456fabe09be74ddbeb3049126498c1ab8a7fb98192cf0a20c10d45b0a654469dd80737b536e739b0df5ba94744923ef19cec303c8f828faf8bd3742167fb558973e7bda1601105c35ce476cce11c8f332d32f0d5e6e91d90f05376241d4ec3e96d0633cd9f7348ee9f735151cf09569d6b66fad903ed2ff3f6ca0dd87b8a63293683c19a1919e7f76ad8a5fb84214dcb7b223abe1d74d4926dcf3971bb68efaf08b3f04dfa46cdf81e14bf70a0ba0b3aa91d570f9902402fd22a54f31557e26121b6278fc0219984c806db1bdec76aaf17fbc7e3eae2799c49daf7d0e5be48eec2b964ee0ba0d3ce886a529e273c4d0da83e299f5c4ed0c14507ed19e2511754baede2afbdb1685936d1c0149a76eb980414bc5c92b33e9913c73ad390d59833c1b5b013530d792fe149df8fac2ba8e9650b37015c557122faeefc7aa73e7a2a5c468f4757deac648aeff2704f3fe6f7044cf8ce1f1a1b03d04df9e62f3af1481c1e495f562c6bd47bdc428ed18fffcf2cc9046e0fdffe8868ece6d9e2a7ba9c328dc108b7069208639029d83ac38da2291b3aba96b20eac2c02b4d26f989d4b6beff72fd0b4fe12c5c734e707fdd31c1fd8fc3db350f1c43d0b07609cb5d68cefa56fd51efa5124fae44526f4f23d9d37e424a32c200a23e2a9460d3e1d9a9b0c67f5c52490322e28759179d3a082f0241a01586fbbe633df76877a841848cd74e442c3d4cc28b21ddd9a4c523a75b002920ee5001a10eb62462b89bda5ad699e1009d9c955ca7167832f4a6fd2dba5a66e93e9ac626e638bd79a9d3869894208ef5cd9a0cb4a1c5b57968071214dbf9d7fa458f0b5594bb8fc79c924adad99b572a0de68c9bef642cbf4648e2e5c9651dd65ed1c140bd5b2621672a9ffcc406283c4d65b0622a4b24cb98a21c2156866ddaf83803163aaebb746c715b74d71a03fc380591c29ecd5526130d97a63a854af2ce0813c00912e9767fa451a1caef89b9d5037b0e175a3417061a9669fe0198e9e3f7b14fcb828e4d0a1a1fb99648d96560a2e524964ae1d7e18044037d0505908be0e0e1348fba7734c6b1bd77c06034a3438ee6787d14d618b7fa08ac6b68dd21198f006190389a338385e2b5d3ebb3a34067302bba516089914a7da0c8c244557cb327e90db9b09a3f61380ee8b52172c567cddc7d0093ccfea180c3f91222af1ced4c1bfb64b6cfe63518f198df42c36c96f430c7b9cd670531d2914d4f6d2b5c64b8745be60793b702035b1219afb14b0390b06da49d2cc36b1496a3b09b523960d5c0645bbf050df664b7ff934ee3346e0fdf9190c161c167ca616d5b1127c3778d5aea3ae60acb7d3db4f956f5013961e4bcefb991c47c8eab45d40fc5b93637df16b116cd3f0c1dc8bb2018ec7c66293fa246442977e3aa5fd40d94ddec909decb7c84ff411b366a50138f21ac7554f9eaae720a2c2f38636f20ae1276c25f01180a180f79a8e5c35de4df78e7814e5b931ff992b0dbbd926491c0b77108ab4e0aae10d9e819da05829b3e17ee277dfb6dc642b010b4aa012ba8082e0222ca862cf32e0a7f69c29316fb27f31c7d7353613e9efae496906658605049d149eb0cdeac0f035068d7db1d35f9c6d7912da4cd3efe6495117b62f0f942e65953b5ac6f243c0474bd89bcec194507a57b0019291b931a90a5ec11a2c25111741d99a51d9ef9f2c0e753c8072ecc509f10cdb23d89275ddd272b24fee7d592b0eb842e60f620b288af676f1242ddf6e7120b918f6e736368046a87274545450991198c6c4cb88fb1715a56d32b22abc93ac49877364c289603895727f7ed7a543129cc71a01e0f1f4d7c45a33c3172370340b6a17d142b442226d45ba98faa84489e2bd4ed0c8265b6c35182f89db149ded70e71e0a14895d9f8d35b0f96e3ddf0e02d5a0a5e</script>\n  <div class=\"hbe hbe-content\">\n    <div class=\"hbe hbe-input hbe-input-default\">\n      <input class=\"hbe hbe-input-field hbe-input-field-default\" type=\"password\" id=\"hbePass\">\n      <label class=\"hbe hbe-input-label hbe-input-label-default\" for=\"hbePass\">\n        <span class=\"hbe hbe-input-label-content hbe-input-label-content-default\">Hey, password is required here.</span>\n      </label>\n    </div>\n  </div>\n</div>\n<script data-pjax src=\"/lib/hbe.js\"></script><link href=\"/css/hbe.style.css\" rel=\"stylesheet\" type=\"text/css\">","tags":[{"name":"记录","slug":"记录","permalink":"https://jonathan1214.github.io/tags/记录/"}]},{"title":"记录失败","date":"2021-07-10T22:29:32.000Z","path":"2021/07/receive-failure/","text":"845bca6bbae78d3763847ae442c60a8ab2bdc5e32e91b2896064b5a50922e417d9cef8b9c360a2d1540464a9324a49465200bd5d212e1b80f1440e8e9bab55b29662dd94ce73e77827c6897b655e97859df5860731435c00ae54b10222112b5cf7058ae5f38f4302118fcdf5834214d504d6d151711676eea20166ff62a6fb3777a6c99d6b9a77c499ad6b67ed9af48e7e5317562ef4ca718d4c70bf8e3ec16e4d209e5bcdf43063b7f01bf43763d2322b26d5740af3cd1be3c63d4bbb76a00be90f775c09f0d9f8afc1fc49a48aa9c8ae0042c0a13fae392a2681f323244c40103a1b6f9372aafe428521397b2f8242e00e8e4c01bc488ff9fd841266b8850fd7a0cc94b7556271285bd4b9d71a33a5c126352e3754fbc841663ec6cbabc1472fa7ebd093cc9cc7d13b700983f2edb7275454b5442484815e77ae3826aa4b782f4c0f84f67b664b793a47c72b5c654f4ce7d4e8fd3b804edb4ccee647d383ac41ce7907c63ba899cb4f3402f7c3840779c4839946ca610ab0582cd112e050f6920f0d48bfd5570e32b23e46215f7b0326a23fe0a815022dffaa405f32705fb1fb9b7f08705cc0d303ecbab0051e384a2c9b70523527393e0868f39ed611886256195a9826751f5787c87e11daa85cda1ca36825495c8d3f2cbe144f8dace6b649f454f68496246c4be117aa2587f3183b712daaa5c6be5646178d1b47e7931c5f743de2eb4bf32972000bceca9d176a646fa3550525e324baa195e69e8cb467882ce922f0256a410c3fcf96bcffe14d0cfe27d50421ee6838ca7d1b824c822cd05c677c63b764f04c0ec887583cffb9a01396e04c415f75572ae2dd0bd23a2145f68d4769449ce4826803ea3671993768e1a21108a20f639c01d302def872b61de9af7159124cca330b2547100c22d1146b8de1edf5079232b76e2775b52a0986c8149ac6adf8f965f931ef91cb66aa4cecda492143c6ac46b28f1678d1abb5de0c7fc595dee9a48e908972f6d7b25eabe88164fece030bbe3c680470a05b934f118db7d3a970a2160accc5881efede9dde58337405966510bbd15a3baf7836b84d3a64b8232d9bcad46c68c0b4353beb740ab1bb870361e5df4c9c872a07e022333e31c9ec7d96e75d20d07ac57603dc6aaf617cadad297fc466ae3fa1ba3bb83319148bf1a6310429508893265e64846a96ff5a152bc0d59fd360a1a31a4c97ee11f68f44f32e1bb1b2865ff99a703b76dc85a717444faf6d04b761635512934a72a05498610f2c5055848dc7c857bbf98514ba037394447a51f056d3a2ba7648bb39606559c1f0640dc960fdfc6146283e533c9fc18220ffba8fab51e1ed8038fa4873d2e1cb23b6c9fc0c1d26e492373324ebe64a8c52bc50be7994465a1b3a6b89dc1b644b7e34a51f0b99ac17b43fafc188f2e29fa10ce432076329a0c3258f9241f3f460f2a95f5c11f1cba2772f62f60b21e425e01a11317f1ee48cb65d9a1a1c7a7313696e5eeba5230ec90ab471a9805be09a2528daad056c6b81c51ce8638e59c168bf53941012d23e4d15c207e6a020a94a87a0f2fbceca5d8456d85dfc8ee02c0caf810f295aec06d561d6f09554ae944cc40942e4dabd3db6de044b86e7e62cfdd2766508502a279c82dd0ea824adcb1c3cdae381210b07209034fa0c4d2f510e279ec6ee1d410ab41a164aa1816df35d90ee1249b143fcb225fef0ca005e7dfb6319c4e9d41da28454a03ef2e46d0b2fcbe7fc00383247dfe0bddb066e6cee155b6398c6cc080052ed64973681db54d8fa2642ccebaefdf5ec8b65e6de0053f696b181bdb2c7f067f927d095945b955dabf427ed8ce06ac7866f15c5ea0167254404df29608fe36ae5eea5010447fc69fdfd5a2f3fa6c99a5fc36f22354e3ed8b08a6a8ffda557bde3c2c8d0e3adddc75f3a1a63abf4d3eefb3e6bc27a2a150d612e9e6af027535fc26bda10a61fb1196cf9c39d901aba3238749c45a0a9afbd96398e907c3d615e0a68429dd803ac47b13483bd97e4e2336f15d4853d4ad5a25f3fc4c91048efb2c9e43fa0cf81359e3faf5207b3b90da29e507e2368a9df824f40c44ad9979fed37fee3706de16e3da52879ec7fe5ed62cc8948df30c9b5213b92d3ef8ecb301a9ca3cfedc85f89a31482f5268679dbcbeda9ce156ba8b136b3e7751af8d31bde459417d8c25c176c4c97a96e70f48e2f6f2ef2625fcb20c9670aa8daf5edc254 Hey, password is required here.","content":"<div class=\"hbe hbe-container\" id=\"hexo-blog-encrypt\" data-wpm=\"Oh, this is an invalid password. Check and try again, please.\" data-whm=\"OOPS, these decrypted content may changed, but you can still have a look.\">\n  <script id=\"hbeData\" type=\"hbeData\" data-hmacdigest=\"4a67e30dc833051bce3fee19acc02bb3065172ceb7b810e363e8d2bbd382c721\">845bca6bbae78d3763847ae442c60a8ab2bdc5e32e91b2896064b5a50922e417d9cef8b9c360a2d1540464a9324a49465200bd5d212e1b80f1440e8e9bab55b29662dd94ce73e77827c6897b655e97859df5860731435c00ae54b10222112b5cf7058ae5f38f4302118fcdf5834214d504d6d151711676eea20166ff62a6fb3777a6c99d6b9a77c499ad6b67ed9af48e7e5317562ef4ca718d4c70bf8e3ec16e4d209e5bcdf43063b7f01bf43763d2322b26d5740af3cd1be3c63d4bbb76a00be90f775c09f0d9f8afc1fc49a48aa9c8ae0042c0a13fae392a2681f323244c40103a1b6f9372aafe428521397b2f8242e00e8e4c01bc488ff9fd841266b8850fd7a0cc94b7556271285bd4b9d71a33a5c126352e3754fbc841663ec6cbabc1472fa7ebd093cc9cc7d13b700983f2edb7275454b5442484815e77ae3826aa4b782f4c0f84f67b664b793a47c72b5c654f4ce7d4e8fd3b804edb4ccee647d383ac41ce7907c63ba899cb4f3402f7c3840779c4839946ca610ab0582cd112e050f6920f0d48bfd5570e32b23e46215f7b0326a23fe0a815022dffaa405f32705fb1fb9b7f08705cc0d303ecbab0051e384a2c9b70523527393e0868f39ed611886256195a9826751f5787c87e11daa85cda1ca36825495c8d3f2cbe144f8dace6b649f454f68496246c4be117aa2587f3183b712daaa5c6be5646178d1b47e7931c5f743de2eb4bf32972000bceca9d176a646fa3550525e324baa195e69e8cb467882ce922f0256a410c3fcf96bcffe14d0cfe27d50421ee6838ca7d1b824c822cd05c677c63b764f04c0ec887583cffb9a01396e04c415f75572ae2dd0bd23a2145f68d4769449ce4826803ea3671993768e1a21108a20f639c01d302def872b61de9af7159124cca330b2547100c22d1146b8de1edf5079232b76e2775b52a0986c8149ac6adf8f965f931ef91cb66aa4cecda492143c6ac46b28f1678d1abb5de0c7fc595dee9a48e908972f6d7b25eabe88164fece030bbe3c680470a05b934f118db7d3a970a2160accc5881efede9dde58337405966510bbd15a3baf7836b84d3a64b8232d9bcad46c68c0b4353beb740ab1bb870361e5df4c9c872a07e022333e31c9ec7d96e75d20d07ac57603dc6aaf617cadad297fc466ae3fa1ba3bb83319148bf1a6310429508893265e64846a96ff5a152bc0d59fd360a1a31a4c97ee11f68f44f32e1bb1b2865ff99a703b76dc85a717444faf6d04b761635512934a72a05498610f2c5055848dc7c857bbf98514ba037394447a51f056d3a2ba7648bb39606559c1f0640dc960fdfc6146283e533c9fc18220ffba8fab51e1ed8038fa4873d2e1cb23b6c9fc0c1d26e492373324ebe64a8c52bc50be7994465a1b3a6b89dc1b644b7e34a51f0b99ac17b43fafc188f2e29fa10ce432076329a0c3258f9241f3f460f2a95f5c11f1cba2772f62f60b21e425e01a11317f1ee48cb65d9a1a1c7a7313696e5eeba5230ec90ab471a9805be09a2528daad056c6b81c51ce8638e59c168bf53941012d23e4d15c207e6a020a94a87a0f2fbceca5d8456d85dfc8ee02c0caf810f295aec06d561d6f09554ae944cc40942e4dabd3db6de044b86e7e62cfdd2766508502a279c82dd0ea824adcb1c3cdae381210b07209034fa0c4d2f510e279ec6ee1d410ab41a164aa1816df35d90ee1249b143fcb225fef0ca005e7dfb6319c4e9d41da28454a03ef2e46d0b2fcbe7fc00383247dfe0bddb066e6cee155b6398c6cc080052ed64973681db54d8fa2642ccebaefdf5ec8b65e6de0053f696b181bdb2c7f067f927d095945b955dabf427ed8ce06ac7866f15c5ea0167254404df29608fe36ae5eea5010447fc69fdfd5a2f3fa6c99a5fc36f22354e3ed8b08a6a8ffda557bde3c2c8d0e3adddc75f3a1a63abf4d3eefb3e6bc27a2a150d612e9e6af027535fc26bda10a61fb1196cf9c39d901aba3238749c45a0a9afbd96398e907c3d615e0a68429dd803ac47b13483bd97e4e2336f15d4853d4ad5a25f3fc4c91048efb2c9e43fa0cf81359e3faf5207b3b90da29e507e2368a9df824f40c44ad9979fed37fee3706de16e3da52879ec7fe5ed62cc8948df30c9b5213b92d3ef8ecb301a9ca3cfedc85f89a31482f5268679dbcbeda9ce156ba8b136b3e7751af8d31bde459417d8c25c176c4c97a96e70f48e2f6f2ef2625fcb20c9670aa8daf5edc254</script>\n  <div class=\"hbe hbe-content\">\n    <div class=\"hbe hbe-input hbe-input-default\">\n      <input class=\"hbe hbe-input-field hbe-input-field-default\" type=\"password\" id=\"hbePass\">\n      <label class=\"hbe hbe-input-label hbe-input-label-default\" for=\"hbePass\">\n        <span class=\"hbe hbe-input-label-content hbe-input-label-content-default\">Hey, password is required here.</span>\n      </label>\n    </div>\n  </div>\n</div>\n<script data-pjax src=\"/lib/hbe.js\"></script><link href=\"/css/hbe.style.css\" rel=\"stylesheet\" type=\"text/css\">","tags":[{"name":"记录","slug":"记录","permalink":"https://jonathan1214.github.io/tags/记录/"},{"name":"个人成长","slug":"个人成长","permalink":"https://jonathan1214.github.io/tags/个人成长/"}]},{"title":"结束了，本科生涯","date":"2021-06-30T13:52:40.000Z","path":"2021/06/it-is-over/","text":"今天是6月30日，无论怎么欺骗自己的心，到今天为止，我的本科生涯就算是彻底结束了。 然而一拖再拖，今天是7月2号，这篇文章还是没有写完，甚至只写了第一段，真是不知道该如何评价自己了。终究还是一条懒狗吧，这也正是我这整个大学生涯的写照。 结束吧，结束吧，我连一段结束的纪念话也写不出来，要与仪式感对抗到底了吗？这样也好，毕业典礼没有参加，毕业午宴也缺席了，大概是潜意识里认为这些都不重要。就这结束吧，心里无怨无悔就好。","content":"<p>今天是6月30日，无论怎么欺骗自己的心，到今天为止，我的本科生涯就算是彻底结束了。</p>\n<p>然而一拖再拖，今天是7月2号，这篇文章还是没有写完，甚至只写了第一段，真是不知道该如何评价自己了。终究还是一条懒狗吧，这也正是我这整个大学生涯的写照。</p>\n<p>结束吧，结束吧，我连一段结束的纪念话也写不出来，要与仪式感对抗到底了吗？这样也好，毕业典礼没有参加，毕业午宴也缺席了，大概是潜意识里认为这些都不重要。就这结束吧，心里无怨无悔就好。</p>\n","tags":[{"name":"记录","slug":"记录","permalink":"https://jonathan1214.github.io/tags/记录/"},{"name":"里程碑","slug":"里程碑","permalink":"https://jonathan1214.github.io/tags/里程碑/"}]},{"title":"答辩结束","date":"2021-06-18T01:40:50.000Z","path":"2021/06/finish-graduation-defense/","text":"事实上，答辩结束已经是两天前，也就是15号的事了，时间真的太快了，转眼就过了两天，现在已经是18号。恍惚间已经过两天，这几天实在是什么都没有做，漫无目的的空虚感又将我包围了，犹如四年前，那种感觉又回来了，我实在是不想再经历一次了。","content":"<p>事实上，答辩结束已经是两天前，也就是15号的事了，时间真的太快了，转眼就过了两天，现在已经是18号。恍惚间已经过两天，这几天实在是什么都没有做，漫无目的的空虚感又将我包围了，犹如四年前，那种感觉又回来了，我实在是不想再经历一次了。</p>\n","tags":[{"name":"记录","slug":"记录","permalink":"https://jonathan1214.github.io/tags/记录/"},{"name":"里程碑","slug":"里程碑","permalink":"https://jonathan1214.github.io/tags/里程碑/"},{"name":"毕业","slug":"毕业","permalink":"https://jonathan1214.github.io/tags/毕业/"}]},{"title":"致谢","date":"2021-05-31T10:54:33.000Z","path":"2021/05/reach-acknowledgement/","text":"折腾了两周的毕设论文终于要告一段落了，终于写到致谢了，却发现自己写不下去了，我反问自己为什么不一口气写完，得到的答案如下： 不写完就好像毕业能慢一点，但其实我已经没有多少留恋…… 就是单纯的懒，我想拖一拖 想营造一种气氛，一种离别的伤感的气氛 无论如何，致谢都是非写不可的，不是今天就是明天，那就没什么好拖的了，就现在吧，写完它，初稿就完成了。以下为致谢全文： 写到致谢的时候，发现自己真的是要毕业了，这四年过得很快很快，仿佛昨天我还是刚刚中学毕业的未成年，明天就要大学毕业了。时间总是太快，我们总是一路向前奔跑，很难得能在致谢这里停下来，回头想想一路走来碰到的许多值得我去深深感谢的人。 还记得4年前毕业填志愿的时候，在毛毛家叨扰多日，三个人（有时候是四个，甚至更多）看来看去，还是不知道要去哪儿，在填志愿的最后一天早上凌晨2点，我失眠了，最后把哈尔滨工业大学填在了第一志愿，而后兜兜转转，最终来了哈尔滨。现在回头看，只感觉太有意思了，我居然就这样来了，大概是缘吧，感谢那时的各位兄弟和阿姨，实在是太欢乐了。 我选择在这里度过了平淡的四年，大部分时间都花在了学习上，余下的时间和各位好友一起打篮球，尽管对我来说不那么平静，经历过一些坎坷挫折，不过现在都能回头笑看了。感谢在这个过程中给予我帮助的老师们，刘莹导员、何晨光老师、侯成宇老师还有于启月老师，特别是于老师，在去年5月份接收我进实验室开始学习，让我见到了同课堂上不一样的通信，确定了我现在研究的课题，还有幸结识了师兄们和师姐，文斌师兄、继冲师兄、泓池师兄、曹大哥、灏哥、鹏政师兄、王屹大哥、李瑭师姐、浩天师兄、子靖师兄、冠辰师兄和柯浔师兄，感谢各位师兄和师姐在学业上和生活上的帮助。还有两位同窗，成瑶和天威，感谢两位大佬的包容。 和各位同窗一起走过四年，很是欢乐，沃老板、赵公子、梁院长、群主、侯哥、刘飞还有斐哥，能与各位相识，实在是一种幸运，此后我们各奔东西，都有光明的未来。 那一帮一起打球的兄弟们，还记得一位学长说过，打球真的是一辈子的财富，我想最大的财富就是结识了各位球友。 延续了一年的毕设终于要结束了，感谢这个过程中答辩老师的指导意见，辛苦了。 最后，感谢我的爸妈和姐姐，没有你们，我到不了这里。写到致谢的时候，发现自己真的是要毕业了，这四年过得很快很快，仿佛昨天我还是刚刚中学毕业的未成年，明天就要大学毕业了。时间总是太快，我们总是一路向前奔跑，很难得能在致谢这里停下来，回头想想一路走来碰到的许多值得我去深深感谢的人。 还记得4年前毕业填志愿的时候，在毛毛家叨扰多日，三个人（有时候是四个，甚至更多）看来看去，还是不知道要去哪儿，在填志愿的最后一天早上凌晨2点，我失眠了，最后把哈尔滨工业大学填在了第一志愿，而后兜兜转转，最终来了哈尔滨。现在回头看，只感觉太有意思了，我居然就这样来了，大概是缘吧，感谢那时的各位兄弟和阿姨，实在是太欢乐了。 我选择在这里度过了平淡的四年，大部分时间都花在了学习上，余下的时间和各位好友一起打篮球，尽管对我来说不那么平静，经历过一些坎坷挫折，不过现在都能回头笑看了。感谢在这个过程中给予我帮助的老师们，刘莹导员、何晨光老师、侯成宇老师还有于启月老师，特别是于老师，在去年5月份接收我进实验室开始学习，让我见到了同课堂上不一样的通信，确定了我现在研究的课题，还有幸结识了师兄们和师姐，文斌师兄、继冲师兄、泓池师兄、曹大哥、灏哥、鹏政师兄、王屹大哥、李瑭师姐、浩天师兄、子靖师兄、冠辰师兄和柯浔师兄，感谢各位师兄和师姐在学业上和生活上的帮助。还有两位同窗，成瑶和天威，感谢两位大佬的包容。 和各位同窗一起走过四年，很是欢乐，沃老板、赵公子、梁院长、群主、侯哥、刘飞还有斐哥，能与各位相识，实在是一种幸运，此后我们各奔东西，都有光明的未来。 那一帮一起打球的兄弟们，还记得一位学长说过，打球真的是一辈子的财富，我想最大的财富就是结识了各位球友。 延续了一年的毕设终于要结束了，感谢这个过程中答辩老师的指导意见，辛苦了。 最后，感谢我的爸妈和姐姐，没有你们，我到不了这里。","content":"<p>折腾了两周的毕设论文终于要告一段落了，终于写到致谢了，却发现自己写不下去了，我反问自己为什么不一口气写完，得到的答案如下：</p>\n<ul>\n<li>不写完就好像毕业能慢一点，但其实我已经没有多少留恋……</li>\n<li>就是单纯的懒，我想拖一拖</li>\n<li>想营造一种气氛，一种离别的伤感的气氛</li>\n</ul>\n<p>无论如何，致谢都是非写不可的，不是今天就是明天，那就没什么好拖的了，就现在吧，写完它，初稿就完成了。以下为致谢全文：</p>\n<a id=\"more\"></a>\n<p>写到致谢的时候，发现自己真的是要毕业了，这四年过得很快很快，仿佛昨天我还是刚刚中学毕业的未成年，明天就要大学毕业了。时间总是太快，我们总是一路向前奔跑，很难得能在致谢这里停下来，回头想想一路走来碰到的许多值得我去深深感谢的人。</p>\n<p>还记得4年前毕业填志愿的时候，在毛毛家叨扰多日，三个人（有时候是四个，甚至更多）看来看去，还是不知道要去哪儿，在填志愿的最后一天早上凌晨2点，我失眠了，最后把哈尔滨工业大学填在了第一志愿，而后兜兜转转，最终来了哈尔滨。现在回头看，只感觉太有意思了，我居然就这样来了，大概是缘吧，感谢那时的各位兄弟和阿姨，实在是太欢乐了。</p>\n<p>我选择在这里度过了平淡的四年，大部分时间都花在了学习上，余下的时间和各位好友一起打篮球，尽管对我来说不那么平静，经历过一些坎坷挫折，不过现在都能回头笑看了。感谢在这个过程中给予我帮助的老师们，刘莹导员、何晨光老师、侯成宇老师还有于启月老师，特别是于老师，在去年5月份接收我进实验室开始学习，让我见到了同课堂上不一样的通信，确定了我现在研究的课题，还有幸结识了师兄们和师姐，文斌师兄、继冲师兄、泓池师兄、曹大哥、灏哥、鹏政师兄、王屹大哥、李瑭师姐、浩天师兄、子靖师兄、冠辰师兄和柯浔师兄，感谢各位师兄和师姐在学业上和生活上的帮助。还有两位同窗，成瑶和天威，感谢两位大佬的包容。</p>\n<p>和各位同窗一起走过四年，很是欢乐，沃老板、赵公子、梁院长、群主、侯哥、刘飞还有斐哥，能与各位相识，实在是一种幸运，此后我们各奔东西，都有光明的未来。</p>\n<p>那一帮一起打球的兄弟们，还记得一位学长说过，打球真的是一辈子的财富，我想最大的财富就是结识了各位球友。</p>\n<p>延续了一年的毕设终于要结束了，感谢这个过程中答辩老师的指导意见，辛苦了。</p>\n<p>最后，感谢我的爸妈和姐姐，没有你们，我到不了这里。写到致谢的时候，发现自己真的是要毕业了，这四年过得很快很快，仿佛昨天我还是刚刚中学毕业的未成年，明天就要大学毕业了。时间总是太快，我们总是一路向前奔跑，很难得能在致谢这里停下来，回头想想一路走来碰到的许多值得我去深深感谢的人。</p>\n<p>还记得4年前毕业填志愿的时候，在毛毛家叨扰多日，三个人（有时候是四个，甚至更多）看来看去，还是不知道要去哪儿，在填志愿的最后一天早上凌晨2点，我失眠了，最后把哈尔滨工业大学填在了第一志愿，而后兜兜转转，最终来了哈尔滨。现在回头看，只感觉太有意思了，我居然就这样来了，大概是缘吧，感谢那时的各位兄弟和阿姨，实在是太欢乐了。</p>\n<p>我选择在这里度过了平淡的四年，大部分时间都花在了学习上，余下的时间和各位好友一起打篮球，尽管对我来说不那么平静，经历过一些坎坷挫折，不过现在都能回头笑看了。感谢在这个过程中给予我帮助的老师们，刘莹导员、何晨光老师、侯成宇老师还有于启月老师，特别是于老师，在去年5月份接收我进实验室开始学习，让我见到了同课堂上不一样的通信，确定了我现在研究的课题，还有幸结识了师兄们和师姐，文斌师兄、继冲师兄、泓池师兄、曹大哥、灏哥、鹏政师兄、王屹大哥、李瑭师姐、浩天师兄、子靖师兄、冠辰师兄和柯浔师兄，感谢各位师兄和师姐在学业上和生活上的帮助。还有两位同窗，成瑶和天威，感谢两位大佬的包容。</p>\n<p>和各位同窗一起走过四年，很是欢乐，沃老板、赵公子、梁院长、群主、侯哥、刘飞还有斐哥，能与各位相识，实在是一种幸运，此后我们各奔东西，都有光明的未来。</p>\n<p>那一帮一起打球的兄弟们，还记得一位学长说过，打球真的是一辈子的财富，我想最大的财富就是结识了各位球友。</p>\n<p>延续了一年的毕设终于要结束了，感谢这个过程中答辩老师的指导意见，辛苦了。</p>\n<p>最后，感谢我的爸妈和姐姐，没有你们，我到不了这里。</p>\n","tags":[{"name":"记录","slug":"记录","permalink":"https://jonathan1214.github.io/tags/记录/"}]},{"title":"爱上一个人","date":"2021-05-21T02:37:32.000Z","path":"2021/05/fall-in-love-with-someone/","text":"845bca6bbae78d3763847ae442c60a8afcb509f3985732dd6a7efd60a9bdfeb88dd551da75962d484a30c48d33e9e1edc8061799aace4ee5ee5d95172804aba4d99aa2b798eb58a061e75ceb47f61b4d677bc172de3bd826d25a68d3b53f2881e9427df541aadad196039dd0989788a7f00032a34c5fc738926c8c2ccd8af7d20d4f1d232f621fbac225395fa384b2eacf988182f20306215b9ef3ab4f9cbd998a9fa87510ff222a21436ae5d6ad124ebc6e52412f3e826e4527403004c02b7626870f6df1f077763a7527481eda629d2a09b87bd0698682e6af367251e3cafdf0c1ff0a57d59a667c98c1706cf323541cbdc0c357c3fe80b3693d19ee394806eb91b0cd3d48811f9cf9c8edc93978f73283233e4a6fbdab8015898368930daee1be81cc96a3bb683e28dcf09c6a07dc77d163af0764df936a26793ae8d800d14b087b460f673b95dd577acd98d3104629c423cefa3a0aed2ae1bc58b76cdbc21f88379a1987f319d03e867a6d170414cbcd446323e62a3fbfe36ea15af570444818662ae1446192debc805682e05b6f403bd26d39657e2648c9dd7c210d8cdcd0874c7aa7f0e47aa8a971fe8c3d5d07237aa8b5496854aa3894b740e5040979e10c7dc9237b885ae03dee7cb236fd2e4ee9cf1326ea6327453791d766231ef1f10f96f00efde00a9e764de201229472f59fec4f7a4a03666ce9085df166803ea0031cd7e0a587bf6363fb0d0c1e0fcf52e3c3e97a34de7397c5a319558abc360c3608251033a44b48d66ba6dba83c45714fe2d8a1505cdf9c408ad6d473bb5a57f71b5bbf8753ddafa21236599b49eeadba46f9fc99f2c8396e3b8e0645a00d489dbb68971fb0b64af4646557e2da040884c7d1899832f1913c1d0e7b29ccdb1c68cf700f2589fb9fb3246e73aca8b8b0f8e1de7bfaa904a1ec259864d3511a48a87ed95bdeb0eb11c38cef1b11c19fba0fd215d71feec865dee700515b3ec3eec797a19888aec7a104abbf62cc911aafb8939406affedaa3aa2d2dfa52417cce039eaa3c67daad054f0a78d07a3001dbac842a7a19d353c97a30acebc42d7ad28ff3229777a90c5e0bee7e008b41c78dbd2ce61bda4075811601f01a308ebe9c892ba77eb0af52b272a7b8e4adeb6059350a0ba54d7192d698a6d8c6e8f3049aa42c33f10ab4c8aa6563d3af69fefb819840a34dcb7511ef1ecd9a09590e9d3d723d560ed1883dfc8fa63ee39220e2c4946d8a27274cb3cd09488782d195cd56a85f7e8cf44c7a327992242ff3094664046081bc3eed0dd8b7901be836790e5a3cec9e28eff65f2f2f2984c75d535276b4fdc4ccff4c52fe8c55046f3b0210b2dfadf95c31f30030c3cf726f5af7bcfb92e9aa649a242d07fd618493ce1794eed0bb203bb480415e8f7d5a75f0708762e34c61b115c204b233ba8edb83d565b352f7567883ccef32797913a355f226a21cf9111765471677ebc3f4069e7e68ee7c75ef02ca612db191518127c6279ba09bb9fce059f4590de11d226777d5e145300723ad0605d3b833c6d6835adc08cfb67aca815b606200fb22a2450221d03b4d1e86c15c2c610c72057532037e952818c5053eb4beb1ce776f78be408e1fa3730f1e577ba0dfaf8a43a6ad6e974e812fc05dcbbaeb70fdf939b8f914b2fd Hey, password is required here.","content":"<div class=\"hbe hbe-container\" id=\"hexo-blog-encrypt\" data-wpm=\"Oh, this is an invalid password. Check and try again, please.\" data-whm=\"OOPS, these decrypted content may changed, but you can still have a look.\">\n  <script id=\"hbeData\" type=\"hbeData\" data-hmacdigest=\"46be96ba45f65736313909f420943b0285d6d0dd57756b4b95d891acebde44b4\">845bca6bbae78d3763847ae442c60a8afcb509f3985732dd6a7efd60a9bdfeb88dd551da75962d484a30c48d33e9e1edc8061799aace4ee5ee5d95172804aba4d99aa2b798eb58a061e75ceb47f61b4d677bc172de3bd826d25a68d3b53f2881e9427df541aadad196039dd0989788a7f00032a34c5fc738926c8c2ccd8af7d20d4f1d232f621fbac225395fa384b2eacf988182f20306215b9ef3ab4f9cbd998a9fa87510ff222a21436ae5d6ad124ebc6e52412f3e826e4527403004c02b7626870f6df1f077763a7527481eda629d2a09b87bd0698682e6af367251e3cafdf0c1ff0a57d59a667c98c1706cf323541cbdc0c357c3fe80b3693d19ee394806eb91b0cd3d48811f9cf9c8edc93978f73283233e4a6fbdab8015898368930daee1be81cc96a3bb683e28dcf09c6a07dc77d163af0764df936a26793ae8d800d14b087b460f673b95dd577acd98d3104629c423cefa3a0aed2ae1bc58b76cdbc21f88379a1987f319d03e867a6d170414cbcd446323e62a3fbfe36ea15af570444818662ae1446192debc805682e05b6f403bd26d39657e2648c9dd7c210d8cdcd0874c7aa7f0e47aa8a971fe8c3d5d07237aa8b5496854aa3894b740e5040979e10c7dc9237b885ae03dee7cb236fd2e4ee9cf1326ea6327453791d766231ef1f10f96f00efde00a9e764de201229472f59fec4f7a4a03666ce9085df166803ea0031cd7e0a587bf6363fb0d0c1e0fcf52e3c3e97a34de7397c5a319558abc360c3608251033a44b48d66ba6dba83c45714fe2d8a1505cdf9c408ad6d473bb5a57f71b5bbf8753ddafa21236599b49eeadba46f9fc99f2c8396e3b8e0645a00d489dbb68971fb0b64af4646557e2da040884c7d1899832f1913c1d0e7b29ccdb1c68cf700f2589fb9fb3246e73aca8b8b0f8e1de7bfaa904a1ec259864d3511a48a87ed95bdeb0eb11c38cef1b11c19fba0fd215d71feec865dee700515b3ec3eec797a19888aec7a104abbf62cc911aafb8939406affedaa3aa2d2dfa52417cce039eaa3c67daad054f0a78d07a3001dbac842a7a19d353c97a30acebc42d7ad28ff3229777a90c5e0bee7e008b41c78dbd2ce61bda4075811601f01a308ebe9c892ba77eb0af52b272a7b8e4adeb6059350a0ba54d7192d698a6d8c6e8f3049aa42c33f10ab4c8aa6563d3af69fefb819840a34dcb7511ef1ecd9a09590e9d3d723d560ed1883dfc8fa63ee39220e2c4946d8a27274cb3cd09488782d195cd56a85f7e8cf44c7a327992242ff3094664046081bc3eed0dd8b7901be836790e5a3cec9e28eff65f2f2f2984c75d535276b4fdc4ccff4c52fe8c55046f3b0210b2dfadf95c31f30030c3cf726f5af7bcfb92e9aa649a242d07fd618493ce1794eed0bb203bb480415e8f7d5a75f0708762e34c61b115c204b233ba8edb83d565b352f7567883ccef32797913a355f226a21cf9111765471677ebc3f4069e7e68ee7c75ef02ca612db191518127c6279ba09bb9fce059f4590de11d226777d5e145300723ad0605d3b833c6d6835adc08cfb67aca815b606200fb22a2450221d03b4d1e86c15c2c610c72057532037e952818c5053eb4beb1ce776f78be408e1fa3730f1e577ba0dfaf8a43a6ad6e974e812fc05dcbbaeb70fdf939b8f914b2fd</script>\n  <div class=\"hbe hbe-content\">\n    <div class=\"hbe hbe-input hbe-input-default\">\n      <input class=\"hbe hbe-input-field hbe-input-field-default\" type=\"password\" id=\"hbePass\">\n      <label class=\"hbe hbe-input-label hbe-input-label-default\" for=\"hbePass\">\n        <span class=\"hbe hbe-input-label-content hbe-input-label-content-default\">Hey, password is required here.</span>\n      </label>\n    </div>\n  </div>\n</div>\n<script data-pjax src=\"/lib/hbe.js\"></script><link href=\"/css/hbe.style.css\" rel=\"stylesheet\" type=\"text/css\">","tags":[{"name":"记录","slug":"记录","permalink":"https://jonathan1214.github.io/tags/记录/"}]},{"title":"开搞毕设论文","date":"2021-05-13T15:25:29.000Z","path":"2021/05/ready-for-thesis/","text":"845bca6bbae78d3763847ae442c60a8afcb509f3985732dd6a7efd60a9bdfeb84f04798af668d9dd27335f5d3c3a2b67e9072940716e36e0ca3a914b75dbc16997426dd28862459ccb57b2cf1cca279dc16e6fafee95df9d5c1cf1512a37f553acffea720facb50e62c327a895dd12568b9ac4c71a372ab8be90498e2e02f826232c30e6a6db023f860b997ce21c962be43ac1b0e49b00ef2f44fc76727e169d103fb4ce64aef92c6969eb786e6c395baf97fa470fef73af9848627ec220af9c454ba92e97573c968056c6d93535cbbe1ad92fe509b06cb4a26ca08ba06248611d9cdf79ceb43b04a94f1dd7bafd3b6614379a630a98bd5e47fc75f210f6c2293f999f0f01853803d37f0f6d7e6e00ab01aff38f0ba88688a27f46d1dfe335a592befb696922e65dd1909bde7215389c763063ec6b4b0642a6f77611fb9e86bda32653a45ae40962c5a6537a3ad692eca7428fd643350e99319da5625c2079e3cbd8d03ce1db5b4cd053f24dd8a3ef0c685f5e6a2db02740a858493e485d53355ccf545c259080f7fedc8ce44241500ed95804289a56a4c6700e828f4a0fc07377ffa02aea72b5bdf944768772ed68652e90b9bf431ffc0e3b19cc56efb965f77c14050216a42f0c560363096c62c78eac0f61a3170a05cf32da9d94f28dd3a7b2851dabb04249db2c74cd01fe014742031fed6fddace0325d4574d866e180e997668172de4c419bb0e3b088e58d229919e31b43c643477d9e2957e892905f6fad48effc2ea3ff786c278b71ff787191e1081d41a190c43cf29050f1c3c02158575c4f9e5c6888d22f9b49a698b1e09e111fd6a756e6981385b4206bfa39bdd6571b4cd58a65168a7ceb536dec9819f53466393b9360e9a36c264b3da96d3aedf1d69a2e6efafc39d9c334448335d97bdd4a2d6d3542f32d60489ffab08c7c0b209d2b35dfa95ef7271b33a9d117958e10e26c900e7ca3b71af836e0aa31038b71a1ebb7446a37777d57852fd4de47d3579def6544b678db975e890f31da962cedfdc36760f2f3a7d14b3ed302fafa9d5846b74aa9261a9f28dfce821c6d0af28b4ea79cd65ac3e231fcd57d84a8538fbb096669dee8ff0c6f468c245b930b71b808a1520bdff87276a5f2567f51cf40e3acfe96c1f683bb2f2d416419305628f6f2d3f55e37e6277f17db5a6f69a9d3aa3b3ba158ed0778e7245b7710bea2dff2e09da58a96b39b6dc50bd7d23d006c57c1b0926d53ff2b3073d0ba0c7156f542b7b0d51bd718dd3f52f5c3f40fe2e2a889b75852d779ad40f3e15d80fab20f3587f2deab22b5b8f5673156bfefc358a06e49b13e5c6efb6c8584b2fb79a2f9f94977756f4a805c52bfd3ac72813099b5dc5df11a036c6e9845783102e833e5dd2292051f04d8267d79b3fec640085ceeedfb54721a97c00f4dfb6902b862def5fb30cae4558834b79939752d194f7527375111e8ff734fcac6671587fa1c13ed07aa87bb7b11d3d2921253eaf0d2259a106233f02c175b1a06053d5f97ede0f6989129eba59ffe77d09691a33f753f98e381910738930cef3af6f53f23df17a729b8d526fc7bd1397813dc7f3c51d848ba64c19c8ce3d1821b3dd8757c2b68ca12d49c9c430f159b34c37a85ba136e05f3ed5797b08c24dc1a3c5c940b30ec999d51ccc396501a7b9b1a44aeea6920752675972fa88a55ecef751b84b7c9cef892e1dca9e1dd6a0b5534b4959a63388edbaec1f348132e4be43339a3a3c48df011ade9676f247d5c8f1cd5f1a6d79daa66233d56327a09e1166f1f5dbf8ec656815314b463920ddbff8e471a3317d5ab8b4e10f8175421c8fa36b927f6992e21529bf0b9078b056a680dbf35869ccb0fb2c5fc9f01c4fa319fd224ef59615b0275f30dce2e78ca4bb2a8694d8a7c89c3ec73b35eeef68bec927309df149775882106d2e782af56548ad6800ee6d80113c19d3bc36e187d6a97ed640df1d3f7e4155de3498f0b9782dd09c9b4a70f718d56e509ecf8e324577903fdf266eeb6c08f2a9798470e041bcee5bb54ddd716263e68c206ff3e60a1724b36a0fea7eddfeae6f96426137793d8fcc53a4b6d32b82bae91c89fff3eec6a6fca49fcbb563587a45e095ebea1ced59a704e0928f124ee0b2beb4ff8b08df6447e8529267ec8a7552d2e91a73d7b1b4fe8e7cf5dcd32cc2016db61dbc7e3d59be34ba5e7d5d99218e047a099021451492103a214c99916a2914b6d3e9675335e30fecef9e3bf0fff873703aae927030cdc5e6ed3352b5dbb6bac24841be9e80e4a801c0286081d49606eefa8426ea6ed5185e559f9cfa3381d2a4d464c474ee29a717d6df94b1f3a87f56217618526fa9a6f0c864975405ffa8002a361ab73d5b71c17c50c8be9d6d59a2469b19fdbb4959c648d5e762bb821beee4d1db2f9280b964a8fee939387bc27b7d5616820c34d5a440baed0eb1b1bb97be0b22e628a66fca3276c41de44f9519c8bf8307cce7dcd85cd9712ec97356ec0126e89b27a128c390d9c5926adb1dd7b9a601093967799e04f97e9da26c01e9d348228ebf48c43af0d9492641a9bb486c2eb1955958716a82a96c5c8a310e3095f1da76cc382a57a67f36eeec5d24096dacbe7165a3061a783929ad3c6161a8cdcbd070729b399791e85483884517e3bbfb92fb2f3babe07e77b6f4489b25cea0b8b9d1768bd8d89940e3d8e4087de56657b6d9b1b18806cb330199a70c806a42661e779252337fe094b Hey, password is required here.","content":"<div class=\"hbe hbe-container\" id=\"hexo-blog-encrypt\" data-wpm=\"Oh, this is an invalid password. Check and try again, please.\" data-whm=\"OOPS, these decrypted content may changed, but you can still have a look.\">\n  <script id=\"hbeData\" type=\"hbeData\" data-hmacdigest=\"390ffbdbb212e25a763b81624f9636afd93d72e2eea52bec9b53b3597063e68c\">845bca6bbae78d3763847ae442c60a8afcb509f3985732dd6a7efd60a9bdfeb84f04798af668d9dd27335f5d3c3a2b67e9072940716e36e0ca3a914b75dbc16997426dd28862459ccb57b2cf1cca279dc16e6fafee95df9d5c1cf1512a37f553acffea720facb50e62c327a895dd12568b9ac4c71a372ab8be90498e2e02f826232c30e6a6db023f860b997ce21c962be43ac1b0e49b00ef2f44fc76727e169d103fb4ce64aef92c6969eb786e6c395baf97fa470fef73af9848627ec220af9c454ba92e97573c968056c6d93535cbbe1ad92fe509b06cb4a26ca08ba06248611d9cdf79ceb43b04a94f1dd7bafd3b6614379a630a98bd5e47fc75f210f6c2293f999f0f01853803d37f0f6d7e6e00ab01aff38f0ba88688a27f46d1dfe335a592befb696922e65dd1909bde7215389c763063ec6b4b0642a6f77611fb9e86bda32653a45ae40962c5a6537a3ad692eca7428fd643350e99319da5625c2079e3cbd8d03ce1db5b4cd053f24dd8a3ef0c685f5e6a2db02740a858493e485d53355ccf545c259080f7fedc8ce44241500ed95804289a56a4c6700e828f4a0fc07377ffa02aea72b5bdf944768772ed68652e90b9bf431ffc0e3b19cc56efb965f77c14050216a42f0c560363096c62c78eac0f61a3170a05cf32da9d94f28dd3a7b2851dabb04249db2c74cd01fe014742031fed6fddace0325d4574d866e180e997668172de4c419bb0e3b088e58d229919e31b43c643477d9e2957e892905f6fad48effc2ea3ff786c278b71ff787191e1081d41a190c43cf29050f1c3c02158575c4f9e5c6888d22f9b49a698b1e09e111fd6a756e6981385b4206bfa39bdd6571b4cd58a65168a7ceb536dec9819f53466393b9360e9a36c264b3da96d3aedf1d69a2e6efafc39d9c334448335d97bdd4a2d6d3542f32d60489ffab08c7c0b209d2b35dfa95ef7271b33a9d117958e10e26c900e7ca3b71af836e0aa31038b71a1ebb7446a37777d57852fd4de47d3579def6544b678db975e890f31da962cedfdc36760f2f3a7d14b3ed302fafa9d5846b74aa9261a9f28dfce821c6d0af28b4ea79cd65ac3e231fcd57d84a8538fbb096669dee8ff0c6f468c245b930b71b808a1520bdff87276a5f2567f51cf40e3acfe96c1f683bb2f2d416419305628f6f2d3f55e37e6277f17db5a6f69a9d3aa3b3ba158ed0778e7245b7710bea2dff2e09da58a96b39b6dc50bd7d23d006c57c1b0926d53ff2b3073d0ba0c7156f542b7b0d51bd718dd3f52f5c3f40fe2e2a889b75852d779ad40f3e15d80fab20f3587f2deab22b5b8f5673156bfefc358a06e49b13e5c6efb6c8584b2fb79a2f9f94977756f4a805c52bfd3ac72813099b5dc5df11a036c6e9845783102e833e5dd2292051f04d8267d79b3fec640085ceeedfb54721a97c00f4dfb6902b862def5fb30cae4558834b79939752d194f7527375111e8ff734fcac6671587fa1c13ed07aa87bb7b11d3d2921253eaf0d2259a106233f02c175b1a06053d5f97ede0f6989129eba59ffe77d09691a33f753f98e381910738930cef3af6f53f23df17a729b8d526fc7bd1397813dc7f3c51d848ba64c19c8ce3d1821b3dd8757c2b68ca12d49c9c430f159b34c37a85ba136e05f3ed5797b08c24dc1a3c5c940b30ec999d51ccc396501a7b9b1a44aeea6920752675972fa88a55ecef751b84b7c9cef892e1dca9e1dd6a0b5534b4959a63388edbaec1f348132e4be43339a3a3c48df011ade9676f247d5c8f1cd5f1a6d79daa66233d56327a09e1166f1f5dbf8ec656815314b463920ddbff8e471a3317d5ab8b4e10f8175421c8fa36b927f6992e21529bf0b9078b056a680dbf35869ccb0fb2c5fc9f01c4fa319fd224ef59615b0275f30dce2e78ca4bb2a8694d8a7c89c3ec73b35eeef68bec927309df149775882106d2e782af56548ad6800ee6d80113c19d3bc36e187d6a97ed640df1d3f7e4155de3498f0b9782dd09c9b4a70f718d56e509ecf8e324577903fdf266eeb6c08f2a9798470e041bcee5bb54ddd716263e68c206ff3e60a1724b36a0fea7eddfeae6f96426137793d8fcc53a4b6d32b82bae91c89fff3eec6a6fca49fcbb563587a45e095ebea1ced59a704e0928f124ee0b2beb4ff8b08df6447e8529267ec8a7552d2e91a73d7b1b4fe8e7cf5dcd32cc2016db61dbc7e3d59be34ba5e7d5d99218e047a099021451492103a214c99916a2914b6d3e9675335e30fecef9e3bf0fff873703aae927030cdc5e6ed3352b5dbb6bac24841be9e80e4a801c0286081d49606eefa8426ea6ed5185e559f9cfa3381d2a4d464c474ee29a717d6df94b1f3a87f56217618526fa9a6f0c864975405ffa8002a361ab73d5b71c17c50c8be9d6d59a2469b19fdbb4959c648d5e762bb821beee4d1db2f9280b964a8fee939387bc27b7d5616820c34d5a440baed0eb1b1bb97be0b22e628a66fca3276c41de44f9519c8bf8307cce7dcd85cd9712ec97356ec0126e89b27a128c390d9c5926adb1dd7b9a601093967799e04f97e9da26c01e9d348228ebf48c43af0d9492641a9bb486c2eb1955958716a82a96c5c8a310e3095f1da76cc382a57a67f36eeec5d24096dacbe7165a3061a783929ad3c6161a8cdcbd070729b399791e85483884517e3bbfb92fb2f3babe07e77b6f4489b25cea0b8b9d1768bd8d89940e3d8e4087de56657b6d9b1b18806cb330199a70c806a42661e779252337fe094b</script>\n  <div class=\"hbe hbe-content\">\n    <div class=\"hbe hbe-input hbe-input-default\">\n      <input class=\"hbe hbe-input-field hbe-input-field-default\" type=\"password\" id=\"hbePass\">\n      <label class=\"hbe hbe-input-label hbe-input-label-default\" for=\"hbePass\">\n        <span class=\"hbe hbe-input-label-content hbe-input-label-content-default\">Hey, password is required here.</span>\n      </label>\n    </div>\n  </div>\n</div>\n<script data-pjax src=\"/lib/hbe.js\"></script><link href=\"/css/hbe.style.css\" rel=\"stylesheet\" type=\"text/css\">","tags":[{"name":"记录","slug":"记录","permalink":"https://jonathan1214.github.io/tags/记录/"},{"name":"里程碑","slug":"里程碑","permalink":"https://jonathan1214.github.io/tags/里程碑/"}]},{"title":"最近的一些事情——准备考驾照以及其他","date":"2021-05-12T15:35:02.000Z","path":"2021/05/what-s-going-on/","text":"845bca6bbae78d3763847ae442c60a8ab96f32c9f38d512b6b0867e27965c854f8ab4d28dac4b9006f28f22c390a8d4952ac31e26aab04ced6a3cb083d78b8461a5671551046bd94acac361b9859ba2ee0de04c85e2d59fef706e6d3938bc8400aa17b7b7f7cf9da1c3f7512e8537867b2ddeeb51ba3964bf470afe355d4892695e9a51fca90d39098e3ef7f2b0342fdcb0d07870e6bf1c33bfbb88b6de1c35c2aa9a90df6d9ed001cdacfaa309acf9f12de10871242cef8a875b76fc8e67b428c741e689321c83b707e394c406f16555e6905789ba65fb70506647c3ff77eafa82f6d5ed4a2d5cbc48f68b7e57b1cc7a489d01c9281a5d2e3d53a87e9691ed9b4f02951eb3c94ceeeb78d76c4bbffc0b5672be378715c83d91ad092738214da9aaf1272a47e8d6dfe3e74a16e831366c7ff10ca314653cf8221a3f90e95ef4253c4bd117da586d67443678a94fad28616024b2a6b31d39898af01d25d081a985c112362909c63b763540bd3564cf00decaea463fc899b0dbe7b0c9a8df576018e8052dc8ade9d51ce546288003fb9a8eef4b5b2ea52aefea2c8e6cf8ab8ac2eecf2cc370725f7c56db8bdac08fb23d944b2a43e4f337b4bb98b5029ef4a4352d0a5a33af71aea9d25e5f79c2e8223ba73338d4d7a3bf8cc46417e497883d0006dff0291510d6d29a584b033bd34aa9bd53dba785623d9b23ecb4a19b1fa691797f67a6f4ee84aaf52d8d5b0ae5d1da069e607a6e6ea70b1800ce262bdc73bd10714eb8614bcaa6e7e87d6e20a1cd0b57a6ee9047a95464e4411d252ec5d2b8e536f53875846e92c20bcb8af3a3fef87004874b99cfc291b66e581928a8063680cf9d8c33456485c79217fe423e54931d621ce2e8ea0dd8eac156235e6ff193e587a51a981aff0865e729acaa9eee8602d212550045eabc1ebcdaa506b2e4d93c802a7c0c921bb08cb781df6de8b5defed83ffde4fb6a12bc272b9bb0a9aa1edd14fdd60c4019e1744f2f3235311ced6ae056b3278edc9804d51115eb13fc4722ec334d84a1aba48a2ec493dd05ec5ded189e3d4c4aa82e8d91d5acf7dbed8a7d439efb72151e85a705715d4837809700bffc76c425510f13d013e35cb53d215893df4894175a10712ca4b5755e0c1f55a352ee6669d0cdfabe2dd2b79f9415eaf9f6cd7429b5c08a66fc788dc2dd6f1034e66645f6d00d1be64976fc715ca8328fcc9dca21e5653e5495edb847a6bf89b94ecd67bc34cc8fd08f5ed02fa4a33c6ca8cda421f88f3cd10ce8e77ae274810c99e17fbb6166b5654300f7725c6a434dceaf7057bf624b2acef8ebcbe0a93cff85791ed3b5fed5bda91faccc4073e3bf2bfc534f6eb51e94bbe7b8d94afc874c138b8c23335167805cf36f2c26425583231d9f7339531daf071c9c0ea7a65fdfad4d7023e764f0a46ff22fcb184567a4e19e31fa568842109f84ac496c211fc5ad85d6e81b148ba6cbbb8504e092a670b91cd0fb3d40c5a0cad89b5c5ba44b8edfebb0aefae6528f6aa6b5e1019c166685a86cd27b6b9fbd718c8a9f90e5d815a0e6106374bb5c48ad46a54a617be080b2997a590ce0f5f3efc3b3cb941dbba7e7435b263a47bc0c2f16c9360ce2a1949d27038572c3fbe723a4be3fb4ac76af02a3728eb46e04abf0fd53b3d7abdc0e665c79fd3ecf6b9e6f52d96a7fc81046a855cf319ef7f4522fbedfd2a336b6cc65229860573f4ee2e3c03055eb8de5f508727fbd6e261712e270285822c5861e4d593c2b08d55f1771005fd57d1aedf9123275978ed470f7a26c64044103bd32467eb3e42b02c01bbfc23f65366d84dd0ea6643df91a2247527f9d1d3b3cfec28c63405bdaee11a2a2d142b553a817cd62028ee100af65beb2ec3c735498ae775416ef31b05cb5b1689f9e693767caaf00dac9c063590f36d78385c1dcba03f3ad9639aa3ca090a141ebafda247fb4d4021bc4364e48a166db18d4862d538230ac238e8eac4398d67c4520496261bc2afd67a7887400c4136f9e2da3cb54a5a5f3baf5d2ec40204c6e2b281824b4f251dd0cde239718a0406aff11ecfa394a930a44f1f066ef2b99f63f125334a7b1d29d6c0334da8c19d006bcf70b01dc64ca6ff36f890f2d7fb98444dd55ba836cd16de4fc45d3952cee729102abf69801c4716f6d477acc180a22a542198c2e6734f0815c1f1b3a3710366b6854695b42ec63aa02c8bd86918ee12022c7def6aa90a157c7548e6fe0a1905c73cee94406b1119efd63983189bc03806fa91078f0da59118eb36c5547b5da64eb60722a61631d2279d392f81532b7218f91750fd49afbe944ebf5d22427f73d6b653d532a098f5352f0f87571bb36ec06648ede30e19fed04b86eff6ba22bb612974ef9a Hey, password is required here.","content":"<div class=\"hbe hbe-container\" id=\"hexo-blog-encrypt\" data-wpm=\"Oh, this is an invalid password. Check and try again, please.\" data-whm=\"OOPS, these decrypted content may changed, but you can still have a look.\">\n  <script id=\"hbeData\" type=\"hbeData\" data-hmacdigest=\"e13513e75ecb7893d1159e38121aaf681f6ca61794e6ec913572c2ec9d831537\">845bca6bbae78d3763847ae442c60a8ab96f32c9f38d512b6b0867e27965c854f8ab4d28dac4b9006f28f22c390a8d4952ac31e26aab04ced6a3cb083d78b8461a5671551046bd94acac361b9859ba2ee0de04c85e2d59fef706e6d3938bc8400aa17b7b7f7cf9da1c3f7512e8537867b2ddeeb51ba3964bf470afe355d4892695e9a51fca90d39098e3ef7f2b0342fdcb0d07870e6bf1c33bfbb88b6de1c35c2aa9a90df6d9ed001cdacfaa309acf9f12de10871242cef8a875b76fc8e67b428c741e689321c83b707e394c406f16555e6905789ba65fb70506647c3ff77eafa82f6d5ed4a2d5cbc48f68b7e57b1cc7a489d01c9281a5d2e3d53a87e9691ed9b4f02951eb3c94ceeeb78d76c4bbffc0b5672be378715c83d91ad092738214da9aaf1272a47e8d6dfe3e74a16e831366c7ff10ca314653cf8221a3f90e95ef4253c4bd117da586d67443678a94fad28616024b2a6b31d39898af01d25d081a985c112362909c63b763540bd3564cf00decaea463fc899b0dbe7b0c9a8df576018e8052dc8ade9d51ce546288003fb9a8eef4b5b2ea52aefea2c8e6cf8ab8ac2eecf2cc370725f7c56db8bdac08fb23d944b2a43e4f337b4bb98b5029ef4a4352d0a5a33af71aea9d25e5f79c2e8223ba73338d4d7a3bf8cc46417e497883d0006dff0291510d6d29a584b033bd34aa9bd53dba785623d9b23ecb4a19b1fa691797f67a6f4ee84aaf52d8d5b0ae5d1da069e607a6e6ea70b1800ce262bdc73bd10714eb8614bcaa6e7e87d6e20a1cd0b57a6ee9047a95464e4411d252ec5d2b8e536f53875846e92c20bcb8af3a3fef87004874b99cfc291b66e581928a8063680cf9d8c33456485c79217fe423e54931d621ce2e8ea0dd8eac156235e6ff193e587a51a981aff0865e729acaa9eee8602d212550045eabc1ebcdaa506b2e4d93c802a7c0c921bb08cb781df6de8b5defed83ffde4fb6a12bc272b9bb0a9aa1edd14fdd60c4019e1744f2f3235311ced6ae056b3278edc9804d51115eb13fc4722ec334d84a1aba48a2ec493dd05ec5ded189e3d4c4aa82e8d91d5acf7dbed8a7d439efb72151e85a705715d4837809700bffc76c425510f13d013e35cb53d215893df4894175a10712ca4b5755e0c1f55a352ee6669d0cdfabe2dd2b79f9415eaf9f6cd7429b5c08a66fc788dc2dd6f1034e66645f6d00d1be64976fc715ca8328fcc9dca21e5653e5495edb847a6bf89b94ecd67bc34cc8fd08f5ed02fa4a33c6ca8cda421f88f3cd10ce8e77ae274810c99e17fbb6166b5654300f7725c6a434dceaf7057bf624b2acef8ebcbe0a93cff85791ed3b5fed5bda91faccc4073e3bf2bfc534f6eb51e94bbe7b8d94afc874c138b8c23335167805cf36f2c26425583231d9f7339531daf071c9c0ea7a65fdfad4d7023e764f0a46ff22fcb184567a4e19e31fa568842109f84ac496c211fc5ad85d6e81b148ba6cbbb8504e092a670b91cd0fb3d40c5a0cad89b5c5ba44b8edfebb0aefae6528f6aa6b5e1019c166685a86cd27b6b9fbd718c8a9f90e5d815a0e6106374bb5c48ad46a54a617be080b2997a590ce0f5f3efc3b3cb941dbba7e7435b263a47bc0c2f16c9360ce2a1949d27038572c3fbe723a4be3fb4ac76af02a3728eb46e04abf0fd53b3d7abdc0e665c79fd3ecf6b9e6f52d96a7fc81046a855cf319ef7f4522fbedfd2a336b6cc65229860573f4ee2e3c03055eb8de5f508727fbd6e261712e270285822c5861e4d593c2b08d55f1771005fd57d1aedf9123275978ed470f7a26c64044103bd32467eb3e42b02c01bbfc23f65366d84dd0ea6643df91a2247527f9d1d3b3cfec28c63405bdaee11a2a2d142b553a817cd62028ee100af65beb2ec3c735498ae775416ef31b05cb5b1689f9e693767caaf00dac9c063590f36d78385c1dcba03f3ad9639aa3ca090a141ebafda247fb4d4021bc4364e48a166db18d4862d538230ac238e8eac4398d67c4520496261bc2afd67a7887400c4136f9e2da3cb54a5a5f3baf5d2ec40204c6e2b281824b4f251dd0cde239718a0406aff11ecfa394a930a44f1f066ef2b99f63f125334a7b1d29d6c0334da8c19d006bcf70b01dc64ca6ff36f890f2d7fb98444dd55ba836cd16de4fc45d3952cee729102abf69801c4716f6d477acc180a22a542198c2e6734f0815c1f1b3a3710366b6854695b42ec63aa02c8bd86918ee12022c7def6aa90a157c7548e6fe0a1905c73cee94406b1119efd63983189bc03806fa91078f0da59118eb36c5547b5da64eb60722a61631d2279d392f81532b7218f91750fd49afbe944ebf5d22427f73d6b653d532a098f5352f0f87571bb36ec06648ede30e19fed04b86eff6ba22bb612974ef9a</script>\n  <div class=\"hbe hbe-content\">\n    <div class=\"hbe hbe-input hbe-input-default\">\n      <input class=\"hbe hbe-input-field hbe-input-field-default\" type=\"password\" id=\"hbePass\">\n      <label class=\"hbe hbe-input-label hbe-input-label-default\" for=\"hbePass\">\n        <span class=\"hbe hbe-input-label-content hbe-input-label-content-default\">Hey, password is required here.</span>\n      </label>\n    </div>\n  </div>\n</div>\n<script data-pjax src=\"/lib/hbe.js\"></script><link href=\"/css/hbe.style.css\" rel=\"stylesheet\" type=\"text/css\">","tags":[{"name":"记录","slug":"记录","permalink":"https://jonathan1214.github.io/tags/记录/"}]},{"title":"内心平静安详","date":"2021-05-09T02:16:45.000Z","path":"2021/05/peace-and-serenity/","text":"845bca6bbae78d3763847ae442c60a8a59a5ef285055bef7de70905dd945afb3139ed6d713f5002f18c4f9024885317ef2181e223704fd4371240e283157ebb321570344efba7ec128206b5f6ebb37c4357a69143cd2ed5645852e593db79d31db62e1ff038d83146696321c1aae940ccef739b7daa4918d578743b3e1df484d843f2a698e8c215317125901bc0d060e97876c3b7511859c9ca293001aa94e90938c14ef9678c9113e5d183005ea84c945b214be217cc819d21ad7e0abe41935a114819ae7c11a663005f4d1d18d8a1af6d30e7934cb224b129b1892d2e9ab71bc0d85be8da66f9728590da1d7067f6a5a5f1e93057a658db06767c7cf27c8fba60515a9464a12f62d6288209a605afde6759b34bf085593a50e00392d66b06e850537c169a2f30a1825ea5c21746193ae39a6741f6a02a90287bbbab3cb78c0b45e219dba4600aa3f452ab6037afbc04b13a97487718372105e15d60014f0a3838cf74fce4c82c661e35f5a4198770225b816976fb406ec1c483af77cdf53061870bafe0e0274852f8c2fcbbdb83e5bc21c96b2206a49ced74b5ae7a8fe0d4e8bfaddb3dbacc85321d4cd23a41b93d89c6c988f7c256dd103c66976b37e3ec5ddf90925827eae8a5ed64f796a732ce48b630ec5d710eac4ddcff8291c14377e1fe511194c5443b8b5f3afb99e363bfbc4be418316fbfd81a3482b51c038965aa347d3fffbb3ab792aa4c881cde44a0ac3a357c7a063bac4d25df6d91af8f753ab9713ffc5ea9ba9ce3147a3dd06fbcb6998d10f25040d133f801ea70bc7d6ab8de886954a3612c3070b74b79142555a39ecb2f3252423f714f310afc9e111157aa136779c171a437595b32c8dd35e2f1dd1ffe436c2ff73573f5a4535567107e6ca1477f3d5c56f0914beb0f15ef2f430662870dbd939ac99c4d0a7d7ad718c0831d9fb285c96fca86ff5e640bf5e25be68559afa0bf29db727088faea1dc8aec5ffc78c7cc22de11d0e5e51d4979f4aafc493c37c5625d695f793317e8744534126d05feedef5bc93e17016c4f29d7d001d77bdd2f066a75dc4a4aff522f1a7eda4a1ab4117d1ef46a692f8b2dd84c6315933b039928498839c638c0d0a18060bb0a95edf4ed6bce562413636c2e28fab1025a1c5b6e8ef8df0dff67e97fd63525840c98a02d80a26b4fe4f92486d51827e092b99d6b6bb68ee6ca49301f189fc352e5d75b09cccf522c0d5b9c196de9693d774ba859c2e133fb0d4ff0dcd5940c80693b9f2ebac2a6a174bc66b0e0374aaf379bc4f86165341f319a1d959596e5d9bc169557dc9106533157b3f2f219792f536b950119fbdf429e87d74d7dc6b57a5080994a8ac6c72b0a9a37d6f9295b2f8a44d7531503b3c77bbf3cbedba1eec7532c7634a3923c4ee710dee448d6d4b4e25cd2d78f4b586dd1c3d3669bf1324945c1cb226aa5a7b2c2bc982ccad0f4069c7f2e2282df0d62cc8f03b7f3b1058f788b7d90bb899328517f3709168ad51a5fe7003ec19fce0b72d38c96879b29adca162a343890b1328883ed5430093c7c3684139a55802add2c96c8629fd148f5cbb622fbcc7cca6e290eff1d5f7efb2d42abe40946e931999a9c6df321a5b710ecd7ee7aa43c6e9a198fb96a67d4e412cf64cc5771ffff80f0c4696e0efa2aab6640c2956d95d1ecd8e26b4907c13e1324546df1093f56e7ec0b956c0e9e304ce03c9de87ebf881b75fe9df4085985b95ff371063e472ada0f997bd528f6556e4c9ea96cf020cdbca4e0669483b45aa3c62ab41158fc21ef2c9c98dfdd4217524d5a8838277cd84344af186f59ae9e07cc5252796f83949d9f70bf7bd41687630f5c0a49542b721e6512b436ad55db347716f3e6d5f2c659588fedef6b94cab82f96d48d0deac027a6f5ed5ccc21cba0d95f1c7fc99022276cba6e4a9576f142e9b6b90f7d4e27c152ef5099b200c058543cbac3ffb703522a3ebe54690725d483e239510297216deedd4c9a34eade3d90c187b40949776596a23be5f9d2d2307c9ebe053834ec9848c5ecfa84a8d0409dff52af1c5cc9fdf7ccb09add0237484c83feab80e2ec4b1e073199ba4f005fbeb1f96443406bbbb28dcd7b4f20a630d1c588be9ac7ef065fc88871ba40dc30786377219eae32b6d9c50cca550201e5430fb83f0ce834a971a9d65750a12d633e90de05b9d7d398f601864bc5104513e439c79cf5e7f00ceebf8ae2f08f801a0bd7fd480099a7da88b3b8e86a0915eab8def3f0cff1ffb40a5b6157250ddc33bc9fdf4fa57f2dfd31e1c372df069889b9f64d8894de9c515c58f951ddf4a1a8987b34301838de789d30290fcf235c3b0dc394ace4febaf943b5bb25c1726eb78d463754884f01b5ee4a96fa151d0a32674ce771da4ad5f8ea73bd0e4f17c5656398c6cb0935a6736f73f7bb1742b9d55057e94b9b84afcede0ce8edc78927017e9f2e210005f1c89064665b746dd07865cc709b1aaea61019322ff56099ec717eb1770f77354272e1cc6a6901b79e5019c4fa930d58f68836a6cf09ee9828329e70d81a696b8fc3bf065c5521d2908b9a1667aff6ddf38123d4218a1cf19adcb5c23f7a6538d80ee99e7d161d94e1b1e7a9572869a1a46e2f1f3518b1e817e9cb805728d3f16dbb95cce0c80eef467b61ced440395b3ba91cacaf370199d59f8fd198d5e7994c3d8efbf4327249a55f16ae5c871c4ef36fd3cac0f7a40700c0e3923ae1a2896e2baeb9a3a53e1619d3f0649e95127a53b281cba2634c Hey, password is required here.","content":"<div class=\"hbe hbe-container\" id=\"hexo-blog-encrypt\" data-wpm=\"Oh, this is an invalid password. Check and try again, please.\" data-whm=\"OOPS, these decrypted content may changed, but you can still have a look.\">\n  <script id=\"hbeData\" type=\"hbeData\" data-hmacdigest=\"72aa89fa942518ef7596a12bcdf562140a9292eb1647515fc94fe444d86b3077\">845bca6bbae78d3763847ae442c60a8a59a5ef285055bef7de70905dd945afb3139ed6d713f5002f18c4f9024885317ef2181e223704fd4371240e283157ebb321570344efba7ec128206b5f6ebb37c4357a69143cd2ed5645852e593db79d31db62e1ff038d83146696321c1aae940ccef739b7daa4918d578743b3e1df484d843f2a698e8c215317125901bc0d060e97876c3b7511859c9ca293001aa94e90938c14ef9678c9113e5d183005ea84c945b214be217cc819d21ad7e0abe41935a114819ae7c11a663005f4d1d18d8a1af6d30e7934cb224b129b1892d2e9ab71bc0d85be8da66f9728590da1d7067f6a5a5f1e93057a658db06767c7cf27c8fba60515a9464a12f62d6288209a605afde6759b34bf085593a50e00392d66b06e850537c169a2f30a1825ea5c21746193ae39a6741f6a02a90287bbbab3cb78c0b45e219dba4600aa3f452ab6037afbc04b13a97487718372105e15d60014f0a3838cf74fce4c82c661e35f5a4198770225b816976fb406ec1c483af77cdf53061870bafe0e0274852f8c2fcbbdb83e5bc21c96b2206a49ced74b5ae7a8fe0d4e8bfaddb3dbacc85321d4cd23a41b93d89c6c988f7c256dd103c66976b37e3ec5ddf90925827eae8a5ed64f796a732ce48b630ec5d710eac4ddcff8291c14377e1fe511194c5443b8b5f3afb99e363bfbc4be418316fbfd81a3482b51c038965aa347d3fffbb3ab792aa4c881cde44a0ac3a357c7a063bac4d25df6d91af8f753ab9713ffc5ea9ba9ce3147a3dd06fbcb6998d10f25040d133f801ea70bc7d6ab8de886954a3612c3070b74b79142555a39ecb2f3252423f714f310afc9e111157aa136779c171a437595b32c8dd35e2f1dd1ffe436c2ff73573f5a4535567107e6ca1477f3d5c56f0914beb0f15ef2f430662870dbd939ac99c4d0a7d7ad718c0831d9fb285c96fca86ff5e640bf5e25be68559afa0bf29db727088faea1dc8aec5ffc78c7cc22de11d0e5e51d4979f4aafc493c37c5625d695f793317e8744534126d05feedef5bc93e17016c4f29d7d001d77bdd2f066a75dc4a4aff522f1a7eda4a1ab4117d1ef46a692f8b2dd84c6315933b039928498839c638c0d0a18060bb0a95edf4ed6bce562413636c2e28fab1025a1c5b6e8ef8df0dff67e97fd63525840c98a02d80a26b4fe4f92486d51827e092b99d6b6bb68ee6ca49301f189fc352e5d75b09cccf522c0d5b9c196de9693d774ba859c2e133fb0d4ff0dcd5940c80693b9f2ebac2a6a174bc66b0e0374aaf379bc4f86165341f319a1d959596e5d9bc169557dc9106533157b3f2f219792f536b950119fbdf429e87d74d7dc6b57a5080994a8ac6c72b0a9a37d6f9295b2f8a44d7531503b3c77bbf3cbedba1eec7532c7634a3923c4ee710dee448d6d4b4e25cd2d78f4b586dd1c3d3669bf1324945c1cb226aa5a7b2c2bc982ccad0f4069c7f2e2282df0d62cc8f03b7f3b1058f788b7d90bb899328517f3709168ad51a5fe7003ec19fce0b72d38c96879b29adca162a343890b1328883ed5430093c7c3684139a55802add2c96c8629fd148f5cbb622fbcc7cca6e290eff1d5f7efb2d42abe40946e931999a9c6df321a5b710ecd7ee7aa43c6e9a198fb96a67d4e412cf64cc5771ffff80f0c4696e0efa2aab6640c2956d95d1ecd8e26b4907c13e1324546df1093f56e7ec0b956c0e9e304ce03c9de87ebf881b75fe9df4085985b95ff371063e472ada0f997bd528f6556e4c9ea96cf020cdbca4e0669483b45aa3c62ab41158fc21ef2c9c98dfdd4217524d5a8838277cd84344af186f59ae9e07cc5252796f83949d9f70bf7bd41687630f5c0a49542b721e6512b436ad55db347716f3e6d5f2c659588fedef6b94cab82f96d48d0deac027a6f5ed5ccc21cba0d95f1c7fc99022276cba6e4a9576f142e9b6b90f7d4e27c152ef5099b200c058543cbac3ffb703522a3ebe54690725d483e239510297216deedd4c9a34eade3d90c187b40949776596a23be5f9d2d2307c9ebe053834ec9848c5ecfa84a8d0409dff52af1c5cc9fdf7ccb09add0237484c83feab80e2ec4b1e073199ba4f005fbeb1f96443406bbbb28dcd7b4f20a630d1c588be9ac7ef065fc88871ba40dc30786377219eae32b6d9c50cca550201e5430fb83f0ce834a971a9d65750a12d633e90de05b9d7d398f601864bc5104513e439c79cf5e7f00ceebf8ae2f08f801a0bd7fd480099a7da88b3b8e86a0915eab8def3f0cff1ffb40a5b6157250ddc33bc9fdf4fa57f2dfd31e1c372df069889b9f64d8894de9c515c58f951ddf4a1a8987b34301838de789d30290fcf235c3b0dc394ace4febaf943b5bb25c1726eb78d463754884f01b5ee4a96fa151d0a32674ce771da4ad5f8ea73bd0e4f17c5656398c6cb0935a6736f73f7bb1742b9d55057e94b9b84afcede0ce8edc78927017e9f2e210005f1c89064665b746dd07865cc709b1aaea61019322ff56099ec717eb1770f77354272e1cc6a6901b79e5019c4fa930d58f68836a6cf09ee9828329e70d81a696b8fc3bf065c5521d2908b9a1667aff6ddf38123d4218a1cf19adcb5c23f7a6538d80ee99e7d161d94e1b1e7a9572869a1a46e2f1f3518b1e817e9cb805728d3f16dbb95cce0c80eef467b61ced440395b3ba91cacaf370199d59f8fd198d5e7994c3d8efbf4327249a55f16ae5c871c4ef36fd3cac0f7a40700c0e3923ae1a2896e2baeb9a3a53e1619d3f0649e95127a53b281cba2634c</script>\n  <div class=\"hbe hbe-content\">\n    <div class=\"hbe hbe-input hbe-input-default\">\n      <input class=\"hbe hbe-input-field hbe-input-field-default\" type=\"password\" id=\"hbePass\">\n      <label class=\"hbe hbe-input-label hbe-input-label-default\" for=\"hbePass\">\n        <span class=\"hbe hbe-input-label-content hbe-input-label-content-default\">Hey, password is required here.</span>\n      </label>\n    </div>\n  </div>\n</div>\n<script data-pjax src=\"/lib/hbe.js\"></script><link href=\"/css/hbe.style.css\" rel=\"stylesheet\" type=\"text/css\">","tags":[{"name":"记录","slug":"记录","permalink":"https://jonathan1214.github.io/tags/记录/"}]},{"title":"换位思考","date":"2021-05-06T14:50:31.000Z","path":"2021/05/stand-in-their-shoes/","text":"845bca6bbae78d3763847ae442c60a8a997d26607233e9a3e6b96787f24ede94a8f0787a5ca17d99b4158a13d158e901f3fa7f8bab3822dd09d464caca6df99f033b0a202a6c8fc05cdf7520ebdb28f0bf88b8981108c7702f24c46203142e7ec6153d17f73693edc0aa4babe1180977526c94ab2804593ff6aac208b3d7d42e79ee0d13beafdda2025c945ee9e5e94a089304dae7187940a4151392cde3944b04a24e33e943ec2327cc96e8a039b47fd4620e8873d08be85ae36db4e07fe7309246fd7e6682c431826707b46d614ca41b42dd9924d6ed3d06af75da77fca47513b2c445b347ee69b6bd7a3bf4178877c03248a5e4e7b4bf5c100013e0cf31b4cfaa7ee7cd46bc673c1157bdf227ba92291371a4d9d0a2947f0d40bb25817eec9dcb9fba59fd2485a51b8cf2a9841bd1dc84b77be1b61c15edde4f7a6b7927fb7394dd978e4c32197790ba905746f66537a43d38cbb3d6388deb1ba87758a7983cbfc480dd8bfc88f3287b5532ca3178303d589e1b75a4fcc918cb8a60ae5496a2421f8215de89e90cc4cbddb70c34ba3e312eb4ceba027e17801f0b409b64d853b7090510f20f604b738047da12158112639284d67b8ba2923614e1a807861441eca48a44f4314ffb90c58769e3cacc42de778dfda1ba260109b6658a7ab468ba4e338c9e03f2bfb3dff580bf66e03b9044ab226451a6571ff9a5aa9cdb998ec4c0ccd0c033dd0e6240ee27e3eb40b890f0476f336f4eee1e4fedf6bb80e559459718b4c20d015a5fec380d37327cb34f00339041b19460ce28c5e35b0e4636dd6dd45fa67e9d565646041e5db704f2615b374797a1f066101776b9d2ced1198af960e12d0488097ff12d96097553b0a11061dfeb01e66fa00923939df2be3f6082cf9ae12f198b39d1864f44aa487ecc635bd9afb8419ef7b7618e62bdeaa1c11ee780ea3b68d844046ae18152c6c0f4f51601b2ae9eb104239b04b1a8b599fa4a20b9bf7f27357b302db0edee9df79b559083af98e1676485d7c06f1354c53924223684311ce6c209ff9605566c5ebac312b3258445967195522d3e8425b89488b539c760e88bcf443426c839502b7fb74cae41a0aee609ff99c7a2af5205a71a92fb390293315432ce190e8fb63e2e37751dddd3acfe169fb259f61e76f238f2148b12c4fa832e5795ebe71e3342765e1358a830a304dad93d508ad6b0bdad2e689c084a80c50514fb387d20dd1ed7811d90293dbc5876c8f4dc96c463943c6127b690f3660c9de007accfe810c478287cc2b9425425657d72ba6e3d28e19e751f3f7cbfd5cdc6453e9a74f407667855603078806a34eee9e374c2e1295be4277501e4a6a208a23ede1145540717bab6548b5703adacf23e1fbba8949af8d3b661e01b86438edea689225df0692cb5cc4ea0c7b989194aa42c8f22ac3624392da95399e33daf4c5d3aa1aa79c4aae4db0ee2fff1fc25eafa84fbd9b34bec569d2776cd30c04b2315b8d2d1eab5b9a2eeca459574715f283e2ed9cb8cbb81d4615d4fbb5dd3f0ff2db867fc84af34de7269efcc3ccfab43d8bfa472decff428479e2da0f63eae3bb1900f984aedc9cbfb7e9248347a7ac9d95e5be937f2da023ff275f70d808315fb728e8a5f371de4dd838128bcb8047d5042876851eae33077875140562f63cecfff0da74cbbe6418c5e0301b511bd320871f748da9128a4c26c95bf28e6cdc8342846aada159ed7344f3ffa35c49e45e9844b9ce3c8fd54b72ce5019ce80310264cb1aa2083156836f0b4ee1b575cb6e2817ee37c18dcc3fac43db92ae022d3cf5e31fd7b47dce5fe9b281e13d0d80f7e4770eed8c5953f7a1083366926101689312ae83a396a6c217e4972b0e78f00af00a8835cde32381322ef6fd5c05ed643e77819c25b713613d3559a1f684cbcf106ba6e3f1fbc701d8b8e030945b4fb9160348af3deb3e58414a73dac6d11064e5c4da22e692d06482c5a4253207b0d60e41f91559c6a79acc9c0fa7093b9545f8074964add901d38ccaedce58d484a9413800194d0ef885aedd83b2da29532f33f5dceb6da16821813e0ffcb81fe09825c441c93a399f8afc53875fadbdfd89b3ac7f113e7b47c4cf113830f008525fb700f27e78fede8c4f97d560535bf5dfd723a41b909bb3c8b480f189fda3bacf231ad7d2b0a51d4a06516905fe14d22d28539f86dd82fb1e105f0b0c181fee9c5770baab755bba4bf459c4d8734aeaa61dea549c65be0570f80a093eeede6f43cd1250503006442110ff200b622f35eeed95d02c803c48b73778c4e2a86dddaeeb026b5ada06bf4465af4429a39ee375082ae9404268f48c5f073e873d84e0ad805478ee1e1b80558f44103101c559d96fd7050adc4d89292908e39d5fdd678b1a4ef232b560f77b6eb6d4daa7b5eef16593a64df933fb64b034649eaaec4d35b7ce218079934ac128c118cfb198f1a9b46d7725b01d5f3c8921a552640f29eb59e41bd51db62bca814dc23ba43715fccb47013319cf9bf0cdee2a0f7000ebae6d879c1226e5c3ab434d685a79cfebb65b31c1ca7c9e8d59258439bde74a2089642e38fc9fff78f7d5a1bd68bda22e87ebf6efdf2048e7db6c80809264e7c2162822c67bd987bf019044f99a6636a00fcfcfff83167e591b4aeee77fe07f0ccc4b2b122ce522ef84d4d3d5690e9711dc6f52368472dd2b3e819e7ea4a0cd59b3d5b98250ec6a99c660ac0771c75fcd5b105b4487ce93dac4c36c277d64aadc2d6cebafd7b6499a0609740d09bb66fecf067c78d07c8a5d2ede211dac06074e94933bcaf0b23245a3bcac381d47be1850fbe09a60640288985f6f97299e033252d0452a776d5e87cf419419f2b215de32115b99143d30243fd81caa9e022337821a9f9716e18507bdd0d2495cff513aeb7bdcd08b44867f71c7c77d52a75136ca2b9f72f82cb8391b8290f3b6bc1455149ecd232941cbc4ab823bcfd47c162b1d61e3cc4f5bd08ed818d4827996624160c160797a71346bbb6df090e3331078a4f515616e7e0d5 Hey, password is required here.","content":"<div class=\"hbe hbe-container\" id=\"hexo-blog-encrypt\" data-wpm=\"Oh, this is an invalid password. Check and try again, please.\" data-whm=\"OOPS, these decrypted content may changed, but you can still have a look.\">\n  <script id=\"hbeData\" type=\"hbeData\" data-hmacdigest=\"4be191d8df86bdb539f6a0b4fdd0c8012e51de69f58f386b4c518a7c69ce2d0f\">845bca6bbae78d3763847ae442c60a8a997d26607233e9a3e6b96787f24ede94a8f0787a5ca17d99b4158a13d158e901f3fa7f8bab3822dd09d464caca6df99f033b0a202a6c8fc05cdf7520ebdb28f0bf88b8981108c7702f24c46203142e7ec6153d17f73693edc0aa4babe1180977526c94ab2804593ff6aac208b3d7d42e79ee0d13beafdda2025c945ee9e5e94a089304dae7187940a4151392cde3944b04a24e33e943ec2327cc96e8a039b47fd4620e8873d08be85ae36db4e07fe7309246fd7e6682c431826707b46d614ca41b42dd9924d6ed3d06af75da77fca47513b2c445b347ee69b6bd7a3bf4178877c03248a5e4e7b4bf5c100013e0cf31b4cfaa7ee7cd46bc673c1157bdf227ba92291371a4d9d0a2947f0d40bb25817eec9dcb9fba59fd2485a51b8cf2a9841bd1dc84b77be1b61c15edde4f7a6b7927fb7394dd978e4c32197790ba905746f66537a43d38cbb3d6388deb1ba87758a7983cbfc480dd8bfc88f3287b5532ca3178303d589e1b75a4fcc918cb8a60ae5496a2421f8215de89e90cc4cbddb70c34ba3e312eb4ceba027e17801f0b409b64d853b7090510f20f604b738047da12158112639284d67b8ba2923614e1a807861441eca48a44f4314ffb90c58769e3cacc42de778dfda1ba260109b6658a7ab468ba4e338c9e03f2bfb3dff580bf66e03b9044ab226451a6571ff9a5aa9cdb998ec4c0ccd0c033dd0e6240ee27e3eb40b890f0476f336f4eee1e4fedf6bb80e559459718b4c20d015a5fec380d37327cb34f00339041b19460ce28c5e35b0e4636dd6dd45fa67e9d565646041e5db704f2615b374797a1f066101776b9d2ced1198af960e12d0488097ff12d96097553b0a11061dfeb01e66fa00923939df2be3f6082cf9ae12f198b39d1864f44aa487ecc635bd9afb8419ef7b7618e62bdeaa1c11ee780ea3b68d844046ae18152c6c0f4f51601b2ae9eb104239b04b1a8b599fa4a20b9bf7f27357b302db0edee9df79b559083af98e1676485d7c06f1354c53924223684311ce6c209ff9605566c5ebac312b3258445967195522d3e8425b89488b539c760e88bcf443426c839502b7fb74cae41a0aee609ff99c7a2af5205a71a92fb390293315432ce190e8fb63e2e37751dddd3acfe169fb259f61e76f238f2148b12c4fa832e5795ebe71e3342765e1358a830a304dad93d508ad6b0bdad2e689c084a80c50514fb387d20dd1ed7811d90293dbc5876c8f4dc96c463943c6127b690f3660c9de007accfe810c478287cc2b9425425657d72ba6e3d28e19e751f3f7cbfd5cdc6453e9a74f407667855603078806a34eee9e374c2e1295be4277501e4a6a208a23ede1145540717bab6548b5703adacf23e1fbba8949af8d3b661e01b86438edea689225df0692cb5cc4ea0c7b989194aa42c8f22ac3624392da95399e33daf4c5d3aa1aa79c4aae4db0ee2fff1fc25eafa84fbd9b34bec569d2776cd30c04b2315b8d2d1eab5b9a2eeca459574715f283e2ed9cb8cbb81d4615d4fbb5dd3f0ff2db867fc84af34de7269efcc3ccfab43d8bfa472decff428479e2da0f63eae3bb1900f984aedc9cbfb7e9248347a7ac9d95e5be937f2da023ff275f70d808315fb728e8a5f371de4dd838128bcb8047d5042876851eae33077875140562f63cecfff0da74cbbe6418c5e0301b511bd320871f748da9128a4c26c95bf28e6cdc8342846aada159ed7344f3ffa35c49e45e9844b9ce3c8fd54b72ce5019ce80310264cb1aa2083156836f0b4ee1b575cb6e2817ee37c18dcc3fac43db92ae022d3cf5e31fd7b47dce5fe9b281e13d0d80f7e4770eed8c5953f7a1083366926101689312ae83a396a6c217e4972b0e78f00af00a8835cde32381322ef6fd5c05ed643e77819c25b713613d3559a1f684cbcf106ba6e3f1fbc701d8b8e030945b4fb9160348af3deb3e58414a73dac6d11064e5c4da22e692d06482c5a4253207b0d60e41f91559c6a79acc9c0fa7093b9545f8074964add901d38ccaedce58d484a9413800194d0ef885aedd83b2da29532f33f5dceb6da16821813e0ffcb81fe09825c441c93a399f8afc53875fadbdfd89b3ac7f113e7b47c4cf113830f008525fb700f27e78fede8c4f97d560535bf5dfd723a41b909bb3c8b480f189fda3bacf231ad7d2b0a51d4a06516905fe14d22d28539f86dd82fb1e105f0b0c181fee9c5770baab755bba4bf459c4d8734aeaa61dea549c65be0570f80a093eeede6f43cd1250503006442110ff200b622f35eeed95d02c803c48b73778c4e2a86dddaeeb026b5ada06bf4465af4429a39ee375082ae9404268f48c5f073e873d84e0ad805478ee1e1b80558f44103101c559d96fd7050adc4d89292908e39d5fdd678b1a4ef232b560f77b6eb6d4daa7b5eef16593a64df933fb64b034649eaaec4d35b7ce218079934ac128c118cfb198f1a9b46d7725b01d5f3c8921a552640f29eb59e41bd51db62bca814dc23ba43715fccb47013319cf9bf0cdee2a0f7000ebae6d879c1226e5c3ab434d685a79cfebb65b31c1ca7c9e8d59258439bde74a2089642e38fc9fff78f7d5a1bd68bda22e87ebf6efdf2048e7db6c80809264e7c2162822c67bd987bf019044f99a6636a00fcfcfff83167e591b4aeee77fe07f0ccc4b2b122ce522ef84d4d3d5690e9711dc6f52368472dd2b3e819e7ea4a0cd59b3d5b98250ec6a99c660ac0771c75fcd5b105b4487ce93dac4c36c277d64aadc2d6cebafd7b6499a0609740d09bb66fecf067c78d07c8a5d2ede211dac06074e94933bcaf0b23245a3bcac381d47be1850fbe09a60640288985f6f97299e033252d0452a776d5e87cf419419f2b215de32115b99143d30243fd81caa9e022337821a9f9716e18507bdd0d2495cff513aeb7bdcd08b44867f71c7c77d52a75136ca2b9f72f82cb8391b8290f3b6bc1455149ecd232941cbc4ab823bcfd47c162b1d61e3cc4f5bd08ed818d4827996624160c160797a71346bbb6df090e3331078a4f515616e7e0d5</script>\n  <div class=\"hbe hbe-content\">\n    <div class=\"hbe hbe-input hbe-input-default\">\n      <input class=\"hbe hbe-input-field hbe-input-field-default\" type=\"password\" id=\"hbePass\">\n      <label class=\"hbe hbe-input-label hbe-input-label-default\" for=\"hbePass\">\n        <span class=\"hbe hbe-input-label-content hbe-input-label-content-default\">Hey, password is required here.</span>\n      </label>\n    </div>\n  </div>\n</div>\n<script data-pjax src=\"/lib/hbe.js\"></script><link href=\"/css/hbe.style.css\" rel=\"stylesheet\" type=\"text/css\">","tags":[{"name":"记录","slug":"记录","permalink":"https://jonathan1214.github.io/tags/记录/"}]},{"title":"一份感人的致谢","date":"2021-04-19T15:14:00.000Z","path":"2021/04/a-touching-acknowledgement/","text":"最近被一张图刷屏了，那是 17 年一个博士在论文中写的致谢，我看了很多遍，但总是不忍卒读，真的有很多人生活得远比我苦，也远比我努力，看了致谢的内容，总感觉自己做得不够好，还不够努力，大概因为还有人为我分担责任吧，那现在呢？我想没有了，要自己来了。 致谢全文如下： 在受到广泛的关注后，作者又写了一份回应，全文如下： 看完这些，心中涌起种种感情，却又不知道从何说起，把我感受到的都列出来吧。仅观察他整个博士前经历的人生，只能用苦来形容，太不容易了，但好在生的时机不算坏，上升的空间是存在的，社会也提供了很多帮助，好在好在读了个好专业，博士也是机器翻译，现在人在腾讯 AL Lab 了，前途钱途一片光明，如果选择了所谓的天坑专业，实在是难以想象今后还会有多么困难的人生，读了这么久的书，却发现能挣到的钱完全不能满意……由此看来，选择实在是太重要了，宇宙机果然牛逼，算是穷人家的孩子改变命运的最好选择了，或者不叫改变命运这么大的名字，叫赚到足够多的钱。 反观自己，只有惭愧二字。我没有经历过那么困难的人生，前17年半一直有人在替我承担几乎所有的责任，我只是按步就班的前进，甚至还能够离开家乡去广东念书，算是开阔了一点视野，虽然最终还是回去中高考了。我不需要为了读书的钱操心，我一直被告知的就是读好书，钱的事情不用我管，现在看来，这实在是一种莫大的幸福了，我若再要求些什么，那就是无耻了。但是，有此种种不差的条件，我却做出了什么事呢？现在的我，抱着一颗混下去的心，只想做一个差不多的人，做到差不多的事情，什么都是差不多，真是太糟糕了。 努力考上一个大学，HIT，还算不错了，大一迷迷茫茫，混就完了，成绩不好不差，暑假却突然发生了大事，我觉得不能再这么下去了，于是专心念好书，混到大三发现自己能保研了，那得开始找老师了，很幸运被现在的老师接收了，这对我来说是非常重要的承认，抱着报恩的心态，几乎所有工作上的安排我都会听老师的。好像突然间就到大四了，今天已经是 4 月 19 日，距离毕业也就是两个月，站在现在这个时间点上，回顾自己的大学四年，平平无奇，虽然不是一无所获但又说不出来自己到底收获了什么，最致命的问题是我找不到自己存在的意义了，好在这种想法还不至于把我从天台上推下去，我还是很惜命的。 言至于词，也没什么好说的了，夜晚是最好的反思时间，只是到明天又会过着同样的日子，日复一日，年复一年，注定平庸一生。究竟需要什么样的改变呢？我想不到答案，所以我正在寻找，关于我存在的意义，关于生命存在的意义，以及我的人生目标，我的未来。","content":"<p>最近被一张图刷屏了，那是 17 年一个博士在论文中写的致谢，我看了很多遍，但总是不忍卒读，真的有很多人生活得远比我苦，也远比我努力，看了致谢的内容，总感觉自己做得不够好，还不够努力，大概因为还有人为我分担责任吧，那现在呢？我想没有了，要自己来了。</p>\n<a id=\"more\"></a>\n<p>致谢全文如下：</p>\n <img src=\"/2021/04/a-touching-acknowledgement/a_touching_acknowledgement.jpg\" title=\"a_touching_acknowledgement\">\n<p>在受到广泛的关注后，作者又写了一份回应，全文如下：</p>\n <img src=\"/2021/04/a-touching-acknowledgement/a_letter_to_efriends.jpg\" title=\"a_letter_to_efriends\">\n<p>看完这些，心中涌起种种感情，却又不知道从何说起，把我感受到的都列出来吧。仅观察他整个博士前经历的人生，只能用苦来形容，太不容易了，但好在生的时机不算坏，上升的空间是存在的，社会也提供了很多帮助，好在好在读了个好专业，博士也是机器翻译，现在人在腾讯 AL Lab 了，前途钱途一片光明，如果选择了所谓的天坑专业，实在是难以想象今后还会有多么困难的人生，读了这么久的书，却发现能挣到的钱完全不能满意……由此看来，选择实在是太重要了，宇宙机果然牛逼，算是穷人家的孩子改变命运的最好选择了，或者不叫改变命运这么大的名字，叫赚到足够多的钱。</p>\n<p>反观自己，只有惭愧二字。我没有经历过那么困难的人生，前17年半一直有人在替我承担几乎所有的责任，我只是按步就班的前进，甚至还能够离开家乡去广东念书，算是开阔了一点视野，虽然最终还是回去中高考了。我不需要为了读书的钱操心，我一直被告知的就是读好书，钱的事情不用我管，现在看来，这实在是一种莫大的幸福了，我若再要求些什么，那就是无耻了。但是，有此种种不差的条件，我却做出了什么事呢？现在的我，抱着一颗混下去的心，只想做一个差不多的人，做到差不多的事情，什么都是差不多，真是太糟糕了。</p>\n<p>努力考上一个大学，HIT，还算不错了，大一迷迷茫茫，混就完了，成绩不好不差，暑假却突然发生了大事，我觉得不能再这么下去了，于是专心念好书，混到大三发现自己能保研了，那得开始找老师了，很幸运被现在的老师接收了，这对我来说是非常重要的承认，抱着报恩的心态，几乎所有工作上的安排我都会听老师的。好像突然间就到大四了，今天已经是 4 月 19 日，距离毕业也就是两个月，站在现在这个时间点上，回顾自己的大学四年，平平无奇，虽然不是一无所获但又说不出来自己到底收获了什么，最致命的问题是我找不到自己存在的意义了，好在这种想法还不至于把我从天台上推下去，我还是很惜命的。</p>\n<p>言至于词，也没什么好说的了，夜晚是最好的反思时间，只是到明天又会过着同样的日子，日复一日，年复一年，注定平庸一生。究竟需要什么样的改变呢？我想不到答案，所以我正在寻找，关于我存在的意义，关于生命存在的意义，以及我的人生目标，我的未来。</p>\n","tags":[{"name":"无题","slug":"无题","permalink":"https://jonathan1214.github.io/tags/无题/"}]},{"title":"焦虑之下如何面向未来","date":"2021-04-15T15:19:47.000Z","path":"2021/04/under-anxiety-how-to-face-future/","text":"845bca6bbae78d3763847ae442c60a8af3295f191b776ffa94ff959b277d8015e4990e0ad6b651e767dbc04fee3d5597fa6c46b92011b9078e8e2d746b12db47f4baab2a0ec0e09307503e50a1057063e7b896e0fa888bfbe0e39f81387c115b156dcae9daaf61b2aa210286a025dff5410eb0e23f38e7f8ccf42a8aaad95f2b71e607227e7c28c5b32fe1bc7f2c0a7ab3fe1609036edce3881e92d0bf883ed649add5acee215369796c355c86478f189dacfee2e2caae89ec8516261ed27122c1dd6079044d59c2fc85e9e607caf18e60676dabe103449871dfe433f7657d57e3cc64c1d75c61b39afcb02ff3b831538d402bead3638f8412103231ee9016ec62ee3a8481029152bf71f214b9dd6374d9003e8de4daa0a3d5a735d28024bbcdf3191e19c382580f3145c23611d7977bc4699d7185c4c96f2bbbbb55dc577cea03ff2acc2e472d4074b51044bd1e7f9353ceed1793cc353acc1c6c27c2db3c18057b0934e4ff44f588cea38b5f2e0fb6c132cab9c93edcfd13f44bd4c3ded8aa6b7ea49ffc3846eb5022537bc8ef9d95b0a77cec63fd92797d2006d8a06511db4b191b02762c6e47566ccd9a2b6479ef23f2afe71dd1de40643bb272a233dc42b6d3a6cf6303ee9930f623071699d66282bfa97e542f3d48c3548699f8fec8c67ea16b2bb9a15b0b07af4283c1ce63870d5c45d09fe2d686f0ade1950973209759dbff86cbc659989a5042fcab9ad9e7052b4a5c4d888a35db57eff0104f6fcc83cf27fbe3413f8b3b2bb37e3552ce37b052741977fc2f90ff213e1665e713fca0d361a642eb27055eddc881604c3ebe9917c1f4739ae8d0e9040c1d0e8f4dfc607b77c6650a1c6b8a66b619be6219ba727169957ce35852e6e01ce5dae6755499a1eab1f4ecc0325cd28666c37ca5d993a4561c07566c6ba5af2955ca1a0504e18e1e22f90d283bd251734788ec89031e96daa3d17c63b14ded9e801918355e7717a7c87953199080cbcd5722122e3d29e052fca674da6d77c48c9808d7b6a93f730fe144b174caf32aefe02295e8fdcae6e5dc0a81989f1700dd21f12c74d81857d6f5a17ff6b04ad4e86f07bc845e34538ee6db3376ff7c8011be58c2e4dc03c9028794ee17ed75b548c588a37b6504590dd8f92b8cf15c2b7429afdd1b04c7acdfa16ad91c236835ba485e7f2ce435fd624d24cd4b05a2eebba9ffe65e07c1f6f4e0568b5a6a243b1d656da7245c24f1ab8dae59c8f7d20704b0680f217737cd152e59eef93ee5b2b80210e6e19f35160d76c68b96332b9992c04621fefed4eaa2d26785837293420cb59dc70bd91906e469ead79b11bb17a6e0c5fe6eb959b39c22dae040347d93fd08dd633e0788c1b7f4c630c5e11efd8a3e71872508cab47231af584d0809838e56729dd7c06a2dc9d0a5b88ab0093054bab6bdc83accbe19c0f66208f9537725c7383995b0219d219432b7780cc595f2562b644a734cf3300e892444a7cad0d25269b8e1dc1f9e8a41caf39f5d0c624b1d03ec16d04c0d1061e723698249780af4dcd513e11b7e0404036c0fb1a973cca40c0d6e10416c7796ccc096249fd51bc1b03509c455a78a032c04d24d0dfc0228770d18dd0bbfa654131629227e35369c67de0dd7a987d503bca57eef651304b26debe000de24e9ae11bea6a6bbd09432d68b81cf3a11e990fca187ff22b02188574e0ff1ea966ad2837bb12ddde0d5b9ecd7575ebd2fb3e6b7229722eb2978283c513e4cc48134bf672221207d33bd3ca63fff8734fbaa9a2240d41a22b635506f8c15f4636c094e5dc6e75cd5dce46fce26e98207b0d661d02cc5177098704fa56df1246f3d057dd2eb3c6493bc303b371fd3ba6a2d0ef1d0e884d7b4f69ba81d06623e2b477c02ddf9c2f57ad14b42025403bc27091c12ffad74b930ced6f5760f0fc201cd929b6b11f4fa5825257cb549c32f6306af69f3086b6942f2f2d33f9c3652f2fea8505f460bf487dedcd61bb286098e731cf64ed9d83a44b27ba07ad5809f651ce4f8e3dfb4cba2f61a6b019ab12d7f1f0ae2d344dd63bdf96c12a1f25391e461da586db5b35b9d9c15035d72db3f8db3b6078035f39c9534beedb1cd27da70c92f09e0c98465386cdca22caf8532db439508dca7292b7fd0abcf237d96008e10bc144beca844cbcccee383c0230ca77c80114d32d4b49d4f4962efc1c03a8cc3fb45500f3b4da1aba3b69769a757 Hey, password is required here.","content":"<div class=\"hbe hbe-container\" id=\"hexo-blog-encrypt\" data-wpm=\"Oh, this is an invalid password. Check and try again, please.\" data-whm=\"OOPS, these decrypted content may changed, but you can still have a look.\">\n  <script id=\"hbeData\" type=\"hbeData\" data-hmacdigest=\"50d4c70ed16328335cdeefd6b886cbb7e564017114cd765dfd135bc3ed0b4f9d\">845bca6bbae78d3763847ae442c60a8af3295f191b776ffa94ff959b277d8015e4990e0ad6b651e767dbc04fee3d5597fa6c46b92011b9078e8e2d746b12db47f4baab2a0ec0e09307503e50a1057063e7b896e0fa888bfbe0e39f81387c115b156dcae9daaf61b2aa210286a025dff5410eb0e23f38e7f8ccf42a8aaad95f2b71e607227e7c28c5b32fe1bc7f2c0a7ab3fe1609036edce3881e92d0bf883ed649add5acee215369796c355c86478f189dacfee2e2caae89ec8516261ed27122c1dd6079044d59c2fc85e9e607caf18e60676dabe103449871dfe433f7657d57e3cc64c1d75c61b39afcb02ff3b831538d402bead3638f8412103231ee9016ec62ee3a8481029152bf71f214b9dd6374d9003e8de4daa0a3d5a735d28024bbcdf3191e19c382580f3145c23611d7977bc4699d7185c4c96f2bbbbb55dc577cea03ff2acc2e472d4074b51044bd1e7f9353ceed1793cc353acc1c6c27c2db3c18057b0934e4ff44f588cea38b5f2e0fb6c132cab9c93edcfd13f44bd4c3ded8aa6b7ea49ffc3846eb5022537bc8ef9d95b0a77cec63fd92797d2006d8a06511db4b191b02762c6e47566ccd9a2b6479ef23f2afe71dd1de40643bb272a233dc42b6d3a6cf6303ee9930f623071699d66282bfa97e542f3d48c3548699f8fec8c67ea16b2bb9a15b0b07af4283c1ce63870d5c45d09fe2d686f0ade1950973209759dbff86cbc659989a5042fcab9ad9e7052b4a5c4d888a35db57eff0104f6fcc83cf27fbe3413f8b3b2bb37e3552ce37b052741977fc2f90ff213e1665e713fca0d361a642eb27055eddc881604c3ebe9917c1f4739ae8d0e9040c1d0e8f4dfc607b77c6650a1c6b8a66b619be6219ba727169957ce35852e6e01ce5dae6755499a1eab1f4ecc0325cd28666c37ca5d993a4561c07566c6ba5af2955ca1a0504e18e1e22f90d283bd251734788ec89031e96daa3d17c63b14ded9e801918355e7717a7c87953199080cbcd5722122e3d29e052fca674da6d77c48c9808d7b6a93f730fe144b174caf32aefe02295e8fdcae6e5dc0a81989f1700dd21f12c74d81857d6f5a17ff6b04ad4e86f07bc845e34538ee6db3376ff7c8011be58c2e4dc03c9028794ee17ed75b548c588a37b6504590dd8f92b8cf15c2b7429afdd1b04c7acdfa16ad91c236835ba485e7f2ce435fd624d24cd4b05a2eebba9ffe65e07c1f6f4e0568b5a6a243b1d656da7245c24f1ab8dae59c8f7d20704b0680f217737cd152e59eef93ee5b2b80210e6e19f35160d76c68b96332b9992c04621fefed4eaa2d26785837293420cb59dc70bd91906e469ead79b11bb17a6e0c5fe6eb959b39c22dae040347d93fd08dd633e0788c1b7f4c630c5e11efd8a3e71872508cab47231af584d0809838e56729dd7c06a2dc9d0a5b88ab0093054bab6bdc83accbe19c0f66208f9537725c7383995b0219d219432b7780cc595f2562b644a734cf3300e892444a7cad0d25269b8e1dc1f9e8a41caf39f5d0c624b1d03ec16d04c0d1061e723698249780af4dcd513e11b7e0404036c0fb1a973cca40c0d6e10416c7796ccc096249fd51bc1b03509c455a78a032c04d24d0dfc0228770d18dd0bbfa654131629227e35369c67de0dd7a987d503bca57eef651304b26debe000de24e9ae11bea6a6bbd09432d68b81cf3a11e990fca187ff22b02188574e0ff1ea966ad2837bb12ddde0d5b9ecd7575ebd2fb3e6b7229722eb2978283c513e4cc48134bf672221207d33bd3ca63fff8734fbaa9a2240d41a22b635506f8c15f4636c094e5dc6e75cd5dce46fce26e98207b0d661d02cc5177098704fa56df1246f3d057dd2eb3c6493bc303b371fd3ba6a2d0ef1d0e884d7b4f69ba81d06623e2b477c02ddf9c2f57ad14b42025403bc27091c12ffad74b930ced6f5760f0fc201cd929b6b11f4fa5825257cb549c32f6306af69f3086b6942f2f2d33f9c3652f2fea8505f460bf487dedcd61bb286098e731cf64ed9d83a44b27ba07ad5809f651ce4f8e3dfb4cba2f61a6b019ab12d7f1f0ae2d344dd63bdf96c12a1f25391e461da586db5b35b9d9c15035d72db3f8db3b6078035f39c9534beedb1cd27da70c92f09e0c98465386cdca22caf8532db439508dca7292b7fd0abcf237d96008e10bc144beca844cbcccee383c0230ca77c80114d32d4b49d4f4962efc1c03a8cc3fb45500f3b4da1aba3b69769a757</script>\n  <div class=\"hbe hbe-content\">\n    <div class=\"hbe hbe-input hbe-input-default\">\n      <input class=\"hbe hbe-input-field hbe-input-field-default\" type=\"password\" id=\"hbePass\">\n      <label class=\"hbe hbe-input-label hbe-input-label-default\" for=\"hbePass\">\n        <span class=\"hbe hbe-input-label-content hbe-input-label-content-default\">Hey, password is required here.</span>\n      </label>\n    </div>\n  </div>\n</div>\n<script data-pjax src=\"/lib/hbe.js\"></script><link href=\"/css/hbe.style.css\" rel=\"stylesheet\" type=\"text/css\">","tags":[{"name":"记录","slug":"记录","permalink":"https://jonathan1214.github.io/tags/记录/"}]},{"title":"生日饭之后","date":"2021-04-11T15:11:01.000Z","path":"2021/04/after-the-birthday-dinner-hongchi/","text":"845bca6bbae78d3763847ae442c60a8ac7d322a9d933792db462772d39e13bb28b3cdc1883e06d3f389a9d3042a0b97cf02d16f70b08531f64686fcaddfa59f17d1abf5d4dbb22f26640b169b58b6c957ce241850833ff3f48bac9a05321b8791221c37df14b2e8e068df41e0782631f78e455a85bc3f82d746336c6bcf71dbbfee69d0b424e2a665c9df0b3d8bbcebdd0ef5e5bea48f0703e3651cd2ee75f1272b3405d9deee8bbce0b2e9e43fa9501e2656e2cf1234982a0e8d3b9195cfdebd4f04922ff424a583149076f60de2cbb29a1cd1d591a43fc364ce17532705cc048f15f2451cb1f42147986e017fcdd1680f235f9c3b0a30d38341512b3609108bf5600335eae8c2d41bfe06997ca851dc3782e757f453de9a0723e633778c6b8484b4611dc17b1f35719597365212b191605f9decac906745922e37f0915bd18ccc336bfdc2dc795745cf5cd0548cdde47dceb40443bee725d357348e94be75c740740f8c107613a995bd853a036a54ec514fe70adf148cd017c35aafa40886389cebf08f5d7e3c0b4d1410c8a05fbc41ecb305a91f547af05e0fd46064352c082153daa6a2ff2f5035fde75475e80a84b771eae5ee6d355cb0670185a8e44ee13f23e818d48f55d126ecedcdbdd7a6d716b65dc00b757960c96e6236220f91f9f5ac0071879d722a11d46019e57074f3e82878bf2a4829670f8ff7b8dc1dad846720be6abf34d623e1f406e388e0e8e942d0ab2edd0a152f2453ae274d98b9531a07700a58d0ca152d650cc242cc943bddb88df0713e29e133b31d6331361c233f4d65d4fc6abe25a1f2a8433c67565da5f2a48ea6e57b1f536a50e87a835d31a5dd6774b755cfdbddc93bea7447a50325ba814b02a41eb55e444f9dca0777ed697285c2caade82c6fd097dc03d99db480cf6f4a3ba881a51b3a159aa2298acce730001a51637acce969b8895ccbe0e5d22e7de7d9d4d6df1be34c5b2f0fcad731e2c13f22c0e21d1702e535e1b956f2999afea29479aa775ddd850d77c455fee1694824bb093f6478ef31946aa2fe2926a76d018f7fa2f39c49582ed0731ad874b74b7633070fcc3e0dee1b223171d7e2693bab01c6e8eb8e374239eb05d96b636d8b5f55664a62caea96a2b92662780bc29f8d8ee40a7fc4492ab128205e9f4370af0ef7f38e560f3e9cbb46ac9ef0edc836bcf19ae4d5e9acb9585a3f5ad5944f9454977ac3ffe6946a39deae9405f942171dae4242fc15268a619cf3e387e97b776d565fcb6fc8a488f2685333341d45c7ab29a39593f64124b67cbb9dc159fb9a3431e53104a4fa93067d7f1acae037e398b1618967bc7739eb5c75ef73376969c4b49b04e806ec01847fd3bca950dd9978f3e7da69d59bc6b540307d501faeb8f4a973fe00d80af89d43cbb9b70c269fa6a5c6a43fd15b221c232956888615264556327daca71789ced30aeec8c9e9d58063c7d016412d28bb0b73278e3bf64ac78cb8225c5e86f0adda8c04532453392866d5ebb6fbf1703709931521652d376e3d4e038b83240a168633d8a7a1016c90e6d75530925bccb1e751654612f44096f850ad52c8c93cc6a4bc2406cf25ad3848b947b5eb103bcea35e249310329581406cf23069ac367cb68766506e137b14de7d0870ac026574cf13977921db9638eb2b8d463cb7168d7edee9709dd904683179649f5e68a6530590447e14cc9aaef33d59e9c9bada5acf95d44fb59a1c7bf6f5afaa632ce7741a05926274c774536ec36dd58e2f522c7f241484a45a0c0dc4d8ba1582928e23784fffa2459b6c9e0b0f82a61d2fbf124bb306c8a8161f029cb092d976ae0bc327e3d3a786bca723068fb48569b6923da8721030f826dd144ddcd786c2ee6966c239102350ad503d2d18fe481bbde7f15d6dfe5d213a0d149facc6a32192a9b975c119da4117b2a004bd21b0a9ab191b17e55d79b742e1afa5166bf7810e85a12b953da135e787dd3b037298c09164c5d3b854ccbd62b425e460c071840e3140ee9bd289b207570be5b736d3e8350eb544eaeeb83c0669cd879ea59342aa5f995f29a8c3769c05e86b8cb3ed6349b9bb40b776a91e8ee1e98f78666dfa66f43ee58c9bef8fdb3f706799f9e05caa152b4fcf729ea12608d72f0c3065554157e0c1bae1f2e77827dc338feae2f66c14dfb2d8b12cc7e70c8b50c8a526c9abe2eb86f9ec4e321f75772e4e4d24d441a4328af45b39285988840a86ceeeaae7e88a40baf9b5b7819f55368509b960db0b715f97910a2daefb78776df6352d17d4e16a0663d14651e2377b9cc76bcb2e79f9b5b8b8a66065bff033be6dd23ea8130c2b23513e8d5ed4b9e31e13a688b8467d17372ebd418bf7a93c0b72de5ebf02993a1515e7c871defd86e3dd7adb92ec9b3b68b4692a1dc9bf8b5b794fed0eefb2b291d561951c1174a0dccfafab6e8bd408008959094e7b8e1a2fee4f2691e6e92e88784233f34155b8495488ecf64f3f836641662a54586f728de12e11fb5e4c620f3823b17e8375ccdd2421d1b8592a797fed70bc9a5187b1da33b6513a35ac218c83379cd189c44b35579afca131ae47d070ecebdc75743ebb182ca5195349c22950f0bf8dafcb9712f5e3ed9eafff650f1ea5b79d6b2e72a067ef92d335cb4ebf5ef6983bb431cb4286d4fe45571dd419be2eb597fdc08f70f736f13097697abf267fd68461a8647c5ae897221ce249d4ecfd473d83a31413ec1aa85cb53656cff9b6d7b6caf248828afdca2d12c1b7a7a992c17b84e0f555a17f841e4dbe416142a635e8ccc54a58bd794bef5c43a6858fb7ac2c85537cab08ddabdd5af74620f7a79220874c9ab003ac77718bb8619a28a1db23867ea217e81b5dd637b1ea70676e39936d9a6f733276dfd38d4660a949b5ebd036800d130108e5bf0b23b8d6e3aa76cee70f78fe9a5eefedcd3cfb33566272f6e5f942f4c6dbf8603634c5ae59e487daaa4638bf82243fed7ac98e4df17aa0cef4544e8b6b87c74530d97d25c5efc1f811459dd686f6e69a6847479dac64322c06d1d0741e8e18f87ec747500cb54f5c190d05f4dbd5d0a59c44b6fb66b9229cdef019596d659e682066583bc3e4ec68de6877e292de1495b07e1f9bedbfebdef19daeccadba7b66ec655cd5cf102fe0563e64e0d049a905091206b8944 Hey, password is required here.","content":"<div class=\"hbe hbe-container\" id=\"hexo-blog-encrypt\" data-wpm=\"Oh, this is an invalid password. Check and try again, please.\" data-whm=\"OOPS, these decrypted content may changed, but you can still have a look.\">\n  <script id=\"hbeData\" type=\"hbeData\" data-hmacdigest=\"6bf9e38b7282b7390333bb1fe78f2dd0b25261215333540d9ee90000ce134989\">845bca6bbae78d3763847ae442c60a8ac7d322a9d933792db462772d39e13bb28b3cdc1883e06d3f389a9d3042a0b97cf02d16f70b08531f64686fcaddfa59f17d1abf5d4dbb22f26640b169b58b6c957ce241850833ff3f48bac9a05321b8791221c37df14b2e8e068df41e0782631f78e455a85bc3f82d746336c6bcf71dbbfee69d0b424e2a665c9df0b3d8bbcebdd0ef5e5bea48f0703e3651cd2ee75f1272b3405d9deee8bbce0b2e9e43fa9501e2656e2cf1234982a0e8d3b9195cfdebd4f04922ff424a583149076f60de2cbb29a1cd1d591a43fc364ce17532705cc048f15f2451cb1f42147986e017fcdd1680f235f9c3b0a30d38341512b3609108bf5600335eae8c2d41bfe06997ca851dc3782e757f453de9a0723e633778c6b8484b4611dc17b1f35719597365212b191605f9decac906745922e37f0915bd18ccc336bfdc2dc795745cf5cd0548cdde47dceb40443bee725d357348e94be75c740740f8c107613a995bd853a036a54ec514fe70adf148cd017c35aafa40886389cebf08f5d7e3c0b4d1410c8a05fbc41ecb305a91f547af05e0fd46064352c082153daa6a2ff2f5035fde75475e80a84b771eae5ee6d355cb0670185a8e44ee13f23e818d48f55d126ecedcdbdd7a6d716b65dc00b757960c96e6236220f91f9f5ac0071879d722a11d46019e57074f3e82878bf2a4829670f8ff7b8dc1dad846720be6abf34d623e1f406e388e0e8e942d0ab2edd0a152f2453ae274d98b9531a07700a58d0ca152d650cc242cc943bddb88df0713e29e133b31d6331361c233f4d65d4fc6abe25a1f2a8433c67565da5f2a48ea6e57b1f536a50e87a835d31a5dd6774b755cfdbddc93bea7447a50325ba814b02a41eb55e444f9dca0777ed697285c2caade82c6fd097dc03d99db480cf6f4a3ba881a51b3a159aa2298acce730001a51637acce969b8895ccbe0e5d22e7de7d9d4d6df1be34c5b2f0fcad731e2c13f22c0e21d1702e535e1b956f2999afea29479aa775ddd850d77c455fee1694824bb093f6478ef31946aa2fe2926a76d018f7fa2f39c49582ed0731ad874b74b7633070fcc3e0dee1b223171d7e2693bab01c6e8eb8e374239eb05d96b636d8b5f55664a62caea96a2b92662780bc29f8d8ee40a7fc4492ab128205e9f4370af0ef7f38e560f3e9cbb46ac9ef0edc836bcf19ae4d5e9acb9585a3f5ad5944f9454977ac3ffe6946a39deae9405f942171dae4242fc15268a619cf3e387e97b776d565fcb6fc8a488f2685333341d45c7ab29a39593f64124b67cbb9dc159fb9a3431e53104a4fa93067d7f1acae037e398b1618967bc7739eb5c75ef73376969c4b49b04e806ec01847fd3bca950dd9978f3e7da69d59bc6b540307d501faeb8f4a973fe00d80af89d43cbb9b70c269fa6a5c6a43fd15b221c232956888615264556327daca71789ced30aeec8c9e9d58063c7d016412d28bb0b73278e3bf64ac78cb8225c5e86f0adda8c04532453392866d5ebb6fbf1703709931521652d376e3d4e038b83240a168633d8a7a1016c90e6d75530925bccb1e751654612f44096f850ad52c8c93cc6a4bc2406cf25ad3848b947b5eb103bcea35e249310329581406cf23069ac367cb68766506e137b14de7d0870ac026574cf13977921db9638eb2b8d463cb7168d7edee9709dd904683179649f5e68a6530590447e14cc9aaef33d59e9c9bada5acf95d44fb59a1c7bf6f5afaa632ce7741a05926274c774536ec36dd58e2f522c7f241484a45a0c0dc4d8ba1582928e23784fffa2459b6c9e0b0f82a61d2fbf124bb306c8a8161f029cb092d976ae0bc327e3d3a786bca723068fb48569b6923da8721030f826dd144ddcd786c2ee6966c239102350ad503d2d18fe481bbde7f15d6dfe5d213a0d149facc6a32192a9b975c119da4117b2a004bd21b0a9ab191b17e55d79b742e1afa5166bf7810e85a12b953da135e787dd3b037298c09164c5d3b854ccbd62b425e460c071840e3140ee9bd289b207570be5b736d3e8350eb544eaeeb83c0669cd879ea59342aa5f995f29a8c3769c05e86b8cb3ed6349b9bb40b776a91e8ee1e98f78666dfa66f43ee58c9bef8fdb3f706799f9e05caa152b4fcf729ea12608d72f0c3065554157e0c1bae1f2e77827dc338feae2f66c14dfb2d8b12cc7e70c8b50c8a526c9abe2eb86f9ec4e321f75772e4e4d24d441a4328af45b39285988840a86ceeeaae7e88a40baf9b5b7819f55368509b960db0b715f97910a2daefb78776df6352d17d4e16a0663d14651e2377b9cc76bcb2e79f9b5b8b8a66065bff033be6dd23ea8130c2b23513e8d5ed4b9e31e13a688b8467d17372ebd418bf7a93c0b72de5ebf02993a1515e7c871defd86e3dd7adb92ec9b3b68b4692a1dc9bf8b5b794fed0eefb2b291d561951c1174a0dccfafab6e8bd408008959094e7b8e1a2fee4f2691e6e92e88784233f34155b8495488ecf64f3f836641662a54586f728de12e11fb5e4c620f3823b17e8375ccdd2421d1b8592a797fed70bc9a5187b1da33b6513a35ac218c83379cd189c44b35579afca131ae47d070ecebdc75743ebb182ca5195349c22950f0bf8dafcb9712f5e3ed9eafff650f1ea5b79d6b2e72a067ef92d335cb4ebf5ef6983bb431cb4286d4fe45571dd419be2eb597fdc08f70f736f13097697abf267fd68461a8647c5ae897221ce249d4ecfd473d83a31413ec1aa85cb53656cff9b6d7b6caf248828afdca2d12c1b7a7a992c17b84e0f555a17f841e4dbe416142a635e8ccc54a58bd794bef5c43a6858fb7ac2c85537cab08ddabdd5af74620f7a79220874c9ab003ac77718bb8619a28a1db23867ea217e81b5dd637b1ea70676e39936d9a6f733276dfd38d4660a949b5ebd036800d130108e5bf0b23b8d6e3aa76cee70f78fe9a5eefedcd3cfb33566272f6e5f942f4c6dbf8603634c5ae59e487daaa4638bf82243fed7ac98e4df17aa0cef4544e8b6b87c74530d97d25c5efc1f811459dd686f6e69a6847479dac64322c06d1d0741e8e18f87ec747500cb54f5c190d05f4dbd5d0a59c44b6fb66b9229cdef019596d659e682066583bc3e4ec68de6877e292de1495b07e1f9bedbfebdef19daeccadba7b66ec655cd5cf102fe0563e64e0d049a905091206b8944</script>\n  <div class=\"hbe hbe-content\">\n    <div class=\"hbe hbe-input hbe-input-default\">\n      <input class=\"hbe hbe-input-field hbe-input-field-default\" type=\"password\" id=\"hbePass\">\n      <label class=\"hbe hbe-input-label hbe-input-label-default\" for=\"hbePass\">\n        <span class=\"hbe hbe-input-label-content hbe-input-label-content-default\">Hey, password is required here.</span>\n      </label>\n    </div>\n  </div>\n</div>\n<script data-pjax src=\"/lib/hbe.js\"></script><link href=\"/css/hbe.style.css\" rel=\"stylesheet\" type=\"text/css\">","tags":[{"name":"记录","slug":"记录","permalink":"https://jonathan1214.github.io/tags/记录/"},{"name":"生日","slug":"生日","permalink":"https://jonathan1214.github.io/tags/生日/"}]},{"title":"顺利通过中期答辩","date":"2021-04-10T12:34:03.000Z","path":"2021/04/wow-pass-mid-term-assessment/","text":"已经是 10 号了，8 号下午通过了毕设的中期答辩，一切都很顺利，让我有点轻松，差点忘记了自己身在何处。现在听着答辩时的录音，回头想想，一切都不过如此，我答的真的是不好，不过好在答辩老师有做相关内容的，还算认可我的工作这只是一个阶段的任务，完成了这个阶段的目标，就应该准备朝着下一个阶段前进了，不过在继续前进之前，我想回头看看这整个过程中发生的事情，单纯的记录也好，复盘也好。 到明天，准备整个中期答辩的时长就来到了两周，整个时间跨度还是很长，想想开学到现在也不过是五周，前三周真的是拼了命地在赶进度，不过好在没有碰到很大的问题，再加上师兄的帮助，和我换了讲组会的顺序，我才能够有充足的时间去完成毕设中期应该完成的任务并准备好中期报告以及PPT。好事多磨，总算是过去这一关了。 时间回到这周二下午，经过了 9 天的准备，我以为自己已经做得足够好，可以顺利通过老师的中期预答了，但事实却不如我所料，我表现得非常糟糕，从内容准备到临场的发挥，都非常糟糕，没有通过答辩。讲 PPT 时陷入了对设计思路的讲解，不自觉沉迷其中，这还不是最严重的，最严重的问题是由于没有和老师及时沟通，我和老师对目标的理解出现了偏差。在我得印象中，我做的只是我 PPT 中的内容，但老师认为还有一半的内容我完全给删掉了，不需要争论太多，我就明白老师是对的，那我就欣然接受结果。最终的结果是什么呢？我需要我漏掉的这部分内容，从第二天 8 点一直到第三天凌晨 3 点，我一直在补内容，包括 PPT 和报告，印象深刻。我从这次预答中学到了什么呢？总结起来有下面两点： 及时和上级沟通，确保大家的目标是一致，尤其在关键节点上，一点要确认好，留下记录。 确认好当前面临的评价指标，不一定要面向指标成长，但一定要面向指标展示，遵守游戏规则是玩家的基本素质，如果不清楚，那一定要搞清楚。 回头看看上周六周日，我在干什么呢？我以为自己已经完成了全部工作，开始享受生活，篮球，娱乐，快乐就完事儿了，可惜这一切都是我以为，如果我当时就找老师去确定自己完成的内容，那我预答的时候不会这么狼狈了，也就用不着在第二天熬夜赶 PPT，所以保持沟通非常重要。 关于中期就这些吧，我应该奔向下一个目标了。","content":"<p>已经是 10 号了，8 号下午通过了毕设的中期答辩，一切都很顺利，让我有点轻松，差点忘记了自己身在何处。现在听着答辩时的录音，回头想想，一切都不过如此，我答的真的是不好，不过好在答辩老师有做相关内容的，还算认可我的工作这只是一个阶段的任务，完成了这个阶段的目标，就应该准备朝着下一个阶段前进了，不过在继续前进之前，我想回头看看这整个过程中发生的事情，单纯的记录也好，复盘也好。</p>\n<p>到明天，准备整个中期答辩的时长就来到了两周，整个时间跨度还是很长，想想开学到现在也不过是五周，前三周真的是拼了命地在赶进度，不过好在没有碰到很大的问题，再加上师兄的帮助，和我换了讲组会的顺序，我才能够有充足的时间去完成毕设中期应该完成的任务并准备好中期报告以及PPT。好事多磨，总算是过去这一关了。</p>\n<p>时间回到这周二下午，经过了 9 天的准备，我以为自己已经做得足够好，可以顺利通过老师的中期预答了，但事实却不如我所料，我表现得非常糟糕，从内容准备到临场的发挥，都非常糟糕，没有通过答辩。讲 PPT 时陷入了对设计思路的讲解，不自觉沉迷其中，这还不是最严重的，最严重的问题是由于没有和老师及时沟通，我和老师对目标的理解出现了偏差。在我得印象中，我做的只是我 PPT 中的内容，但老师认为还有一半的内容我完全给删掉了，不需要争论太多，我就明白老师是对的，那我就欣然接受结果。最终的结果是什么呢？我需要我漏掉的这部分内容，从第二天 8 点一直到第三天凌晨 3 点，我一直在补内容，包括 PPT 和报告，印象深刻。我从这次预答中学到了什么呢？总结起来有下面两点：</p>\n<ul>\n<li>及时和上级沟通，确保大家的目标是一致，尤其在关键节点上，一点要确认好，留下记录。</li>\n<li>确认好当前面临的评价指标，不一定要面向指标成长，但一定要面向指标展示，遵守游戏规则是玩家的基本素质，如果不清楚，那一定要搞清楚。</li>\n</ul>\n<p>回头看看上周六周日，我在干什么呢？我以为自己已经完成了全部工作，开始享受生活，篮球，娱乐，快乐就完事儿了，可惜这一切都是我以为，如果我当时就找老师去确定自己完成的内容，那我预答的时候不会这么狼狈了，也就用不着在第二天熬夜赶 PPT，所以保持沟通非常重要。</p>\n<p>关于中期就这些吧，我应该奔向下一个目标了。</p>\n","tags":[{"name":"记录","slug":"记录","permalink":"https://jonathan1214.github.io/tags/记录/"}]},{"title":"『weekly』准备毕设检查","date":"2021-04-04T13:30:06.000Z","path":"2021/04/weekly-ready-for-mid-term-assessment/","text":"第四周的最后一天即将结束，月份也早已经进入了四月，毕业的日子越来越近了，这意味着中期检查马上就要来了。是的，4 月 8 号就是中期检查的日子，因此我这一周放下了手头的工作，全力准备中期检查，需要完成一份中期报告和一份用于答辩的 PPT，到现在为止，PPT 还没开始做，报告已经写完了，8500来字，一个应该可以及格的字数，我没有什么太大的目标，尽力完成老师交给我的任务，在可以完成的基础上进行一些合理的拓展，顺利毕业就算成功。 日期2021.03.29~2021.04.04 小事记 写报告，写报告，还是写报告。 清明节到了，缅怀…… 参加了 leetcode 周赛，这次做出两道题了，很开心。 这一周，不，应该说这两周真的有点乱过了，上周末没有按照计划写 weeky，这周虽然是安心写报告了，但速度也是慢得可以，边摸鱼边写，写报告像是一个逃避责任的事情……为了慢点写报告，啥都干得出来，也正是写得慢，我推卸了一部分本属于我的责任。本周应该是我讲组会的，但由于我认为时间紧张，因此推给师兄了，然而师兄这周的事情更多：实习机考、创新课助教。为什么人家可以处理好呢？而我却不能处理好这种事情特别多的情况呢？我看归根结底还是太拖延了，而且几乎不会专心去做一件事情，写报告的时候是不是看会儿手机，突然又想到什么事情了，又去做了……这种情况还能持续多久了，我需要改变这种情况，那就先从专心做每一件手上的事情开始吧。一定要践行，就看下周了。 希望下周的答辩顺利结束，希望我的译码器能够在板子上调出来，希望一切顺利。","content":"<p>第四周的最后一天即将结束，月份也早已经进入了四月，毕业的日子越来越近了，这意味着中期检查马上就要来了。是的，4 月 8 号就是中期检查的日子，因此我这一周放下了手头的工作，全力准备中期检查，需要完成一份中期报告和一份用于答辩的 PPT，到现在为止，PPT 还没开始做，报告已经写完了，8500来字，一个应该可以及格的字数，我没有什么太大的目标，尽力完成老师交给我的任务，在可以完成的基础上进行一些合理的拓展，顺利毕业就算成功。</p>\n<h2 id=\"日期\"><a href=\"#日期\" class=\"headerlink\" title=\"日期\"></a>日期</h2><p>2021.03.29~2021.04.04</p>\n<h2 id=\"小事记\"><a href=\"#小事记\" class=\"headerlink\" title=\"小事记\"></a>小事记</h2><ul>\n<li>写报告，写报告，还是写报告。</li>\n<li>清明节到了，缅怀……</li>\n<li>参加了 leetcode 周赛，这次做出两道题了，很开心。</li>\n</ul>\n<a id=\"more\"></a>\n<p>这一周，不，应该说这两周真的有点乱过了，上周末没有按照计划写 weeky，这周虽然是安心写报告了，但速度也是慢得可以，边摸鱼边写，写报告像是一个逃避责任的事情……为了慢点写报告，啥都干得出来，也正是写得慢，我推卸了一部分本属于我的责任。本周应该是我讲组会的，但由于我认为时间紧张，因此推给师兄了，然而师兄这周的事情更多：实习机考、创新课助教。为什么人家可以处理好呢？而我却不能处理好这种事情特别多的情况呢？我看归根结底还是太拖延了，而且几乎不会专心去做一件事情，写报告的时候是不是看会儿手机，突然又想到什么事情了，又去做了……这种情况还能持续多久了，我需要改变这种情况，那就先从专心做每一件手上的事情开始吧。一定要践行，就看下周了。</p>\n<p>希望下周的答辩顺利结束，希望我的译码器能够在板子上调出来，希望一切顺利。</p>\n","tags":[{"name":"记录","slug":"记录","permalink":"https://jonathan1214.github.io/tags/记录/"},{"name":"weekly","slug":"weekly","permalink":"https://jonathan1214.github.io/tags/weekly/"}]},{"title":"ruminations-on-cpp-day01-starting","date":"2021-03-30T15:26:43.000Z","path":"2021/03/ruminations-on-cpp-day01-starting/","text":"将一项计算的状态显示化，这个理念对于整个面向对象编程思想来说，都是一个基础。 通过把有关系的事物联系起来，我们就能更加清晰地用C++来表达自己的意图。 本书的两个思想核心：实用和抽象。 C++ 是一门实用的编程语言，几乎所有的系统都支持C/C++，C++没有对复杂操作系统的依赖性，如不需要垃圾收集机制或者交互执行等功能的支持。 类设计者的检查表 你的类需要一个构造函数吗？ 你的数据成员是私有的吗？ 你需要一个无参的构造函数吗？ 是不是每个构造函数初始化所有的数据成员？ 你的类需要析构函数吗？ 你的类需要复制构造函数吗？ 你的类需要一个赋值操作符吗？ 你的赋值操作符能正确地将对象赋给对象本身吗？ 你的类需要定义关系操作符吗？ 删除数组你记住用 delete[] 吗？ 记得在复制构造函数和赋值操作符的参数类型中加上 const 了吗？ 如果函数有引用参数，它们应该是 const 引用吗？ 记得适当地声明成员函数为 const 的了吗？","content":"<p><img src=\"2021-03-30-ruminations-on-cpp-day01-starting/image-20210330232823563.png\" alt=\"image-20210330232823563\"></p>\n<p><img src=\"2021-03-30-ruminations-on-cpp-day01-starting/image-20210330233020055.png\" alt=\"image-20210330233020055\"></p>\n<blockquote>\n<p>将一项计算的状态显示化，这个理念对于整个面向对象编程思想来说，都是一个基础。</p>\n</blockquote>\n<p>通过把有关系的事物联系起来，我们就能更加清晰地用C++来表达自己的意图。</p>\n<p>本书的两个思想核心：<strong>实用和抽象</strong>。</p>\n<p><img src=\"2021-03-30-ruminations-on-cpp-day01-starting/image-20210401232514463.png\" alt=\"image-20210401232514463\"></p>\n<p>C++ 是一门实用的编程语言，几乎所有的系统都支持C/C++，C++没有对复杂操作系统的依赖性，如不需要垃圾收集机制或者交互执行等功能的支持。</p>\n<h3 id=\"类设计者的检查表\"><a href=\"#类设计者的检查表\" class=\"headerlink\" title=\"类设计者的检查表\"></a>类设计者的检查表</h3><ul>\n<li>你的类需要一个构造函数吗？</li>\n<li>你的数据成员是私有的吗？</li>\n<li>你需要一个无参的构造函数吗？</li>\n<li>是不是每个构造函数初始化所有的数据成员？</li>\n<li>你的类需要析构函数吗？</li>\n<li>你的类需要复制构造函数吗？</li>\n<li>你的类需要一个赋值操作符吗？</li>\n<li>你的赋值操作符能正确地将对象赋给对象本身吗？</li>\n<li>你的类需要定义关系操作符吗？</li>\n<li>删除数组你记住用 <code>delete[]</code> 吗？</li>\n<li>记得在复制构造函数和赋值操作符的参数类型中加上 const 了吗？</li>\n<li>如果函数有引用参数，它们应该是 const 引用吗？</li>\n<li>记得适当地声明成员函数为 const 的了吗？</li>\n</ul>\n","tags":[{"name":"C++","slug":"C","permalink":"https://jonathan1214.github.io/tags/C/"}]},{"title":"写报告前先平复心情","date":"2021-03-30T06:14:58.000Z","path":"2021/03/miditate-before-writing-article/","text":"845bca6bbae78d3763847ae442c60a8ad4766e897448b94a72b82727660f58957b2970e61c9630944fc03158c43c39a4e3f546748afea8faef495606f08cd927ba88d171dae33b3ce069edd894fceae6ad5981a1444f5a4c046b4cee1b573eca49dbc801fe72aa6182c8165c77ec6daa04be830a7a09da9acfd39d980c724d9bc965d212ba0d63788381ccb5e38b8cc4534903dcdade3aad1d41df4f45f8965da0b5ddf59aa3ba13ed0b4b6dd2d84d4c0c312f3bbe2ce7bb484e937c6ed56a57781dce896f5fa6778c936e51605e7bf5a4503e845b65a6d88d4e827cbb9746dea32657739c53985436e814927c6eab8c995c3fa0e31db0dd96e40298392d970bdcb89305f1d8e6709476b3528e8fa49be2b1314ad2876fd10ae2b45657152a4d5121ce752c663c5a58e3c3fd96085a3559b7f87fc549fcc7839f655c5bc746cedde55e7933c293d858926e765ad1eba7ad9dbb49b45b09e4fc5a244644f8aa6356d51848e44290e6f576b9044a3fdfb4c362addebc6bc4741e8f9f3f083152152354221e150e3d967bc123015df7a7ad89d41acac0e713e34932d001b3f42b82c59fb0febd3e2766c668e4177e4d5f16460ca0e4b9bbea54ee9a3c62d53ba3aa1760d2c059840c4683947175b33ce96e211b4e32ea59224cc90c15fe2da9366ce8213af16a3f874189cb745f27417512bc76704ba1c8cb17a8e5491a0fe975e01843c3bab02316ec9ccf24613e17f0e9d86fcae4b3a46b5704b356cb3b8d40c0d22d44e517ea99a058f99e158dab87111fbf0f1f4522817927586155fc0bf4acbe1e44a04418fdbbc55b3c1c5dfd9b4e3fc1769e3fc60846eea90a27024d7b3fddfa13ec7712222200a9a2bd97e07d66451912cb6f0a0561727bd087d463d3db2068aa44978732953cdf57cb19c030c4407184991a6fb5674d94b0eee5161b74fc57f4181b75a6057c5273e452ab9880522c14219c44f6ba53600a5f2f208a0286c07a828efecb60c5c2817cf9aa38105b64d83ae1b3bc5072fc3f9f3651b2e585189b2f5b4a0224b2229fed0515b56ff89a43d33cb9a9f54bf416beb021e84602733258a3f7afe20320a6a8ae7f13d31c6850bc8447a60180473d61a1e125f971da04c2a2eccad2469f50500916e4eb4945456278857669ef27ff2c4332ae28382b25c2d99ed9756507da008b2095bef9f6d07dbde8fbf440043d941a24ded99f260041ffc756353d2922fe0a2ba9303c8c76bed3dbd8db9b622084938c7c253d571c4d47f9e02673ceac9c6624f5f4d707559188bcc1e692588f7d9d2d243f52f2fea081ec83a06a9d796f90b4ce2b99fb444fd0720a00ac1d7cfa46d61ff873361c5518e9eb96ac219f1713bf208f1576c4660b43bf01c905909bd61f17073548047d925504c7fe88029587e459042e2f558247be372949e226a84a04e72df5aea50cebc03582b18cc9967af8d06226d97e57b1b773037eefec2df72e8122ff89494013921157d77988585074a6e5db3450e7dda23a0d50c24ac2f5effc4e5ddab921094dd612f0381b9bb164dc0da5bc9b4f2b0f4ed44ac35389377cd2d3f06d2dd152f4f8c912252e2b3f2602cc9c6f06bd742e04343ad6af5c5a8f11ee47539f616aea7bd1db5971066bfeb855e433b61646dd484bc2127b472f4334fbf5cb8955ef484c5a5084dadc8c79e61e187befd36e3bbb65212aa575445082c8e8d55b2ea5d69525ca51683d6ac63bce75485041bf9d2072df80bd2c75f6e928b0b4993d92c6d917ab66296d08e4caf7dccdb54259a795a121787ed95c51a8b9221fa30ad13e8994890f4dca696b3c07d76687b83556140ab197f361b994c38849beaac303b804d5636b9495dc99565068b8b095df94acdb70048d74b8f2580077adb5a5b405d1f872e6603c7cbeb158af2ed46332b1bd9df79771ed606aafe166f78eda727acdafbf759362982e1f3e0f87fc7f7ae1a782f567f422b048cd9524c00866b5288e4f3ca908a8ffca26e9046734c9a63effc846543cb08294e2dd51dd2c476be3687affb1d276c70ebaa3fadb5d54d6767ba970bf5291a66e2680320aa74523b59eeaf5f760348851cc42b5e8692e805006ddf76455a6fa66ff1aa85bc6bcfdb5fdf742b63158305de93ac0184771c98a4f2db28bcc6da7355a9c75423b05814d9e2f0f0178a05a89f5838a0b86ef1bf161ab9ebae3bb8b6da49f7aac21e69c05726d7536ae6aac15c769a118c3f099977335c69aa52daf18801ff7739224f44b80be5ef7d58babf8c38b52415712e010d29f0aab3fb0eade098c3f15239dded39823221bcdd1d6c6f68b2e9395ba761c116b78b4d6b36fb0a529210485518dd08d77e4924e7f5c26eadc0dffb0e32cc0c2a39a0c4cf932476b8061cfc283e5ab38720ee9c7ee1ce36faaeec7fba888e70af580bc279fff56c1afc3eef3c0dfbab037918f892277958fe41505a71ad1d3143975474e4595f176179f651e29887caedfdda06848bc3f8bbf7f5dd6cdca71030d428995dd3465d49663d22ce34d0a9971d1777c8d1c08771dd638ff7f79da0d26951dd41172fc6c769e228e6d082b7a8d49a39a0a71cfd28d5b79c02a99ddb0f03f4873a8475f392bdf938927e7d29cec030ec6c7283ea396d505b5819db0364c7abc1aad329cee38c73b72f626f3bab42abd0daae4c061b52993e8d9aae2a5c7b4bc97813b24591164762390bb927d780b63454b9f7f8a8f7ccb56b038ed618d6f458d93fd36d23f77c3e6bdd2985f1d68cc69909bc301e274e8976e00fecd45e857c1ee8f13c8b6792fcf91b5d4ccbc22a28c698fbec463044b7a12e05145fabc25dec7525b41a15e2d9f9f33a03fd7f2853cd067a2e729c50df21a29d2063fb03d630437183dc04c9e5349677270412f07822b17334ded54053cdeffd7b453f74797a146bffc353aaf170003ead0239d9913697d2d4889 Hey, password is required here.","content":"<div class=\"hbe hbe-container\" id=\"hexo-blog-encrypt\" data-wpm=\"Oh, this is an invalid password. Check and try again, please.\" data-whm=\"OOPS, these decrypted content may changed, but you can still have a look.\">\n  <script id=\"hbeData\" type=\"hbeData\" data-hmacdigest=\"3ca5c889b00903214ab1f826d60560f4d485888886455573d8a9727cc00ba967\">845bca6bbae78d3763847ae442c60a8ad4766e897448b94a72b82727660f58957b2970e61c9630944fc03158c43c39a4e3f546748afea8faef495606f08cd927ba88d171dae33b3ce069edd894fceae6ad5981a1444f5a4c046b4cee1b573eca49dbc801fe72aa6182c8165c77ec6daa04be830a7a09da9acfd39d980c724d9bc965d212ba0d63788381ccb5e38b8cc4534903dcdade3aad1d41df4f45f8965da0b5ddf59aa3ba13ed0b4b6dd2d84d4c0c312f3bbe2ce7bb484e937c6ed56a57781dce896f5fa6778c936e51605e7bf5a4503e845b65a6d88d4e827cbb9746dea32657739c53985436e814927c6eab8c995c3fa0e31db0dd96e40298392d970bdcb89305f1d8e6709476b3528e8fa49be2b1314ad2876fd10ae2b45657152a4d5121ce752c663c5a58e3c3fd96085a3559b7f87fc549fcc7839f655c5bc746cedde55e7933c293d858926e765ad1eba7ad9dbb49b45b09e4fc5a244644f8aa6356d51848e44290e6f576b9044a3fdfb4c362addebc6bc4741e8f9f3f083152152354221e150e3d967bc123015df7a7ad89d41acac0e713e34932d001b3f42b82c59fb0febd3e2766c668e4177e4d5f16460ca0e4b9bbea54ee9a3c62d53ba3aa1760d2c059840c4683947175b33ce96e211b4e32ea59224cc90c15fe2da9366ce8213af16a3f874189cb745f27417512bc76704ba1c8cb17a8e5491a0fe975e01843c3bab02316ec9ccf24613e17f0e9d86fcae4b3a46b5704b356cb3b8d40c0d22d44e517ea99a058f99e158dab87111fbf0f1f4522817927586155fc0bf4acbe1e44a04418fdbbc55b3c1c5dfd9b4e3fc1769e3fc60846eea90a27024d7b3fddfa13ec7712222200a9a2bd97e07d66451912cb6f0a0561727bd087d463d3db2068aa44978732953cdf57cb19c030c4407184991a6fb5674d94b0eee5161b74fc57f4181b75a6057c5273e452ab9880522c14219c44f6ba53600a5f2f208a0286c07a828efecb60c5c2817cf9aa38105b64d83ae1b3bc5072fc3f9f3651b2e585189b2f5b4a0224b2229fed0515b56ff89a43d33cb9a9f54bf416beb021e84602733258a3f7afe20320a6a8ae7f13d31c6850bc8447a60180473d61a1e125f971da04c2a2eccad2469f50500916e4eb4945456278857669ef27ff2c4332ae28382b25c2d99ed9756507da008b2095bef9f6d07dbde8fbf440043d941a24ded99f260041ffc756353d2922fe0a2ba9303c8c76bed3dbd8db9b622084938c7c253d571c4d47f9e02673ceac9c6624f5f4d707559188bcc1e692588f7d9d2d243f52f2fea081ec83a06a9d796f90b4ce2b99fb444fd0720a00ac1d7cfa46d61ff873361c5518e9eb96ac219f1713bf208f1576c4660b43bf01c905909bd61f17073548047d925504c7fe88029587e459042e2f558247be372949e226a84a04e72df5aea50cebc03582b18cc9967af8d06226d97e57b1b773037eefec2df72e8122ff89494013921157d77988585074a6e5db3450e7dda23a0d50c24ac2f5effc4e5ddab921094dd612f0381b9bb164dc0da5bc9b4f2b0f4ed44ac35389377cd2d3f06d2dd152f4f8c912252e2b3f2602cc9c6f06bd742e04343ad6af5c5a8f11ee47539f616aea7bd1db5971066bfeb855e433b61646dd484bc2127b472f4334fbf5cb8955ef484c5a5084dadc8c79e61e187befd36e3bbb65212aa575445082c8e8d55b2ea5d69525ca51683d6ac63bce75485041bf9d2072df80bd2c75f6e928b0b4993d92c6d917ab66296d08e4caf7dccdb54259a795a121787ed95c51a8b9221fa30ad13e8994890f4dca696b3c07d76687b83556140ab197f361b994c38849beaac303b804d5636b9495dc99565068b8b095df94acdb70048d74b8f2580077adb5a5b405d1f872e6603c7cbeb158af2ed46332b1bd9df79771ed606aafe166f78eda727acdafbf759362982e1f3e0f87fc7f7ae1a782f567f422b048cd9524c00866b5288e4f3ca908a8ffca26e9046734c9a63effc846543cb08294e2dd51dd2c476be3687affb1d276c70ebaa3fadb5d54d6767ba970bf5291a66e2680320aa74523b59eeaf5f760348851cc42b5e8692e805006ddf76455a6fa66ff1aa85bc6bcfdb5fdf742b63158305de93ac0184771c98a4f2db28bcc6da7355a9c75423b05814d9e2f0f0178a05a89f5838a0b86ef1bf161ab9ebae3bb8b6da49f7aac21e69c05726d7536ae6aac15c769a118c3f099977335c69aa52daf18801ff7739224f44b80be5ef7d58babf8c38b52415712e010d29f0aab3fb0eade098c3f15239dded39823221bcdd1d6c6f68b2e9395ba761c116b78b4d6b36fb0a529210485518dd08d77e4924e7f5c26eadc0dffb0e32cc0c2a39a0c4cf932476b8061cfc283e5ab38720ee9c7ee1ce36faaeec7fba888e70af580bc279fff56c1afc3eef3c0dfbab037918f892277958fe41505a71ad1d3143975474e4595f176179f651e29887caedfdda06848bc3f8bbf7f5dd6cdca71030d428995dd3465d49663d22ce34d0a9971d1777c8d1c08771dd638ff7f79da0d26951dd41172fc6c769e228e6d082b7a8d49a39a0a71cfd28d5b79c02a99ddb0f03f4873a8475f392bdf938927e7d29cec030ec6c7283ea396d505b5819db0364c7abc1aad329cee38c73b72f626f3bab42abd0daae4c061b52993e8d9aae2a5c7b4bc97813b24591164762390bb927d780b63454b9f7f8a8f7ccb56b038ed618d6f458d93fd36d23f77c3e6bdd2985f1d68cc69909bc301e274e8976e00fecd45e857c1ee8f13c8b6792fcf91b5d4ccbc22a28c698fbec463044b7a12e05145fabc25dec7525b41a15e2d9f9f33a03fd7f2853cd067a2e729c50df21a29d2063fb03d630437183dc04c9e5349677270412f07822b17334ded54053cdeffd7b453f74797a146bffc353aaf170003ead0239d9913697d2d4889</script>\n  <div class=\"hbe hbe-content\">\n    <div class=\"hbe hbe-input hbe-input-default\">\n      <input class=\"hbe hbe-input-field hbe-input-field-default\" type=\"password\" id=\"hbePass\">\n      <label class=\"hbe hbe-input-label hbe-input-label-default\" for=\"hbePass\">\n        <span class=\"hbe hbe-input-label-content hbe-input-label-content-default\">Hey, password is required here.</span>\n      </label>\n    </div>\n  </div>\n</div>\n<script data-pjax src=\"/lib/hbe.js\"></script><link href=\"/css/hbe.style.css\" rel=\"stylesheet\" type=\"text/css\">","tags":[{"name":"记录","slug":"记录","permalink":"https://jonathan1214.github.io/tags/记录/"}]},{"title":"准备完成毕设中期了","date":"2021-03-27T15:17:26.000Z","path":"2021/03/ready-to-finish-mid-goal/","text":"可以预见的中期目标将要完成了，从 2 月份与老师汇报完到今天也已经有一个多月了，紧赶慢赶得总算做到现在了，到目前为止，我基本完成了译码器的整体模块编写。 下一步是什么呢？完成中期报告和答辩 PPT。再然后呢？做编码器或者一个实现 RMSA 的译码器。再然后呢？那时候就该毕业了吧。毕业之后呢？这两个月时间应该做点什么呢，我有好多事想做了，做这些事情不单单为了找工作，还又为了自己的一点兴趣，暂时想到的如下： 一个通用的 C++ 实现的 LDPC 编译码库 深入理解计算机系统 算法 MIMO Linux C++ 数学 更深入地理解 FPGA …… 想做的事情实在太多了，时间肯定是来不及了，那么必须得将事情分出一个轻重缓急，至于怎么分，那取决于什么是更重要的，好好问问自己今后想做什么。","content":"<p>可以预见的中期目标将要完成了，从 2 月份与老师汇报完到今天也已经有一个多月了，紧赶慢赶得总算做到现在了，到目前为止，我基本完成了译码器的整体模块编写。</p>\n<p>下一步是什么呢？完成中期报告和答辩 PPT。再然后呢？做编码器或者一个实现 RMSA 的译码器。再然后呢？那时候就该毕业了吧。毕业之后呢？这两个月时间应该做点什么呢，我有好多事想做了，做这些事情不单单为了找工作，还又为了自己的一点兴趣，暂时想到的如下：</p>\n<ul>\n<li>一个通用的 C++ 实现的 LDPC 编译码库</li>\n<li>深入理解计算机系统</li>\n<li>算法</li>\n<li>MIMO</li>\n<li>Linux</li>\n<li>C++</li>\n<li>数学</li>\n<li>更深入地理解 FPGA</li>\n<li>……</li>\n</ul>\n<p>想做的事情实在太多了，时间肯定是来不及了，那么必须得将事情分出一个轻重缓急，至于怎么分，那取决于什么是更重要的，好好问问自己今后想做什么。</p>\n","tags":[{"name":"记录","slug":"记录","permalink":"https://jonathan1214.github.io/tags/记录/"},{"name":"无题","slug":"无题","permalink":"https://jonathan1214.github.io/tags/无题/"}]},{"title":"两个会和一次长谈","date":"2021-03-25T15:33:55.000Z","path":"2021/03/two-meetings-and-chilling/","text":"按照预订计划，下午参加了华为的座谈会，不能说有意思，只能说大概知道了华为无线里的基带无线与芯片验证部门的工作，我们专业进去之后大概是做些什么的，不能说我有多感兴趣，我还没有想明白自己到底对进华为无线工作有多少兴趣，也许去也许不去，这都放在以后吧，还有将近一年的时间。 晚上开组会，师兄讲的内容我实在是不太明白，关于 MIMO 云云，我实在一窍不通，希望有机会能深入了解下这些东西，当然前提是我能够把手上的事情做完，然后顺利毕业。要学的东西实在太多了，我真怕自己的时间不够用，不能成长为一个优秀的人。 晚上和朋友闲聊了将近一个小时，还是很开心的，和人交流果然是快乐源泉。","content":"<p>按照预订计划，下午参加了华为的座谈会，不能说有意思，只能说大概知道了华为无线里的基带无线与芯片验证部门的工作，我们专业进去之后大概是做些什么的，不能说我有多感兴趣，我还没有想明白自己到底对进华为无线工作有多少兴趣，也许去也许不去，这都放在以后吧，还有将近一年的时间。</p>\n<p>晚上开组会，师兄讲的内容我实在是不太明白，关于 MIMO 云云，我实在一窍不通，希望有机会能深入了解下这些东西，当然前提是我能够把手上的事情做完，然后顺利毕业。要学的东西实在太多了，我真怕自己的时间不够用，不能成长为一个优秀的人。</p>\n<p>晚上和朋友闲聊了将近一个小时，还是很开心的，和人交流果然是快乐源泉。</p>\n","tags":[{"name":"记录","slug":"记录","permalink":"https://jonathan1214.github.io/tags/记录/"}]},{"title":"终于调试成功后的感悟","date":"2021-03-24T15:27:42.000Z","path":"2021/03/a-little-thinking-of-debug/","text":"今天下午终于把译码器调试好了，现在在仿真上已经没有问题，可以正确译码，效果符合预期。但是我得说这整个过程没有那么轻松，甚至可以用痛苦来形容。 现在可以回头看这一切了，总算是度过了这个阶段，昨晚上调试失败的时候，一度在想是不是自己的整个系统设计就是错误的，从一开始就错了，晃荡了这么久，一点点调试，总算是解决了问题，关于调试的心得，我想还是可以写一点东西，调试得多了，心中越来越有数了，但是定位错误的速度还是不够快，还得练，但我又不希望碰到太多的错误，真是矛盾啊。 又想到那个老问题了，我到底是在设计系统还是在调试系统，这两者的差别十分巨大，可以说完全不是一个层次的东西，我现在更多的只是在单纯地调试，遇到时序上的问题，我只会去仿真去看波形，然后一点点试出来，根本就不是一个设计者。一个好的设计者，应该能从推出每一个信号的源头，推出信号的来龙去脉，而不是一味地去做仿真，根据结果一点点修改代码，这样的层次也太低了。我需要提高自己的层次，尽量减少对仿真的依赖。代码、电路和波形，三者间是有很强的联系的，作为一个设计中心中应该将他们对应起来，而不是仿真仿真仿真。慢慢转变想法吧。 上面这段话是我今晚在实验室写的，作为这次 Debug 的记录，一种低技术含量的 debug 方式消耗的时间和精力是巨大，虽然这次问题比较简单，经过了两天的尝试终于解决了问题，但是今后碰到的问题还会这么容易么？我还能有这么多时间去慢慢地寻找错误么？正如我上面所说的，一味依靠仿真去寻找错误就是愚蠢的，真正的设计者不应该这样。 痛苦正是成长的机会，希望我能好好抓住这样的机会。","content":"<p>今天下午终于把译码器调试好了，现在在仿真上已经没有问题，可以正确译码，效果符合预期。但是我得说这整个过程没有那么轻松，甚至可以用痛苦来形容。</p>\n<blockquote>\n<p>现在可以回头看这一切了，总算是度过了这个阶段，昨晚上调试失败的时候，一度在想是不是自己的整个系统设计就是错误的，从一开始就错了，晃荡了这么久，一点点调试，总算是解决了问题，关于调试的心得，我想还是可以写一点东西，调试得多了，心中越来越有数了，但是定位错误的速度还是不够快，还得练，但我又不希望碰到太多的错误，真是矛盾啊。</p>\n<p>又想到那个老问题了，我到底是在设计系统还是在调试系统，这两者的差别十分巨大，可以说完全不是一个层次的东西，我现在更多的只是在单纯地调试，遇到时序上的问题，我只会去仿真去看波形，然后一点点试出来，根本就不是一个设计者。一个好的设计者，应该能从推出每一个信号的源头，推出信号的来龙去脉，而不是一味地去做仿真，根据结果一点点修改代码，这样的层次也太低了。我需要提高自己的层次，尽量减少对仿真的依赖。<strong>代码、电路和波形，三者间是有很强的联系的，作为一个设计中心中应该将他们对应起来，而不是仿真仿真仿真</strong>。慢慢转变想法吧。</p>\n</blockquote>\n<p>上面这段话是我今晚在实验室写的，作为这次 Debug 的记录，一种低技术含量的 debug 方式消耗的时间和精力是巨大，虽然这次问题比较简单，经过了两天的尝试终于解决了问题，但是今后碰到的问题还会这么容易么？我还能有这么多时间去慢慢地寻找错误么？正如我上面所说的，一味依靠仿真去寻找错误就是愚蠢的，真正的设计者不应该这样。</p>\n<p>痛苦正是成长的机会，希望我能好好抓住这样的机会。</p>\n","tags":[{"name":"FPGA","slug":"FPGA","permalink":"https://jonathan1214.github.io/tags/FPGA/"}]},{"title":"愚蠢的定点仿真终于终于结束了","date":"2021-03-21T15:12:58.000Z","path":"2021/03/stupid-fix-point-simulation-has-been-eliminated/","text":"stupid question 终于被解决了，然而最终发现是我自己的疏忽才导致了这个错误，经过缓慢的修改，我终于把 bug 找到了，至此，困扰已久了问题总算是告一段落了。 关于这次的困扰，我想多说点什么的，但有一种话到嘴边却不知如何启齿的感觉，总是说不出来。有一个念头是很强的，那就是我是傻逼，具体落在何处，我却懒得去思考了，只说一句傻逼是最简单的方式，但是却丧失了成为更好的自己的机会。骂一骂自己，这个复盘还是得去做的，不可偷懒，找个时间吧。 关于终身职业的选择，我现在的目标是投入 FPGA 开发行业，最主要的原因是我现在做的事情就是用 FPGA 开发，已经渐渐脱离了和软件的关系，怕是再也回不去了，索性就投身到这个行业中吧，至于具体的细分领域我还没有想好，或者说以我现在的能力水平和见识恐怕还无法做出这么重要的决定，只能说让自己先成为这方面的全才，什么都懂一点，也好应对今后的暑期实习和秋招等等。 最近心理状态也有点小问题，我把这都归结于我自己，我的有些行为的确不让人喜欢，或者直说就是让人讨厌，但本着相处的默契大家不说罢了，但小小的孤立总是免不了的。我自诩是一个喜欢孤独的人，现在看来也快变成自欺欺人了，众星捧月的感觉谁不喜欢呢？谁都有点虚荣心。以上问题都是我需要解决的，这关乎我自己的成长，我对生活有什么样的态度，以及多大程度上在乎周围人对我的看法，这是我需要确定的，如果有不合理的，一定要坚决进行调整。如果必要，还是得向外寻求帮助。","content":"<p>stupid question 终于被解决了，然而最终发现是我自己的疏忽才导致了这个错误，经过缓慢的修改，我终于把 bug 找到了，至此，困扰已久了问题总算是告一段落了。</p>\n<p>关于这次的困扰，我想多说点什么的，但有一种话到嘴边却不知如何启齿的感觉，总是说不出来。有一个念头是很强的，那就是我是傻逼，具体落在何处，我却懒得去思考了，只说一句傻逼是最简单的方式，但是却丧失了成为更好的自己的机会。骂一骂自己，<strong>这个复盘还是得去做的，不可偷懒</strong>，找个时间吧。</p>\n<p>关于终身职业的选择，我现在的目标是投入 FPGA 开发行业，最主要的原因是我现在做的事情就是用 FPGA 开发，已经渐渐脱离了和软件的关系，怕是再也回不去了，索性就投身到这个行业中吧，至于具体的细分领域我还没有想好，或者说以我现在的能力水平和见识恐怕还无法做出这么重要的决定，只能说让自己先成为这方面的全才，什么都懂一点，也好应对今后的暑期实习和秋招等等。</p>\n<p>最近心理状态也有点小问题，我把这都归结于我自己，我的有些行为的确不让人喜欢，或者直说就是让人讨厌，但本着相处的默契大家不说罢了，但小小的孤立总是免不了的。我自诩是一个喜欢孤独的人，现在看来也快变成自欺欺人了，众星捧月的感觉谁不喜欢呢？谁都有点虚荣心。以上问题都是我需要解决的，这关乎我自己的成长，我对生活有什么样的态度，以及多大程度上在乎周围人对我的看法，这是我需要确定的，如果有不合理的，一定要坚决进行调整。如果必要，还是得向外寻求帮助。</p>\n","tags":[{"name":"记录","slug":"记录","permalink":"https://jonathan1214.github.io/tags/记录/"}]},{"title":"『weekly』忽然第二周也结束了","date":"2021-03-21T07:00:10.000Z","path":"2021/03/weekly-suddenly-another-weekly-gone/","text":"845bca6bbae78d3763847ae442c60a8af709de1075f316abaad0a7aca60cd0e9094e98dee16d78b34de7ad06271faaf95c31580eaeb8fb23aed90b614b9d7c8f6023a780985f8a7d028ec427d7dc1165591dcf8872ec53c94997d66c5603b29d286971e198596b01375533da0573967cf14053b13253304f408168de05b209ce845405536d9a43410a069b889169be588df68d09e285104f1c4b5599d75d7795c48dd4caf02198c49b9771aedf775b8a2d4ecaf04c58f16809d13a4fab053dc7783a637f5b5ba70862a1389ae66a487e467e46648cced4f2aaf181b21184879ba0225cfe20a6d3f63dc655294515f3791bf9ee9543adc6c9bbaf205dd6ab815a7dd01a64830fa0017a4da868909e1f2540a3114b81c58c29eb7beb11c85c1b900e3d601f972572d8128d0ba28d2d3cae319147066c5daaa4dc9b563bccab6190918d0c0ecd489729869d92276b2f20fdbc45ea441566d5017ab259453668daff763cb08838c37449b7162f8756d422111262c9494294513a88079e14a7038b10c5bb41f60a70a8de6f53319cd2015b38461350680de65114d30fa07c97f2df15f6859fcd2e9ea7f011f9609a3d4464ca117665c3609c96051d994c771b15ec5863dac064179c6d5de7affc1efda21e432247f6a1c7b35c376fb89326fbc57b28772e2757c54dde56f59caf02c72d4fd619f3e29ff4943a1eee78dc9732c3b75cad51fa4b503b5741ee3b7d69ff37f48e605e0841c28f3335d65a60a0bfbb675d0beb6998f41aa02ae15f612d8a5e914e4e1686b73d65b42f4df99cedb171a24e71a9baf84b179ce955857fc5f32793e1397b3e53d7d12c58938be00dfc3245b3075569d1845fa1f546d7a1af080416200f1692ae1150f84310f4e54f990ab3a0e11ec9d15cac970525f3942be3709995632a683d707088756b7621abcaa8fb4a3bb5d2fff2fbfefd0245e4ce7c87fe92f09a15011fa391d703f2fda02061ab87d2528fbe7a4f611db1f6add22d7248a0ba0909ae783e35a2fc8e8d2aa6c72a4ebb558508308870f3213622ff191fbb4e42e5aaf376fa98eab78522c9002930dd01dabd68be85c5512cddd5fca453fbe4f7ced144c1404840d5597f97261b01296d88404a98b41c63e17a957b8d272511f65621e341b106b1469fc5c65cdbc53388a72203ad30ecbe4f8033d434e303819272f8e438366107bc3b4f70c4baa35a3fd8a5fd297c23b051653d029d553b3686a280f91404d7395c7bef8ad666197019db00c696cd95f7f7145673656e7d016ff4243087906ffedfb2d8f1c94bd5078264fdf27e86c0595b63e1cfad200daa6ab2f145ab32721b7462e90c7c59dc094dda1843d8587050f5e67f55ea041bc30673557ff17743c6a98a4b8a031ee28f73f7402bbc7dd410601f3cb2d3ea48a76995e059d34c2035da8f7719a02a2fa59758090b200a397872c0ce6be230ab649cbbe942b2ec0606a5fcc92bb49267daf526eb203ec4caac5207ac2e1a5c7a8734d89a22b546c0f695783daf16cf5252882be92bad16fddd8ac217831c790aa6870bcff77a363b2f6668c9263ec67e8def6f3d37d1f9e9b8a7971865409bc2998c523a24113bb7ced47c5eb3cb824bba4bb5901042474f5ba64c029b8ba72c5d3db32c38f5a7cf15e52a38f9e073d94f32fdff513f0bd8c1c4c5845f2d66ec3188938f49dfe06a2bb3497b13b929f13a9f2a957c1f6b4d38af933c8be0f54551cce28a23107f83c6a7a629ee723109d652d7117dd2ef96d9a0ba129555296731469324188f5de377176ae5ae1100b3f43f212f993e8488a3bdc29233d9f2b1424c922838825a81b57b1def5f4ffcfbd38208181d998d1f759c86eaba38dcd8d401a40e34c6c20a1a684e0b57942ebbbfd1da97f825b4e2edc10606380addc73e2889934a25c6180a45d004f5eae2ef86ed16a80db72886050e314850e1c4ec1d4c120482b05e304c5d5ff35ee7fc3d6658ca70aab55d2a1853fc2d04030e57a410d1fabe2d01fdb647081f8834fa6b6ae148c58715e101cf9d901a42adfbe3cc3dbf80a4c1e6ad333303f727a6ec54e7493f4c986ebf16e54065bf97fffc0fd8ccd1ace9ae7fa6e44d16bf05f7ab968a3cdca3916e20837d64b15a77f2da2fb09d5dd0a56e2adb3e8bfad9b052027750bdd04c0cebfcb61c917cfdd7867679800400b0de163fc2283af3f61d22682674b6a79ee7a74a6d117904d6089819eebaccc293ac0ed74f3e581e28b06393052aec433fefc2ada96c6a1e3412c4eab6c6913458bc2e1d767cd0a64b5590893b5e285c71bca6a1da9102bfa26c7a6147ac93bfc94694db22b2619093285e6cf544c490536c6dd270189360ec931624843fe1148a9ec9f69db481a30a3c6000761b68b6ddb74b906c08f8fb4ba0d601e537150d4a317f64d82541836e23b469ca14cf56ba0a1b16e4fe74d0e4562eb48df6b582718d3f3663e94f9ae74504eca1bce0c2f8c0a1284dd32269d7fdcfe3447e4db7320359ce950b2e6fe6e12e88293ee38ad19fb97ec8371cebd3f8215e5f9c9e57253ed777c1be050e41b84d6e4c0a89b5ddc4a1623dd6812c5a1cc97696dfa5e6c703d7ac73ea3b6d27597bde69f066e43a605ec89d4d478dcdbbd02fb0a96ddf61800d8674d8eadc4334a15ebefda5c49f8dbd9f7b2f1178ad834cc14078528701097ca7976c11722650825c453d5a25cb94aff1963106c632880c66998d4df976a159794b1ee88446de0e5547df4197b60ab3c4b79668128eef4993f3e84bd9edf1c4b82d22d82ada06272876345823baecc30533d3fb1cef72df1c0d4c557df4d05f605dc25e5ac34c1c483aee2f1f46c73fe16510c539a13cce3579a92e0cc80007c81d519ef89cc3a6cb36e080521055912b46444e6c8f5fa4d0ad84ad073bf202dfc6ed6009756f38693a4a6682fd9adf49a6f58b5123ca968213248e53f9d1608a2e889334564c667aecea710e4692fb7ad760600a1b53f70b0adea813f591d0657734ec43dfcd40b6d4455dac14b5781bfde27bf347e29a568367914df38f76be4fc17deeee755d0e675a57c467ed9f442241454b176d35bb9c7d45b201f97ee65928d8d5ec8562493e0be8780c2b15bbaf50f76be837c0a75e5a0de8040e77504a7294ab65c9d2c5407c10d37e4226fe9a5bdff43fa58cbe6253d395aeaba01f5d947d82897b1c38457e96b11ddd7ba6e982fa4d953fbc86d3c251289bf3530c40c47b227481b3c10aeb09fc7a4e93d149a7a0812cf39f2ab7fdc669abedcf493d566b16d3e39f466ad8ea4623c4f6b77875f30713609844638813dbc58f15b4f077466779b7e44910eee5a0931d05f11b9bf159b2b0a9ff43610d4f10ba20730d4189e366fb8fcd8ff7238fa386ca638b9f18cadef1a0d3e4edc257518b01bd6551c6f29b34426a01b46ca7dd96478c2098302f17eb4f803d0a0a15615602eb0e3f759b5317ffeaae140a53e75125e3aff8af5f0f728cc4804e013fcc007babadab159c00db5f86662ec692e574549336e5e122bd7d06329d12751a766520f1a268a95bd3f4396846959633d754146f0ade2a073f20c90486c722568b5344dafcc219da0117385aeb2a3c99c51fb69fc325106c6a91b8a2655a54c0e7c3e00dff9b8d29a97b25ffaef1c3b0a2bb7522a4d3f75ede0eeedb1b99ecf3af57380f39e1d3478bdeab6966da18d69fe6bb8166a20d4df10d79e1507071aaa1968cbf443ea1a6d63431bff7b3c9b2b49dc81ab67cd35ed7fe5496221210dc6eeae9471ff191f31288db74a668c77850e53224a46e135aec3f6f83361c1ebd91dc7d599ac62517fb1eb63e0e65f32b76cba4248cf5ba321d53d36ab6c8ba57f8637252cc5da72e58bcbf6a4e1200f2524c6d89632e7c2a1313426ee2082ad33a93b5b2fd8a2372093df87d48edeca2b2c2ca42ae7b00fefaa2f120d7e4ca9d922356f4c96e79cc7d46698f5d4f0ca40809969b51dc8a153ceec7b86b04fee57df765f9f88d91526a8475076f6598dc2a9e5fe94bbda4b9293ac4a7cbe2861b44c7e48e4075621b063ce44d8f04de2d06bd992799e01669a1f88d811dcd7f0379c605088d6326952600a398ec234e6abd60f43f3a7b691fdd2762e4da57007d22bb1d7b6fbfb1408b8eb8fc33482d5bfdba52630a7777bef9c4256848cad609d1bd6e28aae88b3e6115c93995e267dc42c2a34a3f2fc6a61a54cdc06d38becf955ad49180e5bc08a08754786076a39051510f2bf9c527d8af04b16993aad0923373ea0e5d1a8966f04f775e50d652782db60d90b8ca2d4aee99bde1907146fabe9a71cf82e6dbe93103c42d6999117f2943d67dbdc312728b2a24797d6d33ceaafb0ed9779057c63474fcea7d69457dca1124570e33ce3c313216407a11572343a465505291bab5b86f25b711878988e99226b6fd342c25cafd29a903f39e764193e854c77a0e81a9c4fe3d1021dc04bc4c5cf075fd294f5b28b22ea1c0e3a4baf9768756d80479999ade2ded21da43f6653839f39595b734480bd8269956fb4bf0b3de15d83067a547ad8e2e0d8cdf5591df7f67d4199d4dc67022f3b0b776a3d9d920fa1f02f784e5c07880ed60e56ca27866f6b2a43da6326cd1769f87c6d38c928fc166e8257bac020edd6f0cd28f8c42cfed2dec1a9c84cc69b713a91361d875b2a42348a10cc72d53d3262ca0cde3245ceb5e7036d4acf9d7958f96efe1b0bfb7fd932c3ad4206b35264f1751f1ce0845e3d65c6e658f6fa9f32d74e6d8e0bdb36873b701f783290cb48521ca6f80149a74e1db19d918e606229aed07396eace28f9d2b5ed42506fde2761d2b21993f34293876c5f05f2fc38b2eee45bdde0f6f97842aeb7c049e5b5f20a9d5a503bf55267368207441b2bf7306 Hey, password is required here.","content":"<div class=\"hbe hbe-container\" id=\"hexo-blog-encrypt\" data-wpm=\"Oh, this is an invalid password. Check and try again, please.\" data-whm=\"OOPS, these decrypted content may changed, but you can still have a look.\">\n  <script id=\"hbeData\" type=\"hbeData\" data-hmacdigest=\"06094da63facd08daaf10023dc973c2f87982e0937a8497512c10595b5a02737\">845bca6bbae78d3763847ae442c60a8af709de1075f316abaad0a7aca60cd0e9094e98dee16d78b34de7ad06271faaf95c31580eaeb8fb23aed90b614b9d7c8f6023a780985f8a7d028ec427d7dc1165591dcf8872ec53c94997d66c5603b29d286971e198596b01375533da0573967cf14053b13253304f408168de05b209ce845405536d9a43410a069b889169be588df68d09e285104f1c4b5599d75d7795c48dd4caf02198c49b9771aedf775b8a2d4ecaf04c58f16809d13a4fab053dc7783a637f5b5ba70862a1389ae66a487e467e46648cced4f2aaf181b21184879ba0225cfe20a6d3f63dc655294515f3791bf9ee9543adc6c9bbaf205dd6ab815a7dd01a64830fa0017a4da868909e1f2540a3114b81c58c29eb7beb11c85c1b900e3d601f972572d8128d0ba28d2d3cae319147066c5daaa4dc9b563bccab6190918d0c0ecd489729869d92276b2f20fdbc45ea441566d5017ab259453668daff763cb08838c37449b7162f8756d422111262c9494294513a88079e14a7038b10c5bb41f60a70a8de6f53319cd2015b38461350680de65114d30fa07c97f2df15f6859fcd2e9ea7f011f9609a3d4464ca117665c3609c96051d994c771b15ec5863dac064179c6d5de7affc1efda21e432247f6a1c7b35c376fb89326fbc57b28772e2757c54dde56f59caf02c72d4fd619f3e29ff4943a1eee78dc9732c3b75cad51fa4b503b5741ee3b7d69ff37f48e605e0841c28f3335d65a60a0bfbb675d0beb6998f41aa02ae15f612d8a5e914e4e1686b73d65b42f4df99cedb171a24e71a9baf84b179ce955857fc5f32793e1397b3e53d7d12c58938be00dfc3245b3075569d1845fa1f546d7a1af080416200f1692ae1150f84310f4e54f990ab3a0e11ec9d15cac970525f3942be3709995632a683d707088756b7621abcaa8fb4a3bb5d2fff2fbfefd0245e4ce7c87fe92f09a15011fa391d703f2fda02061ab87d2528fbe7a4f611db1f6add22d7248a0ba0909ae783e35a2fc8e8d2aa6c72a4ebb558508308870f3213622ff191fbb4e42e5aaf376fa98eab78522c9002930dd01dabd68be85c5512cddd5fca453fbe4f7ced144c1404840d5597f97261b01296d88404a98b41c63e17a957b8d272511f65621e341b106b1469fc5c65cdbc53388a72203ad30ecbe4f8033d434e303819272f8e438366107bc3b4f70c4baa35a3fd8a5fd297c23b051653d029d553b3686a280f91404d7395c7bef8ad666197019db00c696cd95f7f7145673656e7d016ff4243087906ffedfb2d8f1c94bd5078264fdf27e86c0595b63e1cfad200daa6ab2f145ab32721b7462e90c7c59dc094dda1843d8587050f5e67f55ea041bc30673557ff17743c6a98a4b8a031ee28f73f7402bbc7dd410601f3cb2d3ea48a76995e059d34c2035da8f7719a02a2fa59758090b200a397872c0ce6be230ab649cbbe942b2ec0606a5fcc92bb49267daf526eb203ec4caac5207ac2e1a5c7a8734d89a22b546c0f695783daf16cf5252882be92bad16fddd8ac217831c790aa6870bcff77a363b2f6668c9263ec67e8def6f3d37d1f9e9b8a7971865409bc2998c523a24113bb7ced47c5eb3cb824bba4bb5901042474f5ba64c029b8ba72c5d3db32c38f5a7cf15e52a38f9e073d94f32fdff513f0bd8c1c4c5845f2d66ec3188938f49dfe06a2bb3497b13b929f13a9f2a957c1f6b4d38af933c8be0f54551cce28a23107f83c6a7a629ee723109d652d7117dd2ef96d9a0ba129555296731469324188f5de377176ae5ae1100b3f43f212f993e8488a3bdc29233d9f2b1424c922838825a81b57b1def5f4ffcfbd38208181d998d1f759c86eaba38dcd8d401a40e34c6c20a1a684e0b57942ebbbfd1da97f825b4e2edc10606380addc73e2889934a25c6180a45d004f5eae2ef86ed16a80db72886050e314850e1c4ec1d4c120482b05e304c5d5ff35ee7fc3d6658ca70aab55d2a1853fc2d04030e57a410d1fabe2d01fdb647081f8834fa6b6ae148c58715e101cf9d901a42adfbe3cc3dbf80a4c1e6ad333303f727a6ec54e7493f4c986ebf16e54065bf97fffc0fd8ccd1ace9ae7fa6e44d16bf05f7ab968a3cdca3916e20837d64b15a77f2da2fb09d5dd0a56e2adb3e8bfad9b052027750bdd04c0cebfcb61c917cfdd7867679800400b0de163fc2283af3f61d22682674b6a79ee7a74a6d117904d6089819eebaccc293ac0ed74f3e581e28b06393052aec433fefc2ada96c6a1e3412c4eab6c6913458bc2e1d767cd0a64b5590893b5e285c71bca6a1da9102bfa26c7a6147ac93bfc94694db22b2619093285e6cf544c490536c6dd270189360ec931624843fe1148a9ec9f69db481a30a3c6000761b68b6ddb74b906c08f8fb4ba0d601e537150d4a317f64d82541836e23b469ca14cf56ba0a1b16e4fe74d0e4562eb48df6b582718d3f3663e94f9ae74504eca1bce0c2f8c0a1284dd32269d7fdcfe3447e4db7320359ce950b2e6fe6e12e88293ee38ad19fb97ec8371cebd3f8215e5f9c9e57253ed777c1be050e41b84d6e4c0a89b5ddc4a1623dd6812c5a1cc97696dfa5e6c703d7ac73ea3b6d27597bde69f066e43a605ec89d4d478dcdbbd02fb0a96ddf61800d8674d8eadc4334a15ebefda5c49f8dbd9f7b2f1178ad834cc14078528701097ca7976c11722650825c453d5a25cb94aff1963106c632880c66998d4df976a159794b1ee88446de0e5547df4197b60ab3c4b79668128eef4993f3e84bd9edf1c4b82d22d82ada06272876345823baecc30533d3fb1cef72df1c0d4c557df4d05f605dc25e5ac34c1c483aee2f1f46c73fe16510c539a13cce3579a92e0cc80007c81d519ef89cc3a6cb36e080521055912b46444e6c8f5fa4d0ad84ad073bf202dfc6ed6009756f38693a4a6682fd9adf49a6f58b5123ca968213248e53f9d1608a2e889334564c667aecea710e4692fb7ad760600a1b53f70b0adea813f591d0657734ec43dfcd40b6d4455dac14b5781bfde27bf347e29a568367914df38f76be4fc17deeee755d0e675a57c467ed9f442241454b176d35bb9c7d45b201f97ee65928d8d5ec8562493e0be8780c2b15bbaf50f76be837c0a75e5a0de8040e77504a7294ab65c9d2c5407c10d37e4226fe9a5bdff43fa58cbe6253d395aeaba01f5d947d82897b1c38457e96b11ddd7ba6e982fa4d953fbc86d3c251289bf3530c40c47b227481b3c10aeb09fc7a4e93d149a7a0812cf39f2ab7fdc669abedcf493d566b16d3e39f466ad8ea4623c4f6b77875f30713609844638813dbc58f15b4f077466779b7e44910eee5a0931d05f11b9bf159b2b0a9ff43610d4f10ba20730d4189e366fb8fcd8ff7238fa386ca638b9f18cadef1a0d3e4edc257518b01bd6551c6f29b34426a01b46ca7dd96478c2098302f17eb4f803d0a0a15615602eb0e3f759b5317ffeaae140a53e75125e3aff8af5f0f728cc4804e013fcc007babadab159c00db5f86662ec692e574549336e5e122bd7d06329d12751a766520f1a268a95bd3f4396846959633d754146f0ade2a073f20c90486c722568b5344dafcc219da0117385aeb2a3c99c51fb69fc325106c6a91b8a2655a54c0e7c3e00dff9b8d29a97b25ffaef1c3b0a2bb7522a4d3f75ede0eeedb1b99ecf3af57380f39e1d3478bdeab6966da18d69fe6bb8166a20d4df10d79e1507071aaa1968cbf443ea1a6d63431bff7b3c9b2b49dc81ab67cd35ed7fe5496221210dc6eeae9471ff191f31288db74a668c77850e53224a46e135aec3f6f83361c1ebd91dc7d599ac62517fb1eb63e0e65f32b76cba4248cf5ba321d53d36ab6c8ba57f8637252cc5da72e58bcbf6a4e1200f2524c6d89632e7c2a1313426ee2082ad33a93b5b2fd8a2372093df87d48edeca2b2c2ca42ae7b00fefaa2f120d7e4ca9d922356f4c96e79cc7d46698f5d4f0ca40809969b51dc8a153ceec7b86b04fee57df765f9f88d91526a8475076f6598dc2a9e5fe94bbda4b9293ac4a7cbe2861b44c7e48e4075621b063ce44d8f04de2d06bd992799e01669a1f88d811dcd7f0379c605088d6326952600a398ec234e6abd60f43f3a7b691fdd2762e4da57007d22bb1d7b6fbfb1408b8eb8fc33482d5bfdba52630a7777bef9c4256848cad609d1bd6e28aae88b3e6115c93995e267dc42c2a34a3f2fc6a61a54cdc06d38becf955ad49180e5bc08a08754786076a39051510f2bf9c527d8af04b16993aad0923373ea0e5d1a8966f04f775e50d652782db60d90b8ca2d4aee99bde1907146fabe9a71cf82e6dbe93103c42d6999117f2943d67dbdc312728b2a24797d6d33ceaafb0ed9779057c63474fcea7d69457dca1124570e33ce3c313216407a11572343a465505291bab5b86f25b711878988e99226b6fd342c25cafd29a903f39e764193e854c77a0e81a9c4fe3d1021dc04bc4c5cf075fd294f5b28b22ea1c0e3a4baf9768756d80479999ade2ded21da43f6653839f39595b734480bd8269956fb4bf0b3de15d83067a547ad8e2e0d8cdf5591df7f67d4199d4dc67022f3b0b776a3d9d920fa1f02f784e5c07880ed60e56ca27866f6b2a43da6326cd1769f87c6d38c928fc166e8257bac020edd6f0cd28f8c42cfed2dec1a9c84cc69b713a91361d875b2a42348a10cc72d53d3262ca0cde3245ceb5e7036d4acf9d7958f96efe1b0bfb7fd932c3ad4206b35264f1751f1ce0845e3d65c6e658f6fa9f32d74e6d8e0bdb36873b701f783290cb48521ca6f80149a74e1db19d918e606229aed07396eace28f9d2b5ed42506fde2761d2b21993f34293876c5f05f2fc38b2eee45bdde0f6f97842aeb7c049e5b5f20a9d5a503bf55267368207441b2bf7306</script>\n  <div class=\"hbe hbe-content\">\n    <div class=\"hbe hbe-input hbe-input-default\">\n      <input class=\"hbe hbe-input-field hbe-input-field-default\" type=\"password\" id=\"hbePass\">\n      <label class=\"hbe hbe-input-label hbe-input-label-default\" for=\"hbePass\">\n        <span class=\"hbe hbe-input-label-content hbe-input-label-content-default\">Hey, password is required here.</span>\n      </label>\n    </div>\n  </div>\n</div>\n<script data-pjax src=\"/lib/hbe.js\"></script><link href=\"/css/hbe.style.css\" rel=\"stylesheet\" type=\"text/css\">","tags":[{"name":"记录","slug":"记录","permalink":"https://jonathan1214.github.io/tags/记录/"},{"name":"weekly","slug":"weekly","permalink":"https://jonathan1214.github.io/tags/weekly/"}]},{"title":"无题","date":"2021-03-19T15:22:53.000Z","path":"2021/03/no-title/","text":"无题，如题，真不知道来个什么标题，索性就用无题，反正过不了多久，现在发生的所有事情都会消散，留下或长或短的影响，这都是后话了，无题正好合适，干脆开一个新的 tag，就叫无题，专门写写不知道起什么名字的小短文。现在的我正在摸鱼，明明还有很多事情需要做，都交给明天吧。 闷闷不乐的一天在与老师讨论后完全结束了，只剩下了快乐。我想我找到了苦恼的源泉，那个问题实在是难以解决，终于在与老师的讨论中发现了根本原因：我们完全搞错了方向，通信人想要的信息的传递，而雷达人要的不过是几个状态的确定，这完全不是一个数量级的数据需要。由此出发，带来的不同研究方向也就完全可以理解了。对各自专业保持足够的尊重，做自己熟悉的事情，并保持开放的心态，需求合作的机会。 更进一步的思考，前面说的这件事让我明白了更多东西。在我们考虑一项技术被采用或者一种行为发生的原因，我们首先要考虑的就是他的目的。看似相同的事情，诚然他们一定有很多的相同之处，但关键的目的不同，导致了完全不同的结果。在对未知的事情有足够多的了解之前，我们最好尊重。紧守自己的能力圈，清楚自己的边界在哪里。 痛快，痛快，实在是痛快，现在终于有信心去做我想做的事情。 今后要从事什么样的工作，我现在还是没有想法，只是一心想找个钱多的，这是一个朴素的想法，抱着这样普通的想法寻找，自然也只能找到普通的工作，需要将这个目标细化一点，什么样的工作是钱多的，是可持续的吗？我有从事 10 年以上的觉悟吗？我能从中获得自我的成长吗？这些都是需要考虑的问题，都留给明天吧。 看起来明天的事情可太多了，人生意义以及毕业设计，所以今晚早点睡吧，晚安。","content":"<p>无题，如题，真不知道来个什么标题，索性就用无题，反正过不了多久，现在发生的所有事情都会消散，留下或长或短的影响，这都是后话了，无题正好合适，干脆开一个新的 tag，就叫无题，专门写写不知道起什么名字的小短文。现在的我正在摸鱼，明明还有很多事情需要做，都交给明天吧。</p>\n<p>闷闷不乐的一天在与老师讨论后完全结束了，只剩下了快乐。我想我找到了苦恼的源泉，那个问题实在是难以解决，终于在与老师的讨论中发现了根本原因：我们完全搞错了方向，通信人想要的信息的传递，而雷达人要的不过是几个状态的确定，这完全不是一个数量级的数据需要。由此出发，带来的不同研究方向也就完全可以理解了。对各自专业保持足够的尊重，做自己熟悉的事情，并保持开放的心态，需求合作的机会。</p>\n<p>更进一步的思考，前面说的这件事让我明白了更多东西。在我们考虑一项技术被采用或者一种行为发生的原因，我们首先要考虑的就是他的<strong>目的</strong>。看似相同的事情，诚然他们一定有很多的相同之处，但关键的目的不同，导致了完全不同的结果。在对未知的事情有足够多的了解之前，我们最好尊重。紧守自己的能力圈，清楚自己的边界在哪里。</p>\n<p>痛快，痛快，实在是痛快，现在终于有信心去做我想做的事情。</p>\n<p>今后要从事什么样的工作，我现在还是没有想法，只是一心想找个钱多的，这是一个朴素的想法，抱着这样普通的想法寻找，自然也只能找到普通的工作，需要将这个目标细化一点，什么样的工作是钱多的，是可持续的吗？我有从事 10 年以上的觉悟吗？我能从中获得自我的成长吗？这些都是需要考虑的问题，都留给明天吧。</p>\n<p>看起来明天的事情可太多了，<strong>人生意义以及毕业设计</strong>，所以今晚早点睡吧，晚安。</p>\n","tags":[{"name":"记录","slug":"记录","permalink":"https://jonathan1214.github.io/tags/记录/"},{"name":"无题","slug":"无题","permalink":"https://jonathan1214.github.io/tags/无题/"}]},{"title":"渴望说些什么","date":"2021-03-18T15:26:57.000Z","path":"2021/03/desire-to-say-something/","text":"一种并非强烈的表达欲望促使我开始写下这篇短短的文章，『找点什么事情做，做点有用的事情，什么都好』，这就是我最初的愿望，然而我实在无话可说，或者说值得说道的事情实在太多了，我不知道该说什么好。 几天来，看了《写出我心》的几篇内容，对坚持写些东西有了信心，也不怕没有东西可写，融入到生活当中去，用心去感受，自然而然就能写出写一些东西。在最开始的时候，不需要关心写出来的是什么可怕的东西，重要的是一直在写，一直在表达自己，找到源源不断的动力，这就是写作的土壤，土壤肥沃了，才有可能在之后写出好的东西。 我对能否写出好东西倒不太关心，终于有了一个借口可以一直坚持写些东西，这件事是最令我快乐的，就随便写吧，什么都好，这更让我欣喜若狂，之前我总是想着下笔就要好、要追求完美，现在我就是在写自己的感受，就是在写内心的东西，我不关心写出来的东西怎么样，合不合规矩，我只是在写罢了。我太爱这种感觉了，自由，大概就是这样。 开学快两周了，疯狂赶中期的进度，有点小疲惫，不，我真的很累了，但是这才只是个开始，接下来的两周会更加痛苦，中期答辩和组会都赶上了，挑战极限，极限挑战，总之很难，不知道还有多少个夜需要熬过去，我只怕自己没有休息好坚持不下去，就像今天这样，但群体生活就是如此，很难休息好，大环境会在很大程度上影响我的时间安排，我总是身不由己。 借口总有一天会用到头，说到底每天还是得留出时间给自己独立思考，每天独自徒步去实验室就是一个很好的契机，我享受这个过程，如果回来也能自己一个人走，那就更好了。 还得给这篇文章再加一个 tag，但我现在没有好的想法，只能写上一个『记录』，仅此而已了吗？或许『写作练习』也可以，就是随便写写，让思绪飘荡，享受这个过程，那就这样。","content":"<p>一种并非强烈的表达欲望促使我开始写下这篇短短的文章，『找点什么事情做，做点有用的事情，什么都好』，这就是我最初的愿望，然而我实在无话可说，或者说值得说道的事情实在太多了，我不知道该说什么好。</p>\n<p>几天来，看了《写出我心》的几篇内容，对坚持写些东西有了信心，也不怕没有东西可写，融入到生活当中去，用心去感受，自然而然就能写出写一些东西。在最开始的时候，不需要关心写出来的是什么可怕的东西，重要的是一直在写，一直在表达自己，找到源源不断的动力，这就是写作的土壤，土壤肥沃了，才有可能在之后写出好的东西。</p>\n<p>我对能否写出好东西倒不太关心，终于有了一个借口可以一直坚持写些东西，这件事是最令我快乐的，就随便写吧，什么都好，这更让我欣喜若狂，之前我总是想着下笔就要好、要追求完美，现在我就是在写自己的感受，就是在写内心的东西，我不关心写出来的东西怎么样，合不合规矩，我只是在写罢了。我太爱这种感觉了，自由，大概就是这样。</p>\n<p>开学快两周了，疯狂赶中期的进度，有点小疲惫，不，我真的很累了，但是这才只是个开始，接下来的两周会更加痛苦，中期答辩和组会都赶上了，挑战极限，极限挑战，总之很难，不知道还有多少个夜需要熬过去，我只怕自己没有休息好坚持不下去，就像今天这样，但群体生活就是如此，很难休息好，大环境会在很大程度上影响我的时间安排，我总是身不由己。</p>\n<p>借口总有一天会用到头，说到底每天还是得留出时间给自己独立思考，每天独自徒步去实验室就是一个很好的契机，我享受这个过程，如果回来也能自己一个人走，那就更好了。</p>\n<p>还得给这篇文章再加一个 tag，但我现在没有好的想法，只能写上一个『记录』，仅此而已了吗？或许『写作练习』也可以，就是随便写写，让思绪飘荡，享受这个过程，那就这样。</p>\n","tags":[{"name":"记录","slug":"记录","permalink":"https://jonathan1214.github.io/tags/记录/"},{"name":"写作练习","slug":"写作练习","permalink":"https://jonathan1214.github.io/tags/写作练习/"}]},{"title":"有感而发的胡言乱语","date":"2021-03-16T15:39:01.000Z","path":"2021/03/suddenly-wanted-to-say-something/","text":"已经是晚上 11 点 40 了，但我就是无法忍受住这份表达的冲动，两天来发生的一些事逼迫我不得不进行思考，反思自己的行为，这让我感到很痛苦，执着于自己必须对实在是太痛苦了，我得记录下这种感觉，希望能从中获得一些感悟。 拥抱不同实在是不容易啊！最近对这一点的感受更加深刻了，起因当然是在闲聊中产生的争执，事后回想起来越发感觉自己愚蠢至极，在当时，一种强烈想要说服别人的冲动占领高地，几乎控制了我的行为，我感觉到了这一点，但却没有做任何事情制止事情的进一步发生，境界差了一些。 这完全是个人观点的事情，没有客观对错可言，争论下去毫无意义，只会徒增烦恼，我的提问让这种争论产生，更是错上加错。所以确定一个原则，对于个人观点的事情，如果对生活工作不产生大的影响，那都是无关紧要，不要去说服，甚至不需要当面表达，萍水相逢，难得有一段缘分，何必弄得那么僵，如果涉及到长期关系，或许就该考虑适时相互交换意见，注意，是交换意见，绝对不是说服，更不是道德绑架或者强加于人。 如果实在想说的话，就放到博客上说吧，这是我自己的地盘，随意表达我自己的观点都是自由的，我不用管任何人怎么想，就或许就是自由的意义。（一句大话了，果断时间也许会嘲笑自己的这一段愚蠢发言）现在，让一切继续走下去。 每天留点时间独处，思考一些问题，挺好。","content":"<p>已经是晚上 11 点 40 了，但我就是无法忍受住这份表达的冲动，两天来发生的一些事逼迫我不得不进行思考，反思自己的行为，这让我感到很痛苦，执着于自己必须对实在是太痛苦了，我得记录下这种感觉，希望能从中获得一些感悟。</p>\n<p>拥抱不同实在是不容易啊！最近对这一点的感受更加深刻了，起因当然是在闲聊中产生的争执，事后回想起来越发感觉自己愚蠢至极，在当时，一种强烈想要说服别人的冲动占领高地，几乎控制了我的行为，我感觉到了这一点，但却没有做任何事情制止事情的进一步发生，境界差了一些。</p>\n<p>这完全是个人观点的事情，没有客观对错可言，争论下去毫无意义，只会徒增烦恼，我的提问让这种争论产生，更是错上加错。所以确定一个原则，<strong>对于个人观点的事情，如果对生活工作不产生大的影响，那都是无关紧要，不要去说服，甚至不需要当面表达</strong>，萍水相逢，难得有一段缘分，何必弄得那么僵，如果涉及到长期关系，或许就该考虑适时相互交换意见，注意，是<strong>交换意见</strong>，绝对不是说服，更不是道德绑架或者强加于人。</p>\n<p>如果实在想说的话，就放到博客上说吧，这是我自己的地盘，随意表达我自己的观点都是自由的，我不用管任何人怎么想，就或许就是自由的意义。（一句大话了，果断时间也许会嘲笑自己的这一段愚蠢发言）现在，让一切继续走下去。</p>\n<p>每天留点时间独处，思考一些问题，挺好。</p>\n","tags":[{"name":"记录","slug":"记录","permalink":"https://jonathan1214.github.io/tags/记录/"},{"name":"人生感悟","slug":"人生感悟","permalink":"https://jonathan1214.github.io/tags/人生感悟/"}]},{"title":"『weekly』开学第一周","date":"2021-03-14T06:26:51.000Z","path":"2021/03/weekly-first-week-of-final/","text":"845bca6bbae78d3763847ae442c60a8aa06189854ba8decdefcc1928a6392245ea426e5c3c03f5a2f8491aedf75ddb09c85e1d3a280136bd635c2282cb9a105a51cf77251777646309c6362102f459a93ad2f1bedd83d3ad4ef816089d6d16ce085b4630df65e86eb453aa5dc0fabf05791089ff9057d637bf81670b77d733b0889769b39b8fb8e7f6863ec31b5f80d29ef39ac3fc0e7fd4013d17797dd80d5508baab5c2bc32dd5280d84f4f273322c2b839a7a4ac4b9f7f80fe06b9cb9d92dd05f896de50ca4c5d5622a2a76a089e9fd55f76a03b60885de6213912c1d10c2de197ac63a26fc9a6fcfa6b2bc3fc48cc4ece0a22a6ddf756ec241e9870b168ef6e733d1abb017080255015a6e22d9d66c06c159f19e5bcbe66939a1e2442b5055513db59286dbd94fe8ec6869e4f204e774b0db1a07caee0e5cb95eacd2f08fbd9274448cde000ed6ccbb250bdcba884d89b97beb23e753d5bfa4d2b4ba4d9132dd92c4d4c0fe210fc8ac330ee408662644a3803140e56961302d2b15dd91a8d27ecde283af33821e20105122b7f12e41f11c3e8fec5fcf8cc57dd96f775a769b652537feeae8048f0efcb97fb8c8fccd148983a18417779687ca4951bf5446286e0461dbde65c9150b884fd7806f9b2346c26f6346b9b9b65494cd0fa5e0daa8f4de8c67da45131caa531ebfad28b2c4d711a9d22eaa3ff33936811e72f1dc048d700752569ae2f37b71917b4bc4cf3fd958395393f5210c43f48a6c1bd912435e98145e4f1d2715eba0e28899cf5dd04773fe119fbad81fd9982d8c14eced535b634ea1138d441cfe6ec7fcc2503eea6b0fb062f0e95be5f65fb81be5921f52868d5f46ddc57652cf3ab0ad37f3902e50c5a950f9c3b8fb2c1172328f8bbed27586b7ce29a9f1be76b9aaff1211341e7340950b1a3484a285538b4be4644a50c2cd8abeb6987fe6be763e59bb0e88649a2375b277fd1c7f63189c885662e43681d2e6c5af004f7313c448e39e0374ae643b1946dc4a2c0d8635b722f62ed9213320afd4f9387250d23422d30bf8c76a22a526ac4e022209a3976cc05066bfd32b39e776073ea5832bc1940a2e049415f6df33f0f4b20782124af1c9dbda8e3a10a4c91ee77188496e5d1a2bb29b746c532c1c70e5e3865355b63a8ea00579410defcbf2d12007f870b711c4101ac77a429c1c6c151b00061c7f1d2ea5f407bad94ecf3c72a754b18c720635a4cde602a36bee01f239760109e6f70aef635ce47518ab20ec6d427eaa543098aadbb13a22161152f7ce2949c1dbb7d2c5e43fdea235c2344c46372dd732056cb89f2164011a98bc726c18b1abf3dd2974af30b1b802dd23ed9fa926fc34f2df66c43b6b8d74e98b1863c3cd3fee9d2c32966f2d90b59e61b9e762dd9b4f6f92bfdf2cd2ac2c3c883113bf4eda3e6d0050822fe92af3e60eb942a3fe08667fa26063ca14955132960232482c24223dd7400f57456bbaab2f752f9274719beff71f56fd3d97f3b7eef5769f694fcadfab68e98c8dcd6a03a49049a169665fd3ca40d502819b69a11da8b6d05a62d303f4ac2beb63a41b5d0757762cafe186b55eae886a19400aa981a74d53d34a374bbbc8f324aae75bf8860386dd6766295d1503c1fdfe6bc19f61c62a8bd384baa902746365ebe2a7434cd35b408b9afe0b544e900bd03ea6d11188464af56d8135d99bd0b8d9fdd817251c511f140cd43311eb11a5fc6953df321f6feef22f80d8bbc7f125969e3056b7c14ec52ad555cf57b48e2425c5479e1b25c93c057215cbbecf2022cfea357bec35847d29c2af8558d621394b4a7889fb6ec52011f6fc0d69b2450c6599cb486bfa330789f01f18c2e7cbe69d2a324e0b65dc978b4b68ff4f1516e178a13401aa35b1b68e6a4591b68d20ec9c4f9a6223859bf2bb1d5ef3df793bd1dc4d5cbb6fa48afbfb287a6ceea5e2a44a24ee277d0f156960cd9906ec6fc75e72f932ac6d3d57272325ea7296ee02e809f5215433875a75cc4cfddcd914e2f241f863e5303454914da4c68768b4a28d1d008f312e0b7cc26a154274fa4d017f43160584b650ce76b842127723f6d30414f143ae19890108c25bb3126460041a08ec7ab9b3185dfdf81491477818b963bdef810f89d4718e35370e14a79edd4049a7aaeb402a5f0d1ae2510508ddd4a81d016318aaed84eecbd94ff2cf332119797e6a11d9d5f92ccd2340b87e8177920ee7ce6372bc3264fbfdd7a85386f4d80232eef7f00c86322cae044a4d7079e5cabe33a8a2355e540942d69f817f037443ed90045444966ddb78ea6418e587cf2d381b6fc03b7e36759b0fb0395920105df0dab419129d67304f09b6d948951751bfb1264780cab0f49c0162b08d7b465c64dcb81dc88b7100cd76a00a6b202905ab7aabdc78be1a7fd770db33ff27095351524301a714b7974e962c823a191a9703e892485eb350cd1283192d1000a6fe94fb6f001fe522d8f6c7d5382e925d28a299d4f2dafed1ec06bd689ae165fa50cc2f918c56c81111a4769beb5924926dfb71ecd3bfb3e29f07a81d1e0d7a5bba5ff8ac147eb485a4a842ec7b99f91f08a35fbdaed9648360fb0687892ad239344e282bfd93c2712ccff457f3ab04cf9027bdaad29991a02c4e2d701b487b246186f45841972b22d025c3e06dda66a23960482df9b95dc7bcf7145ec0cf3b9b293cc304299811bfd6c1f7de560bf5eed072634fd31e9dcc885003e4c75e93a34e7e84b67934b373b145b1f35c37dfbbca884137f489e66ed105258f7b03f2bed6de6aa46b1e3542f1b0bbf49925d1ca7754370c1fa69f46e2e5ea5bc8a81d600626e441e5d58403a6a3fafda814572b3a28d03079afee1e4032e3889678ca6e2463dccca7a6f394aa5b8b18a2d91512f07bb2e3fc056b96ac0c476c25f460cbc63d8583c95c39fea48f2579f29de23cac61c9c1503ec3c60f15043188497a6f8c1c3dcb0e2f138bef0244c85be031060f911977439ea3de639ec3fa7aaa9bec93b05d851dcfe16e84e3a71f6492086535b642d716700219ece65981efe627640ecaf06cb103fd3ff397db9d5de68f9c17b8b1a7c225563bc19b28642afb67e8c32e4d09ede6267642481c8d712380699c781e709c16c1263faa063f73f915d0385d91e9dc819ca146787fdee11f591818a17b0c74b7253616872f7d7f1bb4431a1272d13c014282508421b7d9de543b430e3aa22688f10cd4f54727684f5bf78c19531b530307c1697ad24e6fbedc36bad9833cf7f92c55be2889dc0d0499f0a160ab16d171d5fb9f3ff70d4698837d5d3f8e08140620ce728befa1ac28a184f9a5cc6c335580f921f26d3f8bca8404aacb5182826a1828c6c1a0dc6a3abd09c9c46ad8cc7492ef4d8141b25a581eaa0364206343700b712faa1d4470a38c12a3205d399952eb159d26f1a24f71c464643d2071174a288c90c62c6541ae3a69dd029e51ac9b03473b43c907540467ea89f17be8ea41a74c84f868275d7a5db484cd31fee34efd1b8c25e65bae2916f00af5685351df7c3a0a96737cbea1170ac96061d663af29aa3711865ef9c9f413ace3f5e5ef7ef442fa20e0288b98ed8d02554b00582d058a0a6946ecb7779ee097862d9f352102f06b865228f9de5bdc549a3cc4b200cdb1d090fcb804d7c0b8a87c85b108625b59f5cf4cd0965eadeff42f708b6668b462d50b6c829c2211ad8af8e04e605fdc3e198f48f8fe8d539b1dbafbbdb88d9c0cf136e43c819980e0cf1722081f3ae87bfc49860939696526cdb44143589df5ca0ca984ead50a31c77717b94a75f8f98e8977944a409957c025110600ab64504d8ce75024e11491b63ef9d15c6326745831c6e0af105ed3e5697b11e60d62d588847f92548751a5541f9b3238d8860db1b50b883c08081d266fbb97ae8468c593bd8f525202c62b7d0d263f50d57c040592a54127cc9df5273d268ff208fcd93fe75c2806afc2db5a923dd4c0c59d753c678a9e2636f9417c9ebdb958b8fd7d27c6bed0d73c2be1f66756fb58a9565574cdf085471f4803a329ce5d502442f18666687ba1abe55b0b63aa5cb6b17197a23dbc338e23edf9ed1253ed66b220d03491034e71a48729c427d16a191d2efc383b7bbddc58c04010da844771fb0d46eec4bcdc38936e7f2120fe6c0e5ae67d098a150e7445d53678ab28206c4f929aad81c7279a893c5bcd160d4f56960e19417600c1eddaa8621b69b1af5499a7f67a63de85e929e96cca1ee5e04c3fd7109d3e9846d0bfe1b2ea56f6be3d4e4a9304baa5db05de256b0849db37a24a461f955d71b9a00715319e886e6306b36145cf2c9838cbc48adff26bf4e87ed33a826e45f3d37fbc3cc8e735bc840237f0cd38af2ff6bf3581a78a701f20d2b2302a70ed326c9d52e5f91e Hey, password is required here.","content":"<div class=\"hbe hbe-container\" id=\"hexo-blog-encrypt\" data-wpm=\"Oh, this is an invalid password. Check and try again, please.\" data-whm=\"OOPS, these decrypted content may changed, but you can still have a look.\">\n  <script id=\"hbeData\" type=\"hbeData\" data-hmacdigest=\"704b56c02f4b47c2465225dfe0d90a40e8ab54b8d22274c4173aeb0108c8a61f\">845bca6bbae78d3763847ae442c60a8aa06189854ba8decdefcc1928a6392245ea426e5c3c03f5a2f8491aedf75ddb09c85e1d3a280136bd635c2282cb9a105a51cf77251777646309c6362102f459a93ad2f1bedd83d3ad4ef816089d6d16ce085b4630df65e86eb453aa5dc0fabf05791089ff9057d637bf81670b77d733b0889769b39b8fb8e7f6863ec31b5f80d29ef39ac3fc0e7fd4013d17797dd80d5508baab5c2bc32dd5280d84f4f273322c2b839a7a4ac4b9f7f80fe06b9cb9d92dd05f896de50ca4c5d5622a2a76a089e9fd55f76a03b60885de6213912c1d10c2de197ac63a26fc9a6fcfa6b2bc3fc48cc4ece0a22a6ddf756ec241e9870b168ef6e733d1abb017080255015a6e22d9d66c06c159f19e5bcbe66939a1e2442b5055513db59286dbd94fe8ec6869e4f204e774b0db1a07caee0e5cb95eacd2f08fbd9274448cde000ed6ccbb250bdcba884d89b97beb23e753d5bfa4d2b4ba4d9132dd92c4d4c0fe210fc8ac330ee408662644a3803140e56961302d2b15dd91a8d27ecde283af33821e20105122b7f12e41f11c3e8fec5fcf8cc57dd96f775a769b652537feeae8048f0efcb97fb8c8fccd148983a18417779687ca4951bf5446286e0461dbde65c9150b884fd7806f9b2346c26f6346b9b9b65494cd0fa5e0daa8f4de8c67da45131caa531ebfad28b2c4d711a9d22eaa3ff33936811e72f1dc048d700752569ae2f37b71917b4bc4cf3fd958395393f5210c43f48a6c1bd912435e98145e4f1d2715eba0e28899cf5dd04773fe119fbad81fd9982d8c14eced535b634ea1138d441cfe6ec7fcc2503eea6b0fb062f0e95be5f65fb81be5921f52868d5f46ddc57652cf3ab0ad37f3902e50c5a950f9c3b8fb2c1172328f8bbed27586b7ce29a9f1be76b9aaff1211341e7340950b1a3484a285538b4be4644a50c2cd8abeb6987fe6be763e59bb0e88649a2375b277fd1c7f63189c885662e43681d2e6c5af004f7313c448e39e0374ae643b1946dc4a2c0d8635b722f62ed9213320afd4f9387250d23422d30bf8c76a22a526ac4e022209a3976cc05066bfd32b39e776073ea5832bc1940a2e049415f6df33f0f4b20782124af1c9dbda8e3a10a4c91ee77188496e5d1a2bb29b746c532c1c70e5e3865355b63a8ea00579410defcbf2d12007f870b711c4101ac77a429c1c6c151b00061c7f1d2ea5f407bad94ecf3c72a754b18c720635a4cde602a36bee01f239760109e6f70aef635ce47518ab20ec6d427eaa543098aadbb13a22161152f7ce2949c1dbb7d2c5e43fdea235c2344c46372dd732056cb89f2164011a98bc726c18b1abf3dd2974af30b1b802dd23ed9fa926fc34f2df66c43b6b8d74e98b1863c3cd3fee9d2c32966f2d90b59e61b9e762dd9b4f6f92bfdf2cd2ac2c3c883113bf4eda3e6d0050822fe92af3e60eb942a3fe08667fa26063ca14955132960232482c24223dd7400f57456bbaab2f752f9274719beff71f56fd3d97f3b7eef5769f694fcadfab68e98c8dcd6a03a49049a169665fd3ca40d502819b69a11da8b6d05a62d303f4ac2beb63a41b5d0757762cafe186b55eae886a19400aa981a74d53d34a374bbbc8f324aae75bf8860386dd6766295d1503c1fdfe6bc19f61c62a8bd384baa902746365ebe2a7434cd35b408b9afe0b544e900bd03ea6d11188464af56d8135d99bd0b8d9fdd817251c511f140cd43311eb11a5fc6953df321f6feef22f80d8bbc7f125969e3056b7c14ec52ad555cf57b48e2425c5479e1b25c93c057215cbbecf2022cfea357bec35847d29c2af8558d621394b4a7889fb6ec52011f6fc0d69b2450c6599cb486bfa330789f01f18c2e7cbe69d2a324e0b65dc978b4b68ff4f1516e178a13401aa35b1b68e6a4591b68d20ec9c4f9a6223859bf2bb1d5ef3df793bd1dc4d5cbb6fa48afbfb287a6ceea5e2a44a24ee277d0f156960cd9906ec6fc75e72f932ac6d3d57272325ea7296ee02e809f5215433875a75cc4cfddcd914e2f241f863e5303454914da4c68768b4a28d1d008f312e0b7cc26a154274fa4d017f43160584b650ce76b842127723f6d30414f143ae19890108c25bb3126460041a08ec7ab9b3185dfdf81491477818b963bdef810f89d4718e35370e14a79edd4049a7aaeb402a5f0d1ae2510508ddd4a81d016318aaed84eecbd94ff2cf332119797e6a11d9d5f92ccd2340b87e8177920ee7ce6372bc3264fbfdd7a85386f4d80232eef7f00c86322cae044a4d7079e5cabe33a8a2355e540942d69f817f037443ed90045444966ddb78ea6418e587cf2d381b6fc03b7e36759b0fb0395920105df0dab419129d67304f09b6d948951751bfb1264780cab0f49c0162b08d7b465c64dcb81dc88b7100cd76a00a6b202905ab7aabdc78be1a7fd770db33ff27095351524301a714b7974e962c823a191a9703e892485eb350cd1283192d1000a6fe94fb6f001fe522d8f6c7d5382e925d28a299d4f2dafed1ec06bd689ae165fa50cc2f918c56c81111a4769beb5924926dfb71ecd3bfb3e29f07a81d1e0d7a5bba5ff8ac147eb485a4a842ec7b99f91f08a35fbdaed9648360fb0687892ad239344e282bfd93c2712ccff457f3ab04cf9027bdaad29991a02c4e2d701b487b246186f45841972b22d025c3e06dda66a23960482df9b95dc7bcf7145ec0cf3b9b293cc304299811bfd6c1f7de560bf5eed072634fd31e9dcc885003e4c75e93a34e7e84b67934b373b145b1f35c37dfbbca884137f489e66ed105258f7b03f2bed6de6aa46b1e3542f1b0bbf49925d1ca7754370c1fa69f46e2e5ea5bc8a81d600626e441e5d58403a6a3fafda814572b3a28d03079afee1e4032e3889678ca6e2463dccca7a6f394aa5b8b18a2d91512f07bb2e3fc056b96ac0c476c25f460cbc63d8583c95c39fea48f2579f29de23cac61c9c1503ec3c60f15043188497a6f8c1c3dcb0e2f138bef0244c85be031060f911977439ea3de639ec3fa7aaa9bec93b05d851dcfe16e84e3a71f6492086535b642d716700219ece65981efe627640ecaf06cb103fd3ff397db9d5de68f9c17b8b1a7c225563bc19b28642afb67e8c32e4d09ede6267642481c8d712380699c781e709c16c1263faa063f73f915d0385d91e9dc819ca146787fdee11f591818a17b0c74b7253616872f7d7f1bb4431a1272d13c014282508421b7d9de543b430e3aa22688f10cd4f54727684f5bf78c19531b530307c1697ad24e6fbedc36bad9833cf7f92c55be2889dc0d0499f0a160ab16d171d5fb9f3ff70d4698837d5d3f8e08140620ce728befa1ac28a184f9a5cc6c335580f921f26d3f8bca8404aacb5182826a1828c6c1a0dc6a3abd09c9c46ad8cc7492ef4d8141b25a581eaa0364206343700b712faa1d4470a38c12a3205d399952eb159d26f1a24f71c464643d2071174a288c90c62c6541ae3a69dd029e51ac9b03473b43c907540467ea89f17be8ea41a74c84f868275d7a5db484cd31fee34efd1b8c25e65bae2916f00af5685351df7c3a0a96737cbea1170ac96061d663af29aa3711865ef9c9f413ace3f5e5ef7ef442fa20e0288b98ed8d02554b00582d058a0a6946ecb7779ee097862d9f352102f06b865228f9de5bdc549a3cc4b200cdb1d090fcb804d7c0b8a87c85b108625b59f5cf4cd0965eadeff42f708b6668b462d50b6c829c2211ad8af8e04e605fdc3e198f48f8fe8d539b1dbafbbdb88d9c0cf136e43c819980e0cf1722081f3ae87bfc49860939696526cdb44143589df5ca0ca984ead50a31c77717b94a75f8f98e8977944a409957c025110600ab64504d8ce75024e11491b63ef9d15c6326745831c6e0af105ed3e5697b11e60d62d588847f92548751a5541f9b3238d8860db1b50b883c08081d266fbb97ae8468c593bd8f525202c62b7d0d263f50d57c040592a54127cc9df5273d268ff208fcd93fe75c2806afc2db5a923dd4c0c59d753c678a9e2636f9417c9ebdb958b8fd7d27c6bed0d73c2be1f66756fb58a9565574cdf085471f4803a329ce5d502442f18666687ba1abe55b0b63aa5cb6b17197a23dbc338e23edf9ed1253ed66b220d03491034e71a48729c427d16a191d2efc383b7bbddc58c04010da844771fb0d46eec4bcdc38936e7f2120fe6c0e5ae67d098a150e7445d53678ab28206c4f929aad81c7279a893c5bcd160d4f56960e19417600c1eddaa8621b69b1af5499a7f67a63de85e929e96cca1ee5e04c3fd7109d3e9846d0bfe1b2ea56f6be3d4e4a9304baa5db05de256b0849db37a24a461f955d71b9a00715319e886e6306b36145cf2c9838cbc48adff26bf4e87ed33a826e45f3d37fbc3cc8e735bc840237f0cd38af2ff6bf3581a78a701f20d2b2302a70ed326c9d52e5f91e</script>\n  <div class=\"hbe hbe-content\">\n    <div class=\"hbe hbe-input hbe-input-default\">\n      <input class=\"hbe hbe-input-field hbe-input-field-default\" type=\"password\" id=\"hbePass\">\n      <label class=\"hbe hbe-input-label hbe-input-label-default\" for=\"hbePass\">\n        <span class=\"hbe hbe-input-label-content hbe-input-label-content-default\">Hey, password is required here.</span>\n      </label>\n    </div>\n  </div>\n</div>\n<script data-pjax src=\"/lib/hbe.js\"></script><link href=\"/css/hbe.style.css\" rel=\"stylesheet\" type=\"text/css\">","tags":[{"name":"weekly","slug":"weekly","permalink":"https://jonathan1214.github.io/tags/weekly/"}]},{"title":"『Weekly』开学啦","date":"2021-03-07T08:13:50.000Z","path":"2021/03/weekly-final-semester-starts/","text":"845bca6bbae78d3763847ae442c60a8a6943d980bab9910d345526e8a6f81191d78b45d549fd2ad76fce3d6b392dc14d4646dc8060b480a113d2e81e8039946a1258f92bc67f3b2f6de73d24c1ec85d92b40478c5f6914658a8fe085b9c0d506521d9834fe9e7172b55c9ae5f1a63457b799a7a41979d1c992e1e1d9a3e63384a6c0ca70929d305ca4a2a02a4f94cbab1d8f2daef5a10820aeb6730d1e29755862e295a8a77481c76dc08bdcf30a0d1e003fc94975866147b6acf429ef400ed01b56b39fbd0d7845187b98e2165d5a22634ab175acd61f0761ceebce772ae9b2bae25be4edb3cab4db3b02d345fc1745bb03bc65ddeb2b7056990f157acab1de53d7e5351bb8256222fd0ae3b33c24098d5e004554568454bd7d5857bec0e212dc550d3918bb1c6d6267590456ad72ff3f91f0191a45c410d49ea85737c4a8f148e89c7e6a66c523147a9be935bc4e9c57db3414f4f55710989529f819bdfab28b7fbf46868dbee22fa59db3d93676c3ddcc0457115f48ae12ae3f6a0fef701df458de619468ade6a3722a46d7d15445c6022bbd3c3eef70cad312423214ec4a855ea4fa3a4e273b4eb678d3289ed6098753a3b79f4741d03a342f244e4a6ad3527d310e7e2fad6fafa10c5387268b2e7f178a4734fec183b1842fdd091ffd42276cab623cffdc53498ca70c3b331192e5a4f9fc55e6ac079887da2b09511d0c04fe989f1f1f06caba59693f24e8e1b6ca653cc5d13be8bf4979e7053411713a775c2e3c036e832f96ac2bcd1ce5a8cf568e065df76dad0ed47550f29f37f110d6047fb63405a34e74b7cf2e26b89c9cc9c744cb58cf86b2ffa670d10ce02e6cab4370aa93a858fdcc8c137884ca6e7db233e51dec86a753a6eedb06b2548edef6156d2ace091c4b097f2fc192424389d8effb082f082a91bb4fbddaa0b3b43b53e7926b57472be32cb30421405ecc7b52c07a3fa9de7c4a4ea40b0f136932d6e6fdcb4bde9c054aa2282ad5fd42f37368945f157e547590e401027cd18454fa5419d61375e9b6cc6b5a3493c2dcaeea6267d7f87da253856a7f028917272706e0dcaf0f00af6508edf1d27a601fa682438f1d8d83cdd02b7ba015573272a97feed42ab0b9c261fda05940cc78cfeed8b4bbd1052aeef9b09b20446247dda7ef6fceb85fd2e3ae294fc10d40faf6a1052d3bfc0e994909fdde38d9b11d3c71ccdeeea90bed67555987a173543a0071b586c5a4fbce90491bf3d1b25c3b73cbc322f78b168eca5d56c6feb0448e0d6cc7ec2eb3d44768f63ad850e3d1153c804be4b74893e18c3a11708fd377c7a0799f80e0f7b6a58d6f29f58721eba381863df8d1bd57f17b60e3598597d2b05c8aef88140f2891bc4db89a824e1d6ed200378b3d89ffae571237bd25bd88e3e50ea5c7c116edc3ee692669236b7769d1c749797ce455a6986fa3b732621d4fdc53d01d759d8d0d3e11fd9d08c4626889d4835e0ad6aa3447f4c64179c573f254431f94aee9f9c74fe2081f448fad41a7aec02d966cf19f52a743ce1e29fd3a25e4dd0a81cb70008c220e66b9c2a02c831ee8daffa003cc818d00112e5666f489ea5682ee5fc7eb955e967308be63ae8a06687c88ec6bf8f6b71c22bc895c130d6a7fe15ce67ef938f1069ea18097fe12094d2fb6ebb898a970a9e0b70a4ed4d0047f431fc8d54bf3f529349308569ff9b55240e17e0101a0ccfb6837f91efa33237c5969a2b92912c494d31f40b6875bed44b0f2a88cb572eb6126f7bb311a9f7afa Hey, password is required here.","content":"<div class=\"hbe hbe-container\" id=\"hexo-blog-encrypt\" data-wpm=\"Oh, this is an invalid password. Check and try again, please.\" data-whm=\"OOPS, these decrypted content may changed, but you can still have a look.\">\n  <script id=\"hbeData\" type=\"hbeData\" data-hmacdigest=\"85dbb071f92af1b7b8164f81a42e15c76e701a9b7dd011247ffdaa874365de53\">845bca6bbae78d3763847ae442c60a8a6943d980bab9910d345526e8a6f81191d78b45d549fd2ad76fce3d6b392dc14d4646dc8060b480a113d2e81e8039946a1258f92bc67f3b2f6de73d24c1ec85d92b40478c5f6914658a8fe085b9c0d506521d9834fe9e7172b55c9ae5f1a63457b799a7a41979d1c992e1e1d9a3e63384a6c0ca70929d305ca4a2a02a4f94cbab1d8f2daef5a10820aeb6730d1e29755862e295a8a77481c76dc08bdcf30a0d1e003fc94975866147b6acf429ef400ed01b56b39fbd0d7845187b98e2165d5a22634ab175acd61f0761ceebce772ae9b2bae25be4edb3cab4db3b02d345fc1745bb03bc65ddeb2b7056990f157acab1de53d7e5351bb8256222fd0ae3b33c24098d5e004554568454bd7d5857bec0e212dc550d3918bb1c6d6267590456ad72ff3f91f0191a45c410d49ea85737c4a8f148e89c7e6a66c523147a9be935bc4e9c57db3414f4f55710989529f819bdfab28b7fbf46868dbee22fa59db3d93676c3ddcc0457115f48ae12ae3f6a0fef701df458de619468ade6a3722a46d7d15445c6022bbd3c3eef70cad312423214ec4a855ea4fa3a4e273b4eb678d3289ed6098753a3b79f4741d03a342f244e4a6ad3527d310e7e2fad6fafa10c5387268b2e7f178a4734fec183b1842fdd091ffd42276cab623cffdc53498ca70c3b331192e5a4f9fc55e6ac079887da2b09511d0c04fe989f1f1f06caba59693f24e8e1b6ca653cc5d13be8bf4979e7053411713a775c2e3c036e832f96ac2bcd1ce5a8cf568e065df76dad0ed47550f29f37f110d6047fb63405a34e74b7cf2e26b89c9cc9c744cb58cf86b2ffa670d10ce02e6cab4370aa93a858fdcc8c137884ca6e7db233e51dec86a753a6eedb06b2548edef6156d2ace091c4b097f2fc192424389d8effb082f082a91bb4fbddaa0b3b43b53e7926b57472be32cb30421405ecc7b52c07a3fa9de7c4a4ea40b0f136932d6e6fdcb4bde9c054aa2282ad5fd42f37368945f157e547590e401027cd18454fa5419d61375e9b6cc6b5a3493c2dcaeea6267d7f87da253856a7f028917272706e0dcaf0f00af6508edf1d27a601fa682438f1d8d83cdd02b7ba015573272a97feed42ab0b9c261fda05940cc78cfeed8b4bbd1052aeef9b09b20446247dda7ef6fceb85fd2e3ae294fc10d40faf6a1052d3bfc0e994909fdde38d9b11d3c71ccdeeea90bed67555987a173543a0071b586c5a4fbce90491bf3d1b25c3b73cbc322f78b168eca5d56c6feb0448e0d6cc7ec2eb3d44768f63ad850e3d1153c804be4b74893e18c3a11708fd377c7a0799f80e0f7b6a58d6f29f58721eba381863df8d1bd57f17b60e3598597d2b05c8aef88140f2891bc4db89a824e1d6ed200378b3d89ffae571237bd25bd88e3e50ea5c7c116edc3ee692669236b7769d1c749797ce455a6986fa3b732621d4fdc53d01d759d8d0d3e11fd9d08c4626889d4835e0ad6aa3447f4c64179c573f254431f94aee9f9c74fe2081f448fad41a7aec02d966cf19f52a743ce1e29fd3a25e4dd0a81cb70008c220e66b9c2a02c831ee8daffa003cc818d00112e5666f489ea5682ee5fc7eb955e967308be63ae8a06687c88ec6bf8f6b71c22bc895c130d6a7fe15ce67ef938f1069ea18097fe12094d2fb6ebb898a970a9e0b70a4ed4d0047f431fc8d54bf3f529349308569ff9b55240e17e0101a0ccfb6837f91efa33237c5969a2b92912c494d31f40b6875bed44b0f2a88cb572eb6126f7bb311a9f7afa</script>\n  <div class=\"hbe hbe-content\">\n    <div class=\"hbe hbe-input hbe-input-default\">\n      <input class=\"hbe hbe-input-field hbe-input-field-default\" type=\"password\" id=\"hbePass\">\n      <label class=\"hbe hbe-input-label hbe-input-label-default\" for=\"hbePass\">\n        <span class=\"hbe hbe-input-label-content hbe-input-label-content-default\">Hey, password is required here.</span>\n      </label>\n    </div>\n  </div>\n</div>\n<script data-pjax src=\"/lib/hbe.js\"></script><link href=\"/css/hbe.style.css\" rel=\"stylesheet\" type=\"text/css\">","tags":[{"name":"weekly","slug":"weekly","permalink":"https://jonathan1214.github.io/tags/weekly/"}]},{"title":"『Weekly』2 月最后一天","date":"2021-02-28T12:35:28.000Z","path":"2021/02/last-day-of-feb-2021/","text":"845bca6bbae78d3763847ae442c60a8a9b0979b5f093ea2fe061952254277f1aecd4b8e73b1b3d5fe92217c687dbc8c39dcac6d92e187ec511fd629efae6486d651a27dc85c3b0870bc71b837b75cfe746b4029a41231192aeee026f97d4df65f0cbc3c9d24951097e4fd781cfb503d0f32c30a51dceb339b4d232c6bdf7c573d2e16a64ce458e3a55db15ab001fbda0c28c9437482feb61f8de6d56118cbc37634fba20788718831c6186a17fc1b3b0c84ac6b222d01032d142f34b9c1b197dd13e99907597dc0194b93f715413cf81dd07aceb68ada078565df417e84599258eff45c7767b1fb2ccce86122cb7d72e895023ccf8f205aa43830bc2d7826de3baeb4c1ef8d16c704b2ab7e1a862f80f54ea4a1d1b9285606a55536067163a2457d1fa6afeb91ea328405ca369b01006802fbf9109cca4a5cbff9f7921c88fc81e0eea287ee81ad3e8a07a329db9f00a3b1440b69df04bbabf60a1073350693c1c1d4a3ff950888d3146ea33c5e57a70ff6bb64d294e4a0181719753087ba5c137bf90b486c97a656b5bf2e1bf682166c76965e9c0608ea96f39b634c9b05aa706ab795af589645997da8848c49ebdea1acf5462dc27939f1172bd3b4e47219334437812d329c72d5fb1ed46f9de11c83813dc70db978a81cab2b2a4c53dc95a6dd3ecb981ff11f66954f81b5b427c3440bbe5caaede750594fbd13da68ec57ac85c6555326940bcfda040b4c0fd43cc854dcbd83a99f1930dc98d2168e36c8c8bce9810de0d43b3b9408c8c3872048a6683836ddc88a705b4e070b7ad7c126c68842854adc925bc16a24537c1b20cd475dad7d7552f456016d5bf7fafab40bbf1158aa49461071af258dc21c2605cbc30bcab956dc2687c4fa92bd53b89cd34d3d6e47652db192698d74b0e1c5c31ed56f3080c903c7c3677e2e3feb4a66d637c550c50f6a14ceb6136b1249ab1f2d464fb3fa670793d42daa43dc1ff1d207c17a4daf48ae778cb9d8e5f80e0bcd7e6eb68af06204ad889f793b71a7e92efd873d6b350da2699ebdc3c1266e04146e0f5abc6f69de8274775a0305ce2e9de4a9a66e96f554a497b4767f70ae9e7504e3c71c6af71a9cafe68c1f5b1cf8a1b68d3cb0f77967da53fc7bebd712dd93b09bf485e5c33f1206cedc4e041838eb6ebc504245b6b12d610363eea43bc8108709aa34572173223c1eb1f2152dcd9c0f3da595b037314e091a6ee2053f36ba0fac15760368f29215f8d7bab2ca11e64757b11cbe4078d83011b10b7e257923fbfc29fcbaf772e85ffcd9bbe9f4acca8c94455b8d42e3d76d17576fb20dcd385e7577959cf4654a9374ceb3a2fb27369aef68961fc41c27e65f9a184cf4a8f950a7f5170405c98330d679e404341d08cc82f866752cb90d852494a4e9e23ee6bd8159ab0961432ce630174d4274dbac47e89be945ce1e4dfda607ea087abb7ee134c132a6bc739974fcc97a051499597d1ec4c348f88802baf4bea921b3b455f07f7bd304a26b47f62f7b47e8893f49442a337f38ffbbde7498ac0a6585f39c3631eb91f0040e351c144eab2733bb77ed845006eab161341da0c1ff969c1898b17726a6889f91aefc6a975d85bbc6c385f7628da28c36d5f1ab727afa5a98eb0068768066c5de6d79dd7b2adc7de230a69d29efdef44e4165e6fa037d9818e149e22ab56c2574b85b1f098f87e07e5049c1de0df6abbeb0d78f622c1ff1475dbd983e7ac89b5fa365622a944a45f870d2c1d5be47545392465715e85383fa12dce594c5b591d65bb6b23470c1841b574909f8ab671c59dfb6c370e83993c5f136875e724a5dead34459a99501717166432317ad737d5b6fbf067edaeb2e6287ed4dc5dfbe252a3760fccc2821a2d2c3c8febf0a6bb520b28b5bf278a49c5b97c7f2fdc87fb0f2746ca102d907a1befc2f66e3a0c626468e851ae503718ce2bd3b1b23c92adf0ef180de60f36c10589b3c7a075803877bc4931f25bd4fa903836f65a3343c91dc4fceafc4e936d845f2db6a49547e90303a99fcfdb6ed46416f03d85d0909a87b4768b7dccc47a42e350f29ae101e1fef3727c34b5d4419b60400ee91c2a4da568b60f9c3d3745bc098caa3ef7759b27c0c9d5eab09102652652ff73fc89a8e44580852d3703598d769485cb5b4ba08207f97fec412f0ac04223b62ce5385b93fba952c0da8921136031fbd40308a1bf0088c6a9c69045160426aff07b94fe4372f396f93cb1325d5ec8b0a7b119e729916a6e90a923fa8be8ea3c97414e364bc188398a76a00eff9c7f30f36add211835948ac07bdbad3fefc74475ce1cae490fee04767f77437ef7ccbd021508ae177312738d2b73c5b0916d5b48b4f914470c63701a60e14426037594674564edf78db23e5611a785f6644115ca8626ba0b8afe26b1813cc6732fc87f72ab0d7bcdb983cb940f6e5f4354d2ad0390139b5c0a1ba3b1b5ae4a54fd97f2dfe4217426e57dff1e1d32e8fbf05e7336f93d93b6669454dabc8d7586d45231417880979de81f84b74f746906cf982f4a241757cac501a8a3e4e84cd49ebc1021161489c89de2cc2487c16930ad1e3871651671c77045792d765ab6f94d5829cfe419ef62c32d257cc3e781c450590f944ada47d19348267403edfea97cc770647c7323ba72aaf6b6630a37ba4ce931ac8880093e1b07d9eb84f8b71ff26e12b13e24e0c05008e1bd6a357d7d2ab7bdf00876492b2d97fd66c81ab10cf9c9133cbec99527ce26be0518ef78a0f5a13fc5864469dfc500eddb4e68befa7458c0 Hey, password is required here.","content":"<div class=\"hbe hbe-container\" id=\"hexo-blog-encrypt\" data-wpm=\"Oh, this is an invalid password. Check and try again, please.\" data-whm=\"OOPS, these decrypted content may changed, but you can still have a look.\">\n  <script id=\"hbeData\" type=\"hbeData\" data-hmacdigest=\"c927467cc8e9cf269ede8d30155058b69356873fab8078de7b634d541833e371\">845bca6bbae78d3763847ae442c60a8a9b0979b5f093ea2fe061952254277f1aecd4b8e73b1b3d5fe92217c687dbc8c39dcac6d92e187ec511fd629efae6486d651a27dc85c3b0870bc71b837b75cfe746b4029a41231192aeee026f97d4df65f0cbc3c9d24951097e4fd781cfb503d0f32c30a51dceb339b4d232c6bdf7c573d2e16a64ce458e3a55db15ab001fbda0c28c9437482feb61f8de6d56118cbc37634fba20788718831c6186a17fc1b3b0c84ac6b222d01032d142f34b9c1b197dd13e99907597dc0194b93f715413cf81dd07aceb68ada078565df417e84599258eff45c7767b1fb2ccce86122cb7d72e895023ccf8f205aa43830bc2d7826de3baeb4c1ef8d16c704b2ab7e1a862f80f54ea4a1d1b9285606a55536067163a2457d1fa6afeb91ea328405ca369b01006802fbf9109cca4a5cbff9f7921c88fc81e0eea287ee81ad3e8a07a329db9f00a3b1440b69df04bbabf60a1073350693c1c1d4a3ff950888d3146ea33c5e57a70ff6bb64d294e4a0181719753087ba5c137bf90b486c97a656b5bf2e1bf682166c76965e9c0608ea96f39b634c9b05aa706ab795af589645997da8848c49ebdea1acf5462dc27939f1172bd3b4e47219334437812d329c72d5fb1ed46f9de11c83813dc70db978a81cab2b2a4c53dc95a6dd3ecb981ff11f66954f81b5b427c3440bbe5caaede750594fbd13da68ec57ac85c6555326940bcfda040b4c0fd43cc854dcbd83a99f1930dc98d2168e36c8c8bce9810de0d43b3b9408c8c3872048a6683836ddc88a705b4e070b7ad7c126c68842854adc925bc16a24537c1b20cd475dad7d7552f456016d5bf7fafab40bbf1158aa49461071af258dc21c2605cbc30bcab956dc2687c4fa92bd53b89cd34d3d6e47652db192698d74b0e1c5c31ed56f3080c903c7c3677e2e3feb4a66d637c550c50f6a14ceb6136b1249ab1f2d464fb3fa670793d42daa43dc1ff1d207c17a4daf48ae778cb9d8e5f80e0bcd7e6eb68af06204ad889f793b71a7e92efd873d6b350da2699ebdc3c1266e04146e0f5abc6f69de8274775a0305ce2e9de4a9a66e96f554a497b4767f70ae9e7504e3c71c6af71a9cafe68c1f5b1cf8a1b68d3cb0f77967da53fc7bebd712dd93b09bf485e5c33f1206cedc4e041838eb6ebc504245b6b12d610363eea43bc8108709aa34572173223c1eb1f2152dcd9c0f3da595b037314e091a6ee2053f36ba0fac15760368f29215f8d7bab2ca11e64757b11cbe4078d83011b10b7e257923fbfc29fcbaf772e85ffcd9bbe9f4acca8c94455b8d42e3d76d17576fb20dcd385e7577959cf4654a9374ceb3a2fb27369aef68961fc41c27e65f9a184cf4a8f950a7f5170405c98330d679e404341d08cc82f866752cb90d852494a4e9e23ee6bd8159ab0961432ce630174d4274dbac47e89be945ce1e4dfda607ea087abb7ee134c132a6bc739974fcc97a051499597d1ec4c348f88802baf4bea921b3b455f07f7bd304a26b47f62f7b47e8893f49442a337f38ffbbde7498ac0a6585f39c3631eb91f0040e351c144eab2733bb77ed845006eab161341da0c1ff969c1898b17726a6889f91aefc6a975d85bbc6c385f7628da28c36d5f1ab727afa5a98eb0068768066c5de6d79dd7b2adc7de230a69d29efdef44e4165e6fa037d9818e149e22ab56c2574b85b1f098f87e07e5049c1de0df6abbeb0d78f622c1ff1475dbd983e7ac89b5fa365622a944a45f870d2c1d5be47545392465715e85383fa12dce594c5b591d65bb6b23470c1841b574909f8ab671c59dfb6c370e83993c5f136875e724a5dead34459a99501717166432317ad737d5b6fbf067edaeb2e6287ed4dc5dfbe252a3760fccc2821a2d2c3c8febf0a6bb520b28b5bf278a49c5b97c7f2fdc87fb0f2746ca102d907a1befc2f66e3a0c626468e851ae503718ce2bd3b1b23c92adf0ef180de60f36c10589b3c7a075803877bc4931f25bd4fa903836f65a3343c91dc4fceafc4e936d845f2db6a49547e90303a99fcfdb6ed46416f03d85d0909a87b4768b7dccc47a42e350f29ae101e1fef3727c34b5d4419b60400ee91c2a4da568b60f9c3d3745bc098caa3ef7759b27c0c9d5eab09102652652ff73fc89a8e44580852d3703598d769485cb5b4ba08207f97fec412f0ac04223b62ce5385b93fba952c0da8921136031fbd40308a1bf0088c6a9c69045160426aff07b94fe4372f396f93cb1325d5ec8b0a7b119e729916a6e90a923fa8be8ea3c97414e364bc188398a76a00eff9c7f30f36add211835948ac07bdbad3fefc74475ce1cae490fee04767f77437ef7ccbd021508ae177312738d2b73c5b0916d5b48b4f914470c63701a60e14426037594674564edf78db23e5611a785f6644115ca8626ba0b8afe26b1813cc6732fc87f72ab0d7bcdb983cb940f6e5f4354d2ad0390139b5c0a1ba3b1b5ae4a54fd97f2dfe4217426e57dff1e1d32e8fbf05e7336f93d93b6669454dabc8d7586d45231417880979de81f84b74f746906cf982f4a241757cac501a8a3e4e84cd49ebc1021161489c89de2cc2487c16930ad1e3871651671c77045792d765ab6f94d5829cfe419ef62c32d257cc3e781c450590f944ada47d19348267403edfea97cc770647c7323ba72aaf6b6630a37ba4ce931ac8880093e1b07d9eb84f8b71ff26e12b13e24e0c05008e1bd6a357d7d2ab7bdf00876492b2d97fd66c81ab10cf9c9133cbec99527ce26be0518ef78a0f5a13fc5864469dfc500eddb4e68befa7458c0</script>\n  <div class=\"hbe hbe-content\">\n    <div class=\"hbe hbe-input hbe-input-default\">\n      <input class=\"hbe hbe-input-field hbe-input-field-default\" type=\"password\" id=\"hbePass\">\n      <label class=\"hbe hbe-input-label hbe-input-label-default\" for=\"hbePass\">\n        <span class=\"hbe hbe-input-label-content hbe-input-label-content-default\">Hey, password is required here.</span>\n      </label>\n    </div>\n  </div>\n</div>\n<script data-pjax src=\"/lib/hbe.js\"></script><link href=\"/css/hbe.style.css\" rel=\"stylesheet\" type=\"text/css\">","tags":[{"name":"weekly","slug":"weekly","permalink":"https://jonathan1214.github.io/tags/weekly/"}]},{"title":"新年快乐","date":"2021-02-11T14:49:21.000Z","path":"2021/02/happy-chinese-new-year/","text":"今天除夕，提前说声新年快乐了。 生活无论喜乐都不可阻挡地向前进，快不快乐今天明天都得说新年快乐。新年快乐。 辞旧迎新的日子，该对过去做一个完整的了断了，回归自我的本心，由此方能知道自己在追求什么，也好不误此生。 感觉自己越来越像机器了，摒弃情感也就选择了放弃爱的能力，活着意义就更难找到了么？Live long and prosper。放弃就放弃吧。 怎么样才算主宰自己的一生呢？无论如何前半生怕是做不到，且看后半生的努力吧。 多看看书，少玩手机，多写写记录。希望明年今日不再如此迷茫，年年这时候都说这话，自己想想都有点好笑了，也罢，就逗自己笑笑吧。","content":"<p>今天除夕，提前说声新年快乐了。</p>\n<p>生活无论喜乐都不可阻挡地向前进，快不快乐今天明天都得说新年快乐。新年快乐。</p>\n<p>辞旧迎新的日子，该对过去做一个完整的了断了，回归自我的本心，由此方能知道自己在追求什么，也好不误此生。</p>\n<p>感觉自己越来越像机器了，摒弃情感也就选择了放弃爱的能力，活着意义就更难找到了么？Live long and prosper。放弃就放弃吧。</p>\n<p>怎么样才算主宰自己的一生呢？无论如何前半生怕是做不到，且看后半生的努力吧。</p>\n<p>多看看书，少玩手机，多写写记录。希望明年今日不再如此迷茫，年年这时候都说这话，自己想想都有点好笑了，也罢，就逗自己笑笑吧。</p>\n","tags":[]},{"title":"结构三十六法","date":"2021-02-01T03:01:26.000Z","path":"2021/02/thirty-six-structural-methods/","text":"845bca6bbae78d3763847ae442c60a8a92ae8301e192137dee9330961e44e5466d521ce7f0dd59db0a43cd468a81fc5562c078324f4f3500bcaa6f0bcd104d00a44ff2b5c49fece4fa8266ab4f0ccef97efa1abc279ffba844e1c7d209d01861f594084c49d0b8f4ce63886f32230694a8c9825bd2a588534d41814dfe86422069237fd22a085ca41631460bbacf68aa516ad307ee4ae89f8dd3ce6c57b609ad9836d45600f9b8bfe6dcb8ace544e261d7fca4d2a59e6ed5c8ff4c574081572fbc97b8db307659ea07d489c9810e3260a84fe631aeb1ca759e1dbd6c13d5d02d2abc84761604ff2b50efbb305baa0da31bc554ff83d36e34370f289f966f4483f6a605514d9e514390744e985a108d94349f0268d01512708fd594e517473c2e713890b181efe0bae2ef12a88554f552159312e9749c05dbbe0d37d21274a49a9c155403b984bf1a5159eaab16b4accfa977d0795e40dc9e372ec8e088afb5db642340171a8f492e62f38d41bf02b75b1841050f0e5ab955d83ee2008f3657d13b606aff5db315645fdb567545024e6cb7f8ec87ca0bbb8b747fe7ff17f9920736cee67f349526c89ca2c4cfff97f31bfb6e6756d3e545b09d89e6b029ff2ffb35129d59f5a5e53cf6224ca878c2cd96965e7ac392149fe30793997cb558c506efcb1a8351098fdc436424f79818f0cc6c0a74d007882f4a0b30e0938e2a80f8ac7c38aa7c8da8cfe780bf82658168d2d6769d2b30ca197d50d1f5ff5325195e4ffa899df5bb3fab674a3f5122875ce4a963dd5bcbd0aa5e24e73946c78d19eb0d6e1f54a9170b7ce246742ba20f67f6f611f889237cf45466f298414374e9ece7621ec8e171a03c79b80125848e9adc2a5548c9bc3504b0674812dbc078a6955d6312c40456e311ae158392aed29a7cf4bdd66a7f321bb0423d52ba0a6c7a4933f016d3aae11cb53932f33652052d7be46f8ae27d84bc7120c444f6f4de9f95b781ac514d1efbeed29a258e3f866f12bc676ed2156d3900681491906c3a8784a185cd064fa0f37d8a69617f6272bdf2767d3935e4ea8de81aeec4b7d8fed483dbb5ce427750e668837988707ce7ebfec77e91083ad778190fe432453c3c264fb91277948e1e3ba94f55db215b137f1920d8399d9157a89e122865aa98d01b4d9a5881e2c2c2a7c4beab1af7adbfb45b306ccef5eeda00e5b2bb1038db16eb6a0694289ac1cf85c447df1ba16075bcddf76d7edf66beb2036f4b4b4811adb9dedb1c18b74f55f66ffbd4ff1b3d75945e76a2c67ebf1c2f7f017598664253943b4ed2c87d4a20d6918fb9a94c6f520615621de32931d92d00d244b7f4c6b97d54c11ecc68f0dbe6de02bc4ca554e78b3ec68879afe8488e3a7037cadbcc487969c6a2ad19c26c3c164ca9d8fbb29b5bc56b71df9f04b2f3ff80dae425b06cfe7f25e31295736b6f1c6195abe7dd4c0f9ed847c9570384f799c13ad785388359a081968e3caf5c36cea2fa319f0415cff2d7dcff1a34276ab11ea345ba0edc678b6006b87637a4f15e7e49ccb3c025052af84069571e0e2582e0295486282f38d091a1e582b4694c48d824a866f96ff7f3e6249b9cfeb7e421fe3b0610f49cad6ca171b75e50f1026c41df37643916cb1c26f0fcf1a9b97facbf8ecdf2884c29c0930becd9e5b65f5ae83bcb5742f882f2af5f168612370c4b7740d1dbfdd43cf936ecd9408f2961a0e8cfb12befa9e8eb61cb19a5c4b2f50d8c01f6cbbebddfffdd2cce7eb879e6eb7ba815fa5680e5b8553a866238ff7db1a3c1c676318b87b462e51612de70d5c388e4c39222bbf67db86ac8da3de5c97017e3da3666f810e70b5924c58805dc572ea3aa8a1619a00ea0719d45fd21581f308c52837c8b384ad8f9091e048c99c06436945e1611243a4987c74176b0c91b64d701a5cedff9ec4429c13ff951d511db879836b0249ba0686b6ab75dbba182aea84e12d90da87231d9d1ae88d7ba71a5a3c0d6476daf06cc001d46c5ad31724866cc93931109f583b2a664c21770b555bf73f286b502e0b44eb60b29bade2223532c38a3264f7588c6d82c3a2631a7aab66f5e0e6c13f7c82a021be28c1f53b185b3740747162e69d30e42ed74cb9b1e3cc76c28f6cf9120d549378da75a35f1125bf900d752a6f9c7f2eee24e1581c84db191e0917b5068a9a721adf525a261a0e723c46ad0ea3861b4a0b6bf05ddef286dc08dc046d0 Hey, password is required here.","content":"<div class=\"hbe hbe-container\" id=\"hexo-blog-encrypt\" data-wpm=\"Oh, this is an invalid password. Check and try again, please.\" data-whm=\"OOPS, these decrypted content may changed, but you can still have a look.\">\n  <script id=\"hbeData\" type=\"hbeData\" data-hmacdigest=\"2ca9a9b71fd85b108a8bbee6ad8c566b6d761458fe4f2daa1c49394fcf21b728\">845bca6bbae78d3763847ae442c60a8a92ae8301e192137dee9330961e44e5466d521ce7f0dd59db0a43cd468a81fc5562c078324f4f3500bcaa6f0bcd104d00a44ff2b5c49fece4fa8266ab4f0ccef97efa1abc279ffba844e1c7d209d01861f594084c49d0b8f4ce63886f32230694a8c9825bd2a588534d41814dfe86422069237fd22a085ca41631460bbacf68aa516ad307ee4ae89f8dd3ce6c57b609ad9836d45600f9b8bfe6dcb8ace544e261d7fca4d2a59e6ed5c8ff4c574081572fbc97b8db307659ea07d489c9810e3260a84fe631aeb1ca759e1dbd6c13d5d02d2abc84761604ff2b50efbb305baa0da31bc554ff83d36e34370f289f966f4483f6a605514d9e514390744e985a108d94349f0268d01512708fd594e517473c2e713890b181efe0bae2ef12a88554f552159312e9749c05dbbe0d37d21274a49a9c155403b984bf1a5159eaab16b4accfa977d0795e40dc9e372ec8e088afb5db642340171a8f492e62f38d41bf02b75b1841050f0e5ab955d83ee2008f3657d13b606aff5db315645fdb567545024e6cb7f8ec87ca0bbb8b747fe7ff17f9920736cee67f349526c89ca2c4cfff97f31bfb6e6756d3e545b09d89e6b029ff2ffb35129d59f5a5e53cf6224ca878c2cd96965e7ac392149fe30793997cb558c506efcb1a8351098fdc436424f79818f0cc6c0a74d007882f4a0b30e0938e2a80f8ac7c38aa7c8da8cfe780bf82658168d2d6769d2b30ca197d50d1f5ff5325195e4ffa899df5bb3fab674a3f5122875ce4a963dd5bcbd0aa5e24e73946c78d19eb0d6e1f54a9170b7ce246742ba20f67f6f611f889237cf45466f298414374e9ece7621ec8e171a03c79b80125848e9adc2a5548c9bc3504b0674812dbc078a6955d6312c40456e311ae158392aed29a7cf4bdd66a7f321bb0423d52ba0a6c7a4933f016d3aae11cb53932f33652052d7be46f8ae27d84bc7120c444f6f4de9f95b781ac514d1efbeed29a258e3f866f12bc676ed2156d3900681491906c3a8784a185cd064fa0f37d8a69617f6272bdf2767d3935e4ea8de81aeec4b7d8fed483dbb5ce427750e668837988707ce7ebfec77e91083ad778190fe432453c3c264fb91277948e1e3ba94f55db215b137f1920d8399d9157a89e122865aa98d01b4d9a5881e2c2c2a7c4beab1af7adbfb45b306ccef5eeda00e5b2bb1038db16eb6a0694289ac1cf85c447df1ba16075bcddf76d7edf66beb2036f4b4b4811adb9dedb1c18b74f55f66ffbd4ff1b3d75945e76a2c67ebf1c2f7f017598664253943b4ed2c87d4a20d6918fb9a94c6f520615621de32931d92d00d244b7f4c6b97d54c11ecc68f0dbe6de02bc4ca554e78b3ec68879afe8488e3a7037cadbcc487969c6a2ad19c26c3c164ca9d8fbb29b5bc56b71df9f04b2f3ff80dae425b06cfe7f25e31295736b6f1c6195abe7dd4c0f9ed847c9570384f799c13ad785388359a081968e3caf5c36cea2fa319f0415cff2d7dcff1a34276ab11ea345ba0edc678b6006b87637a4f15e7e49ccb3c025052af84069571e0e2582e0295486282f38d091a1e582b4694c48d824a866f96ff7f3e6249b9cfeb7e421fe3b0610f49cad6ca171b75e50f1026c41df37643916cb1c26f0fcf1a9b97facbf8ecdf2884c29c0930becd9e5b65f5ae83bcb5742f882f2af5f168612370c4b7740d1dbfdd43cf936ecd9408f2961a0e8cfb12befa9e8eb61cb19a5c4b2f50d8c01f6cbbebddfffdd2cce7eb879e6eb7ba815fa5680e5b8553a866238ff7db1a3c1c676318b87b462e51612de70d5c388e4c39222bbf67db86ac8da3de5c97017e3da3666f810e70b5924c58805dc572ea3aa8a1619a00ea0719d45fd21581f308c52837c8b384ad8f9091e048c99c06436945e1611243a4987c74176b0c91b64d701a5cedff9ec4429c13ff951d511db879836b0249ba0686b6ab75dbba182aea84e12d90da87231d9d1ae88d7ba71a5a3c0d6476daf06cc001d46c5ad31724866cc93931109f583b2a664c21770b555bf73f286b502e0b44eb60b29bade2223532c38a3264f7588c6d82c3a2631a7aab66f5e0e6c13f7c82a021be28c1f53b185b3740747162e69d30e42ed74cb9b1e3cc76c28f6cf9120d549378da75a35f1125bf900d752a6f9c7f2eee24e1581c84db191e0917b5068a9a721adf525a261a0e723c46ad0ea3861b4a0b6bf05ddef286dc08dc046d0</script>\n  <div class=\"hbe hbe-content\">\n    <div class=\"hbe hbe-input hbe-input-default\">\n      <input class=\"hbe hbe-input-field hbe-input-field-default\" type=\"password\" id=\"hbePass\">\n      <label class=\"hbe hbe-input-label hbe-input-label-default\" for=\"hbePass\">\n        <span class=\"hbe hbe-input-label-content hbe-input-label-content-default\">Hey, password is required here.</span>\n      </label>\n    </div>\n  </div>\n</div>\n<script data-pjax src=\"/lib/hbe.js\"></script><link href=\"/css/hbe.style.css\" rel=\"stylesheet\" type=\"text/css\">","tags":[]},{"title":"『HDLbits』时序逻辑之 FF 和 Counter","date":"2021-01-30T06:06:01.000Z","path":"2021/01/hdlbits-sequantial-logic-ff-and-counter/","text":"刷了一天 hdlbits 了，放几道时序逻辑电路设计的题上来，对于现在的我来说，这些问题都算不得难了，因为电路都很简单，只是要用 Verilog 实现，但真正要设计电路的问题对我而言就相对困难了，比如文中的 Dualedge，难在电路设计，而不是 Verilog 实现，后者纯粹是个体力活，比如 Count clock，需要加油啊。 Edgecapture原文链接：Edgecapture。 For each bit in a 32-bit vector, capture when the input signal changes from 1 in one clock cycle to 0 the next. “Capture” means that the output will remain 1 until the register is reset (synchronous reset). Each output bit behaves like a SR flip-flop: The output bit should be set (to 1) the cycle after a 1 to 0 transition occurs. The output bit should be reset (to 0) at the positive clock edge when reset is high. If both of the above events occur at the same time, reset has precedence. In the last 4 cycles of the example waveform below, the ‘reset’ event occurs one cycle earlier than the ‘set’ event, so there is no conflict here. In the example waveform below, reset, in[1] and out[1] are shown again separately for clarity. 保持先前为 1 的状态，最好的办法莫过于使用与AND了，如 out &lt;= out | (reg_in &amp; (~in)) 简单一句就完成抓取下降沿的任务，同理易知抓取上升沿即 out &lt;= out | ((~reg_in) &amp; in)。 12345678910111213141516171819module top_module ( input clk, input reset, input [31:0] in, output reg [31:0] out); reg [31:0] reg_in; always @(posedge clk) begin reg_in &lt;= in; end always @(posedge clk) begin if ( reset ) out &lt;= 32'd0; else out &lt;= out | (reg_in &amp; (~in)); endendmodule Dualedge原文链接：Dualedge。 果然，碰到真正的时序电路设计问题我就直接懵了。下面的答案是在网上抄的，实在是惭愧。 You’re familiar with flip-flops that are triggered on the positive edge of the clock, or negative edge of the clock. A dual-edge triggered flip-flop is triggered on both edges of the clock. However, FPGAs don’t have dual-edge triggered flip-flops, and always @(posedge clk or negedge clk) is not accepted as a legal sensitivity list. Build a circuit that functionally behaves like a dual-edge triggered flip-flop: 123456789101112131415module top_module ( input clk, input d, output q); reg q_d1; reg q_d2; always@(posedge clk)begin q_d1 &lt;= d ^ q_d2; end always@(negedge clk)begin q_d2 &lt;= d ^ q_d1; end assign q = q_d1 ^ q_d2;endmodule Exams/ece241 2014 q7a原文链接：Exams/ece241 2014 q7a。 正确理解全部的需求，否则会有意想不到的BUG。 Design a 1-12 counter with the following inputs and outputs: Reset Synchronous active-high reset that forces the counter to 1 Enable Set high for the counter to run Clk Positive edge-triggered clock input Q[3:0] The output of the counter c_enable, c_load, c_d[3:0] Control signals going to the provided 4-bit counter, so correct operation can be verified. You have the following components available: the 4-bit binary counter (count4) below, which has Enable and synchronous parallel-load inputs (load has higher priority than enable). The count4 module is provided to you. Instantiate it in your circuit. logic gates 1234567module count4( input clk, input enable, input load, input [3:0] d, output reg [3:0] Q); The c_enable, c_load, and c_d outputs are the signals that go to the internal counter’s enable, load, and d inputs, respectively. Their purpose is to allow these signals to be checked for correctness. 1234567891011121314151617module top_module ( input clk, input reset, input enable, output [3:0] Q, output c_enable, output c_load, output [3:0] c_d); // count4 the_counter (clk, c_enable, c_load, c_d, Q ); assign c_d = 4'd1; assign c_enable = enable; assign c_load = reset | (Q == 4'd12 &amp;&amp; enable);endmodule 注意最后一条 assign 语句，Q == 4&#39;d12 &amp;&amp; enable，如果不测试，很容易忘记加 enable 条件，产生意想不到的 错误，我自己在测试的时候怎么才能发现这样的问题呢？hdlbits 上的 checker 是怎么做的，我很想知道。 Count clock原文地址：Count clock Create a set of counters suitable for use as a 12-hour clock (with am/pm indicator). Your counters are clocked by a fast-running clk, with a pulse on ena whenever your clock should increment (i.e., once per second). reset resets the clock to 12:00 AM. pm is 0 for AM and 1 for PM. hh, mm, and ss are two BCD (Binary-Coded Decimal) digits each for hours (01-12), minutes (00-59), and seconds (00-59). Reset has higher priority than enable, and can occur even when not enabled. The following timing diagram shows the rollover behaviour from 11:59:59 AM to 12:00:00 PM and the synchronous reset and enable behaviour. 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364module top_module( input clk, input reset, input ena, output reg pm, output reg [7:0] hh, output reg [7:0] mm, output reg [7:0] ss); wire ena_mm = (ss == 8'h59) &amp; ena; wire ena_hh = ena &amp; (ss == 8'h59) &amp; (mm == 8'h59); // ss always @(posedge clk) begin if ( reset ) ss &lt;= 0; else if ( ena ) begin if ( ss == 8'h59 ) ss &lt;= 0; else if ( ss[3:0] == 4'd9 &amp;&amp; ss[7:4] != 4'd5 ) ss &lt;= &#123;ss[7:4]+1'b1, 4'd0&#125;; else ss[3:0] &lt;= ss[3:0] + 1'b1; end end // mm always @(posedge clk) begin if ( reset ) mm &lt;= 0; else if ( ena_mm ) begin if ( mm == 8'h59 ) mm &lt;= 0; else if ( mm[3:0] == 4'd9 &amp;&amp; mm[7:4] != 4'd5 ) mm &lt;= &#123;mm[7:4] + 1'b1, 4'd0&#125;; else mm[3:0] &lt;= mm[3:0] + 1'b1; end end // hh always @(posedge clk) begin if ( reset ) hh &lt;= 8'h12; else if ( ena_hh ) begin if ( hh == 8'h12 ) hh &lt;= 8'h01; else if ( hh[3:0] == 4'd9 ) hh &lt;= &#123;hh[7:4]+1'b1, 4'd0&#125;; else hh[3:0] &lt;= hh[3:0] + 1'b1; end end always @(posedge clk) begin if ( reset ) pm &lt;= 0; else if ( ena_hh &amp;&amp; hh == 8'h11 ) pm &lt;= ~pm; else pm &lt;= pm; endendmodule","content":"<p>刷了一天 hdlbits 了，放几道时序逻辑电路设计的题上来，对于现在的我来说，这些问题都算不得难了，因为电路都很简单，只是要用 Verilog 实现，但真正要设计电路的问题对我而言就相对困难了，比如文中的 <a href=\"#Dualedge\">Dualedge</a>，难在电路设计，而不是 Verilog 实现，后者纯粹是个体力活，比如 <a href=\"#Count-clock\">Count clock</a>，需要加油啊。</p>\n<a id=\"more\"></a>\n<h2 id=\"Edgecapture\"><a href=\"#Edgecapture\" class=\"headerlink\" title=\"Edgecapture\"></a>Edgecapture</h2><p>原文链接：<a href=\"https://hdlbits.01xz.net/wiki/Edgecapture\" target=\"_blank\" rel=\"noopener\">Edgecapture</a>。</p>\n<p>For each bit in a 32-bit vector, capture when the input signal changes from 1 in one clock cycle to 0 the next. “Capture” means that the output will remain 1 until the register is reset (synchronous reset).</p>\n<p>Each output bit behaves like a SR flip-flop: The output bit should be set (to 1) the cycle after a 1 to 0 transition occurs. The output bit should be reset (to 0) at the positive clock edge when reset is high. If both of the above events occur at the same time, reset has precedence. In the last 4 cycles of the example waveform below, the ‘reset’ event occurs one cycle earlier than the ‘set’ event, so there is no conflict here.</p>\n<p>In the example waveform below, reset, in[1] and out[1] are shown again separately for clarity.</p>\n<p>保持先前为 1 的状态，最好的办法莫过于使用<code>与AND</code>了，如 <code>out &lt;= out | (reg_in &amp; (~in))</code> 简单一句就完成抓取下降沿的任务，同理易知抓取上升沿即 <code>out &lt;= out | ((~reg_in) &amp; in)</code>。</p>\n <img src=\"/2021/01/hdlbits-sequantial-logic-ff-and-counter/image-20210130143822445.png\">\n<figure class=\"highlight verilog\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">module</span> top_module (</span><br><span class=\"line\">    <span class=\"keyword\">input</span> clk,</span><br><span class=\"line\">    <span class=\"keyword\">input</span> reset,</span><br><span class=\"line\">    <span class=\"keyword\">input</span> [<span class=\"number\">31</span>:<span class=\"number\">0</span>] in,</span><br><span class=\"line\">    <span class=\"keyword\">output</span> <span class=\"keyword\">reg</span> [<span class=\"number\">31</span>:<span class=\"number\">0</span>] out</span><br><span class=\"line\">);</span><br><span class=\"line\">    <span class=\"keyword\">reg</span> [<span class=\"number\">31</span>:<span class=\"number\">0</span>] reg_in;</span><br><span class=\"line\">    <span class=\"keyword\">always</span> @(<span class=\"keyword\">posedge</span> clk) <span class=\"keyword\">begin</span></span><br><span class=\"line\">        reg_in &lt;= in;</span><br><span class=\"line\">    <span class=\"keyword\">end</span></span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">always</span> @(<span class=\"keyword\">posedge</span> clk) <span class=\"keyword\">begin</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> ( reset )</span><br><span class=\"line\">            out &lt;= <span class=\"number\">32'd0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">else</span></span><br><span class=\"line\">            out &lt;= out | (reg_in &amp; (~in));</span><br><span class=\"line\">    <span class=\"keyword\">end</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">endmodule</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"Dualedge\"><a href=\"#Dualedge\" class=\"headerlink\" title=\"Dualedge\"></a>Dualedge</h2><p>原文链接：<a href=\"https://hdlbits.01xz.net/wiki/Dualedge\" target=\"_blank\" rel=\"noopener\">Dualedge</a>。</p>\n<p>果然，碰到真正的时序电路设计问题我就直接懵了。下面的答案是在网上抄的，实在是惭愧。</p>\n<p>You’re familiar with flip-flops that are triggered on the positive edge of the clock, or negative edge of the clock. A dual-edge triggered flip-flop is triggered on both edges of the clock. However, FPGAs don’t have dual-edge triggered flip-flops, and <code>always @(posedge clk or negedge clk)</code> is not accepted as a legal sensitivity list.</p>\n<p>Build a circuit that functionally behaves like a dual-edge triggered flip-flop:</p>\n <img src=\"/2021/01/hdlbits-sequantial-logic-ff-and-counter/image-20210130150619632.png\">\n<figure class=\"highlight verilog\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">module</span> top_module (</span><br><span class=\"line\">    <span class=\"keyword\">input</span> clk,</span><br><span class=\"line\">    <span class=\"keyword\">input</span> d,</span><br><span class=\"line\">    <span class=\"keyword\">output</span> q</span><br><span class=\"line\">);</span><br><span class=\"line\">    <span class=\"keyword\">reg</span> q_d1;</span><br><span class=\"line\">    <span class=\"keyword\">reg</span> q_d2;</span><br><span class=\"line\">    <span class=\"keyword\">always</span>@(<span class=\"keyword\">posedge</span> clk)<span class=\"keyword\">begin</span></span><br><span class=\"line\">        q_d1 &lt;= d ^ q_d2;</span><br><span class=\"line\">    <span class=\"keyword\">end</span></span><br><span class=\"line\">    <span class=\"keyword\">always</span>@(<span class=\"keyword\">negedge</span> clk)<span class=\"keyword\">begin</span></span><br><span class=\"line\">        q_d2 &lt;= d ^ q_d1;</span><br><span class=\"line\">    <span class=\"keyword\">end</span></span><br><span class=\"line\">    <span class=\"keyword\">assign</span> q = q_d1 ^ q_d2;</span><br><span class=\"line\"><span class=\"keyword\">endmodule</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"Exams-ece241-2014-q7a\"><a href=\"#Exams-ece241-2014-q7a\" class=\"headerlink\" title=\"Exams/ece241 2014 q7a\"></a>Exams/ece241 2014 q7a</h2><p>原文链接：<a href=\"https://hdlbits.01xz.net/wiki/Exams/ece241_2014_q7a\" target=\"_blank\" rel=\"noopener\">Exams/ece241 2014 q7a</a>。</p>\n<p>正确理解全部的需求，否则会有意想不到的BUG。</p>\n<p>Design a 1-12 counter with the following inputs and outputs:</p>\n<ul>\n<li><strong>Reset</strong> Synchronous active-high reset that forces the counter to 1</li>\n<li><strong>Enable</strong> Set high for the counter to run</li>\n<li><strong>Clk</strong> Positive edge-triggered clock input</li>\n<li><strong>Q[3:0]</strong> The output of the counter</li>\n<li><strong>c_enable, c_load, c_d[3:0]</strong> Control signals going to the provided 4-bit counter, so correct operation can be verified.</li>\n</ul>\n<p>You have the following components available:</p>\n<ul>\n<li>the 4-bit binary counter (<strong>count4</strong>) below, which has Enable and synchronous parallel-load inputs (load has higher priority than enable). The <strong>count4</strong> module is provided to you. Instantiate it in your circuit.</li>\n<li>logic gates</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">module count4(</span><br><span class=\"line\">    input clk,</span><br><span class=\"line\">    input enable,</span><br><span class=\"line\">    input load,</span><br><span class=\"line\">    input [3:0] d,</span><br><span class=\"line\">    output reg [3:0] Q</span><br><span class=\"line\">);</span><br></pre></td></tr></table></figure>\n<p>The <strong>c_enable</strong>, <strong>c_load</strong>, and <strong>c_d</strong> outputs are the signals that go to the internal counter’s <strong>enable</strong>, <strong>load</strong>, and <strong>d</strong> inputs, respectively. Their purpose is to allow these signals to be checked for correctness.</p>\n<figure class=\"highlight verilog\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">module</span> top_module (</span><br><span class=\"line\">    <span class=\"keyword\">input</span> clk,</span><br><span class=\"line\">    <span class=\"keyword\">input</span> reset,</span><br><span class=\"line\">    <span class=\"keyword\">input</span> enable,</span><br><span class=\"line\">    <span class=\"keyword\">output</span> [<span class=\"number\">3</span>:<span class=\"number\">0</span>] Q,</span><br><span class=\"line\">    <span class=\"keyword\">output</span> c_enable,</span><br><span class=\"line\">    <span class=\"keyword\">output</span> c_load,</span><br><span class=\"line\">    <span class=\"keyword\">output</span> [<span class=\"number\">3</span>:<span class=\"number\">0</span>] c_d</span><br><span class=\"line\">); <span class=\"comment\">//</span></span><br><span class=\"line\">    </span><br><span class=\"line\">    count4 the_counter (clk, c_enable, c_load, c_d, Q );</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">assign</span> c_d = <span class=\"number\">4'd1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">assign</span> c_enable = enable;</span><br><span class=\"line\">    <span class=\"keyword\">assign</span> c_load = reset | (Q == <span class=\"number\">4'd12</span> &amp;&amp; enable);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">endmodule</span></span><br></pre></td></tr></table></figure>\n<p>注意最后一条 assign 语句，<code>Q == 4&#39;d12 &amp;&amp; enable</code>，如果不测试，很容易忘记加 <code>enable</code> 条件，产生意想不到的 错误，我自己在测试的时候怎么才能发现这样的问题呢？hdlbits 上的 checker 是怎么做的，我很想知道。</p>\n<h2 id=\"Count-clock\"><a href=\"#Count-clock\" class=\"headerlink\" title=\"Count clock\"></a>Count clock</h2><p>原文地址：<a href=\"https://hdlbits.01xz.net/wiki/Count_clock\" target=\"_blank\" rel=\"noopener\">Count clock</a></p>\n<p>Create a set of counters suitable for use as a 12-hour clock (with am/pm indicator). Your counters are clocked by a fast-running <code>clk</code>, with a pulse on <code>ena</code> whenever your clock should increment (i.e., once per second).</p>\n<p><code>reset</code> resets the clock to 12:00 AM. <code>pm</code> is 0 for AM and 1 for PM. <code>hh</code>, <code>mm</code>, and <code>ss</code> are two <strong>BCD</strong> (Binary-Coded Decimal) digits each for hours (01-12), minutes (00-59), and seconds (00-59). Reset has higher priority than enable, and can occur even when not enabled.</p>\n<p>The following timing diagram shows the rollover behaviour from <code>11:59:59 AM</code> to <code>12:00:00 PM</code> and the synchronous reset and enable behaviour.</p>\n <img src=\"/2021/01/hdlbits-sequantial-logic-ff-and-counter/image-20210130204152683.png\">\n<figure class=\"highlight verilog\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">module</span> top_module(</span><br><span class=\"line\">    <span class=\"keyword\">input</span> clk,</span><br><span class=\"line\">    <span class=\"keyword\">input</span> reset,</span><br><span class=\"line\">    <span class=\"keyword\">input</span> ena,</span><br><span class=\"line\">    <span class=\"keyword\">output</span> <span class=\"keyword\">reg</span> pm,</span><br><span class=\"line\">    <span class=\"keyword\">output</span> <span class=\"keyword\">reg</span> [<span class=\"number\">7</span>:<span class=\"number\">0</span>] hh,</span><br><span class=\"line\">    <span class=\"keyword\">output</span> <span class=\"keyword\">reg</span> [<span class=\"number\">7</span>:<span class=\"number\">0</span>] mm,</span><br><span class=\"line\">    <span class=\"keyword\">output</span> <span class=\"keyword\">reg</span> [<span class=\"number\">7</span>:<span class=\"number\">0</span>] ss); </span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">wire</span> ena_mm = (ss == <span class=\"number\">8'h59</span>) &amp; ena;</span><br><span class=\"line\">    <span class=\"keyword\">wire</span> ena_hh = ena &amp; (ss == <span class=\"number\">8'h59</span>) &amp; (mm == <span class=\"number\">8'h59</span>);</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">// ss</span></span><br><span class=\"line\">    <span class=\"keyword\">always</span> @(<span class=\"keyword\">posedge</span> clk) <span class=\"keyword\">begin</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> ( reset )</span><br><span class=\"line\">            ss &lt;= <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> ( ena ) <span class=\"keyword\">begin</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> ( ss == <span class=\"number\">8'h59</span> )</span><br><span class=\"line\">            \tss &lt;= <span class=\"number\">0</span>;</span><br><span class=\"line\">            <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> ( ss[<span class=\"number\">3</span>:<span class=\"number\">0</span>] == <span class=\"number\">4'd9</span> &amp;&amp; ss[<span class=\"number\">7</span>:<span class=\"number\">4</span>] != <span class=\"number\">4'd5</span> )</span><br><span class=\"line\">                ss &lt;= &#123;ss[<span class=\"number\">7</span>:<span class=\"number\">4</span>]+<span class=\"number\">1'b1</span>, <span class=\"number\">4'd0</span>&#125;;</span><br><span class=\"line\">            <span class=\"keyword\">else</span></span><br><span class=\"line\">                ss[<span class=\"number\">3</span>:<span class=\"number\">0</span>] &lt;= ss[<span class=\"number\">3</span>:<span class=\"number\">0</span>] + <span class=\"number\">1'b1</span>;</span><br><span class=\"line\">        <span class=\"keyword\">end</span></span><br><span class=\"line\">    <span class=\"keyword\">end</span></span><br><span class=\"line\">        </span><br><span class=\"line\">    <span class=\"comment\">// mm</span></span><br><span class=\"line\">    <span class=\"keyword\">always</span> @(<span class=\"keyword\">posedge</span> clk) <span class=\"keyword\">begin</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> ( reset )</span><br><span class=\"line\">            mm &lt;= <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> ( ena_mm ) <span class=\"keyword\">begin</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> ( mm == <span class=\"number\">8'h59</span> )</span><br><span class=\"line\">                mm &lt;= <span class=\"number\">0</span>;</span><br><span class=\"line\">            <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> ( mm[<span class=\"number\">3</span>:<span class=\"number\">0</span>] == <span class=\"number\">4'd9</span> &amp;&amp; mm[<span class=\"number\">7</span>:<span class=\"number\">4</span>] != <span class=\"number\">4'd5</span> )</span><br><span class=\"line\">                mm &lt;= &#123;mm[<span class=\"number\">7</span>:<span class=\"number\">4</span>] + <span class=\"number\">1'b1</span>, <span class=\"number\">4'd0</span>&#125;;</span><br><span class=\"line\">            <span class=\"keyword\">else</span></span><br><span class=\"line\">                mm[<span class=\"number\">3</span>:<span class=\"number\">0</span>] &lt;= mm[<span class=\"number\">3</span>:<span class=\"number\">0</span>] + <span class=\"number\">1'b1</span>;</span><br><span class=\"line\">        <span class=\"keyword\">end</span></span><br><span class=\"line\">    <span class=\"keyword\">end</span></span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">// hh</span></span><br><span class=\"line\">    <span class=\"keyword\">always</span> @(<span class=\"keyword\">posedge</span> clk) <span class=\"keyword\">begin</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> ( reset )</span><br><span class=\"line\">            hh &lt;= <span class=\"number\">8'h12</span>;</span><br><span class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> ( ena_hh ) <span class=\"keyword\">begin</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> ( hh == <span class=\"number\">8'h12</span> )</span><br><span class=\"line\">                hh &lt;= <span class=\"number\">8'h01</span>;</span><br><span class=\"line\">            <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> ( hh[<span class=\"number\">3</span>:<span class=\"number\">0</span>] == <span class=\"number\">4'd9</span> )</span><br><span class=\"line\">                hh &lt;= &#123;hh[<span class=\"number\">7</span>:<span class=\"number\">4</span>]+<span class=\"number\">1'b1</span>, <span class=\"number\">4'd0</span>&#125;;</span><br><span class=\"line\">            <span class=\"keyword\">else</span></span><br><span class=\"line\">                hh[<span class=\"number\">3</span>:<span class=\"number\">0</span>] &lt;= hh[<span class=\"number\">3</span>:<span class=\"number\">0</span>] + <span class=\"number\">1'b1</span>;  </span><br><span class=\"line\">        <span class=\"keyword\">end</span></span><br><span class=\"line\">            </span><br><span class=\"line\">    <span class=\"keyword\">end</span></span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">always</span> @(<span class=\"keyword\">posedge</span> clk) <span class=\"keyword\">begin</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> ( reset )</span><br><span class=\"line\">            pm &lt;= <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> ( ena_hh &amp;&amp; hh == <span class=\"number\">8'h11</span> )</span><br><span class=\"line\">            pm &lt;= ~pm;</span><br><span class=\"line\">        <span class=\"keyword\">else</span></span><br><span class=\"line\">            pm &lt;= pm;</span><br><span class=\"line\">    <span class=\"keyword\">end</span></span><br><span class=\"line\"><span class=\"keyword\">endmodule</span></span><br></pre></td></tr></table></figure>\n","tags":[{"name":"FPGA","slug":"FPGA","permalink":"https://jonathan1214.github.io/tags/FPGA/"},{"name":"verilog","slug":"verilog","permalink":"https://jonathan1214.github.io/tags/verilog/"}]},{"title":"20 岁了","date":"2021-01-26T00:50:10.000Z","path":"2021/01/I-am-20-years-old/","text":"有点恍惚，已经 20 岁了。 没有多开心，更多的只是伤感，已经 20 了，还是现在这个样子，不知道自己在追求什么，可以说只是单纯的活着。罢了，怕也没用，生老病死是规律，躲不了的也不用怕。 生日快乐。","content":"<p>有点恍惚，已经 20 岁了。</p>\n<p>没有多开心，更多的只是伤感，已经 20 了，还是现在这个样子，不知道自己在追求什么，可以说只是单纯的活着。罢了，怕也没用，生老病死是规律，躲不了的也不用怕。</p>\n<p>生日快乐。</p>\n","tags":[{"name":"记录","slug":"记录","permalink":"https://jonathan1214.github.io/tags/记录/"}]},{"title":"CSAPP 第二章 信息的表示及处理","date":"2021-01-24T04:55:36.000Z","path":"2021/01/csapp-chapter2-notes-integer-float/","text":"csapp 第二章笔记，包括整数表示和浮点数表示及相关的运算规则。 Lecture 2 Bits, Bytes, &amp; Integers -part 1分为两个部分，主要介绍了机器中数据的存储方式及一些运算。 第一部分介绍了如下内容，重点是无符号数（unsigned）和有符号数（signed）的关系，包括他们在机器中的存储方式、表示范围、运算法则和转换关系。 数据类型的宽度 位级表示及运算与集合运算的关系 C 中的逻辑运算 移位运算：逻辑移位与算术移位 用二进制数对整数进行表示，包括有符号数和无符号数 二进制表示的整数的数值范围（unsigned和signed） unsigned 和 signed 之间的转换关系 默认 signed 向 unsigned 转换带来的危险 扩展 signed：符号位向前扩展 扩展 unsigned：向前扩展 0 截断 unsiged：模 $2^w$ 截断 signed 数据类型的宽度 C Data Type Typical 32-bit Typical 64-bit x86-64 char 1 1 1 short 2 2 2 int 4 4 4 long 4 8 8 float 4 4 4 double 8 8 8 long double - - 10/16 pointer 4 8 8 移位运算包括逻辑移位和数值移位，对于无符号数而言，无论是左移还是右移，两种移位是相同的，补 0 即可。对有符号数来说，左移两种移位方式都是在后面补 0，而右移，数值移位需要在前面补符号位，这牵涉到后面讲到的有符号数的扩展。 无符号整数$$B2U(X)=\\Sigma^{w-1}_{i=0}x_i\\cdot2^i$$ 有符号整数$$B2T(X)=-x_{w-1}\\cdot2^{w-1}+\\Sigma^{w-2}_{i=0}x_i\\cdot2^i$$ 数值范围 无符号：0~$2^w-1$ 有符号：$-2^{w-1}$~$2^{w-1}-1$ Lecture 3 Bits, Bytes, &amp; Integers -part 2这是整数表示的第二部分，包括加法、取反、乘法和移位操作，此外还包含了数据在存储空间中的表示。 加法unsigned 加，当最终结果的位数超出原来，直接舍去进位。 signed 加，也是直接舍去进位，但注意到，补码的加法会产生两种溢出，即数据过大向上溢出变成负数（positive overflow）和数据过小向下溢出变成正数（negtive overflow）。 乘法先计算结果，在直接舍去前面的位，unsigned 和 signed 均是如此。 移位移位和乘2^k是等价的，因此一些乘法可以用移位和加法组合实现，如：(u&lt;&lt;5) - (u&lt;&lt;3) == u * 24。 但需要注意的是，对 unsigned 进行的是逻辑移位，而对 signed 进行的是算术移位。 相应的当k为负数时，移位就和除法等价了。 取反借助逐位取反我们可以得到一个补码的相反数，即 ~x + 1 == -x，但是，这条规则对 TMin 并不成立，事实上~TMin + 1 = TMin，这不难想到，因为补码表示的范围为 $-2^{w-1}$~$2^{w-1}-1$，没有与 TMin 相对应的相反数。 字节顺序数据在内存中是按照字节来存储，多字节的数据如何存储呢？ Big Endian：大端序，即低地址存放数据的高字节，依次类推。 Little Endian：小端序，即低地址存放数据的低字节。这是今天常用的处理器使用的数据存储方法。 下面以整数、指针和字符串在内存中的表示为例： 整数早大端序和小端序机器上的表示顺序完全相反。 指针的具体数值我们并不关心。 字符串比较有意思，字符串中的每个字符都可以用一个字节的ASCII码表示，因此不存在字节顺序的问题，所以字符串大端序和小端序机器上的表示是相同的。 Lecture 4 float这一讲介绍的是浮点数，包括小数二进制数表示，IEEE754浮点数标准，浮点数的舍入规则、加法和乘法。 Fractional binary numbers1011.101 为例，小数点后面的数按照负指数依次进行计算即可，这在前面也提到了。一个好的计算方法是： 对于小数部分，不考虑其为小数部分，按照 unsigned 数得出其数值，如例子中的 .101 为 5 小数部分的位数为 k，将第一步得到的数值除以 2^k 即得到最终小数部分的值，如例子中的 k = 3，最终的小数部分数值为 5/8。 这种表示方法太局限了，要对 1/3 这样的小数进行精确表示，需要很多位数，此外对于固定位数的数，我们始终要在表示的数据范围和对小数表示的精确成都进行折中。 Floating Point这里介绍 IEEE 754 标准提出的浮点数，这也是当前所有主流 CPU 支持的浮点数标准。该标准易于实现浮点数的舍入、上溢出和下溢出，它的缺点是在硬件上实现起来较慢。 典型的浮点数表示如下，M取值为 [1.0, 2.0)。$$(-1)^s\\cdot M \\cdot 2^E$$对应到内存中，表示如下： s 表示公式中的符号位 s exp 表示公式中的 E（并不相等，存在转换关系） frac 表示公式中的 M（并不相等，存在转换关系） IEEE 754 主要提供了两种浮点数标准：单精度（32位）和双精度（64位） 这两种标准是相似的，只是数据位数不同，甚至我们自己也可以参考这种定义给出如 8 位浮点数的定义，容易帮助我们理解浮点数。 针对 e 的内容的不同，划分了浮点数的类型： 00...00：denormalized exp != 0 and exp != 11...11: normalized 11...11: specail Normalizedexp != 0 and exp != 11...11，此时 E = exp - Bias， exp 为 exp 部分表示的 unsigned 值。 Bias = 2^{k-1}-1，k 为 exp 部分的位数。对于单精度，k = 8，Bias = 127，对于双精度，k=11，Bias = 1023。 公式中的 M 部分化为 M = 1.xx...xxx： xx...xxx 作为 frac 部分 最大为 frac = 000...0 (M = 1.0) 最小为 frac = 111...1 (M = 2.0 -\\delta) 由此得到了内存中 frac 部分和 exp 部分与原数据的对应关系，在考虑到符号位即可得出数据的浮点数表示。 Denormalized上述表示的问题在于，对于 M &lt; 1 的数据，无法进行处理，这部由 denormalized 定义： exp = 000...0 Bias 和前面的定义相当，但是转换关系变成 E = 1 - Bias M 表示为 0.xxx...x，xxx...x 作为 frac 部分 这样一来，exp 和 frac 所有位均为 0 时就可以表示数字 0 了，注意到这里仍然有 +0 和 -0 的区别。 Special除了上面说到的，浮点数还有一种例外，即当 exp = 111...1 时： exp = 111..1，frac = 000...0：表示 infinity 无穷大，用于表述数据运算中的溢出 exp = 111...1，frac != 000...0：表示 NaN 非数，用于表述数据运算中的无效运算结果，如 sqrt(-1)。 Special Properties 全 0 表示整数 0 数据大小比较，几乎可以使用 unsigned 整数比较方法。当然有一些例外： 首先比较符号位 -0 = 0 NaNs 大于任何数 其他均是可以的 Floating Point Rounding加法也好，乘法也好，关键在于对结果的舍入，因为位数有限，只能如此。 先计算准确的数值 然后按照规则进行舍入 默认的舍入规则为向就近 偶数（Nearest Even）靠近，如 1.4 舍入为 1， 1.5 舍入为2.0，2.5 舍入为 2.0：基本上按照向最近的数靠近（1.4==&gt;&gt;1.0），但是当出于中间时，则向最近的偶数靠近（1.5==&gt;&gt;2.0）。所以这个名字可能有些困扰，它应该分为两部分理解：优先选择近的（Nearest），如果距离两个数距离相同（half-way），则选择偶数（even）。 十进制例子如下所示（有效位数为小数点后两位）： 7.8949999 —&gt;&gt;&gt; 7.89 7.8940001 —&gt;&gt;&gt; 7.90 7.8950000 —&gt;&gt;&gt; 7.90 7.8850000 —&gt;&gt;&gt; 7.88 在二进制中，even 表示最低有效位为 0，half-way 表示最低有效位后的为 100...。如下这几个例子（有效位数为小数点后两位） 10.00011 —-&gt;&gt; 10.00 10.00110 —-&gt;&gt; 10.01 10.11100 —-&gt;&gt; 11.00 10.10100 —-&gt;&gt; 10.10 Floating Point Multiplication按照如下规则计算： s = s1 ^ s2 M = M1 * M2 E = E1 + E2 然后在进行转化和舍入。 Floating Point Additon对于 E 不相同的浮点数，先通过移位将 E 向较大的一方靠近，然后进行加法，再进行舍入。 Mathematical Properties 对加法封闭 加法满足交换律 Commutative 加法不满足结合率 Associative（因为舍入） 对乘法封闭 乘法满足交换律 乘法不满足结合律（因为舍入） Floating Point in C包括单精度 float 和双精度 double，注意他们的转换关系，即是否会产生误差，关注他们的位数即可，float 的 frac 长为23，int 长为 32，double frac 长为 52，根据短的向长的转换不会出现误差即可的得出结论。","content":"<p>csapp 第二章笔记，包括整数表示和浮点数表示及相关的运算规则。</p>\n<a id=\"more\"></a>\n<h2 id=\"Lecture-2-Bits-Bytes-amp-Integers-part-1\"><a href=\"#Lecture-2-Bits-Bytes-amp-Integers-part-1\" class=\"headerlink\" title=\"Lecture 2 Bits, Bytes, &amp; Integers -part 1\"></a>Lecture 2 Bits, Bytes, &amp; Integers -part 1</h2><p>分为两个部分，主要介绍了机器中数据的存储方式及一些运算。</p>\n<p>第一部分介绍了如下内容，重点是无符号数（unsigned）和有符号数（signed）的关系，包括他们在机器中的存储方式、表示范围、运算法则和转换关系。</p>\n<ul>\n<li>数据类型的宽度</li>\n<li>位级表示及运算与集合运算的关系</li>\n<li>C 中的逻辑运算</li>\n<li>移位运算：逻辑移位与算术移位</li>\n<li>用二进制数对整数进行表示，包括有符号数和无符号数</li>\n<li>二进制表示的整数的数值范围（unsigned和signed）</li>\n<li>unsigned 和 signed 之间的转换关系</li>\n<li>默认 signed 向 unsigned 转换带来的危险</li>\n<li>扩展 signed：符号位向前扩展</li>\n<li>扩展 unsigned：向前扩展 0</li>\n<li>截断 unsiged：模 $2^w$</li>\n<li>截断 signed</li>\n</ul>\n<h3 id=\"数据类型的宽度\"><a href=\"#数据类型的宽度\" class=\"headerlink\" title=\"数据类型的宽度\"></a>数据类型的宽度</h3><table>\n<thead>\n<tr>\n<th style=\"text-align:center\">C Data Type</th>\n<th style=\"text-align:center\">Typical 32-bit</th>\n<th style=\"text-align:center\">Typical 64-bit</th>\n<th style=\"text-align:center\">x86-64</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">char</td>\n<td style=\"text-align:center\">1</td>\n<td style=\"text-align:center\">1</td>\n<td style=\"text-align:center\">1</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">short</td>\n<td style=\"text-align:center\">2</td>\n<td style=\"text-align:center\">2</td>\n<td style=\"text-align:center\">2</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">int</td>\n<td style=\"text-align:center\">4</td>\n<td style=\"text-align:center\">4</td>\n<td style=\"text-align:center\">4</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">long</td>\n<td style=\"text-align:center\">4</td>\n<td style=\"text-align:center\">8</td>\n<td style=\"text-align:center\">8</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">float</td>\n<td style=\"text-align:center\">4</td>\n<td style=\"text-align:center\">4</td>\n<td style=\"text-align:center\">4</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">double</td>\n<td style=\"text-align:center\">8</td>\n<td style=\"text-align:center\">8</td>\n<td style=\"text-align:center\">8</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">long double</td>\n<td style=\"text-align:center\">-</td>\n<td style=\"text-align:center\">-</td>\n<td style=\"text-align:center\">10/16</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">pointer</td>\n<td style=\"text-align:center\">4</td>\n<td style=\"text-align:center\">8</td>\n<td style=\"text-align:center\">8</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"移位运算\"><a href=\"#移位运算\" class=\"headerlink\" title=\"移位运算\"></a>移位运算</h3><p>包括逻辑移位和数值移位，对于无符号数而言，无论是左移还是右移，两种移位是相同的，补 0 即可。对有符号数来说，左移两种移位方式都是在后面补 0，而右移，数值移位需要在前面补符号位，这牵涉到后面讲到的有符号数的扩展。</p>\n<h3 id=\"无符号整数\"><a href=\"#无符号整数\" class=\"headerlink\" title=\"无符号整数\"></a>无符号整数</h3><p>$$<br>B2U(X)=\\Sigma^{w-1}_{i=0}x_i\\cdot2^i<br>$$</p>\n<h3 id=\"有符号整数\"><a href=\"#有符号整数\" class=\"headerlink\" title=\"有符号整数\"></a>有符号整数</h3><p>$$<br>B2T(X)=-x_{w-1}\\cdot2^{w-1}+\\Sigma^{w-2}_{i=0}x_i\\cdot2^i<br>$$</p>\n<h3 id=\"数值范围\"><a href=\"#数值范围\" class=\"headerlink\" title=\"数值范围\"></a>数值范围</h3><ul>\n<li>无符号：0~$2^w-1$</li>\n<li>有符号：$-2^{w-1}$~$2^{w-1}-1$</li>\n</ul>\n<hr>\n<h2 id=\"Lecture-3-Bits-Bytes-amp-Integers-part-2\"><a href=\"#Lecture-3-Bits-Bytes-amp-Integers-part-2\" class=\"headerlink\" title=\"Lecture 3 Bits, Bytes, &amp; Integers -part 2\"></a>Lecture 3 Bits, Bytes, &amp; Integers -part 2</h2><p>这是整数表示的第二部分，包括加法、取反、乘法和移位操作，此外还包含了数据在存储空间中的表示。</p>\n<h3 id=\"加法\"><a href=\"#加法\" class=\"headerlink\" title=\"加法\"></a>加法</h3><p>unsigned 加，当最终结果的位数超出原来，直接舍去进位。</p>\n<p>signed 加，也是直接舍去进位，但注意到，补码的加法会产生两种溢出，即数据过大向上溢出变成负数（positive overflow）和数据过小向下溢出变成正数（negtive overflow）。</p>\n<h3 id=\"乘法\"><a href=\"#乘法\" class=\"headerlink\" title=\"乘法\"></a>乘法</h3><p>先计算结果，在直接舍去前面的位，unsigned 和 signed 均是如此。</p>\n<h3 id=\"移位\"><a href=\"#移位\" class=\"headerlink\" title=\"移位\"></a>移位</h3><p>移位和乘2^k是等价的，因此一些乘法可以用移位和加法组合实现，如：<code>(u&lt;&lt;5) - (u&lt;&lt;3) == u * 24</code>。</p>\n<p>但需要注意的是，对 unsigned 进行的是逻辑移位，而对 signed 进行的是算术移位。</p>\n<p>相应的当k为负数时，移位就和除法等价了。</p>\n<h3 id=\"取反\"><a href=\"#取反\" class=\"headerlink\" title=\"取反\"></a>取反</h3><p>借助逐位取反我们可以得到一个补码的相反数，即 <code>~x + 1 == -x</code>，但是，<strong>这条规则</strong>对 <code>TMin</code> 并不成立，事实上<code>~TMin + 1 = TMin</code>，这不难想到，因为补码表示的范围为 $-2^{w-1}$~$2^{w-1}-1$，没有与 TMin 相对应的相反数。</p>\n<h3 id=\"字节顺序\"><a href=\"#字节顺序\" class=\"headerlink\" title=\"字节顺序\"></a>字节顺序</h3><p>数据在内存中是按照字节来存储，多字节的数据如何存储呢？</p>\n<ul>\n<li>Big Endian：大端序，即低地址存放数据的高字节，依次类推。</li>\n<li><p>Little Endian：小端序，即低地址存放数据的低字节。这是今天常用的处理器使用的数据存储方法。</p>\n<img src=\"/2021/01/csapp-chapter2-notes-integer-float/Byte-ordering-example.png\" title=\"Byte-ordering-example\">\n</li>\n</ul>\n<p>下面以整数、指针和字符串在内存中的表示为例：</p>\n<ul>\n<li>整数早大端序和小端序机器上的表示顺序完全相反。</li>\n<li>指针的具体数值我们并不关心。</li>\n<li>字符串比较有意思，字符串中的每个字符都可以用一个字节的ASCII码表示，因此不存在字节顺序的问题，所以字符串大端序和小端序机器上的表示是相同的。</li>\n</ul>\n<hr>\n<h2 id=\"Lecture-4-float\"><a href=\"#Lecture-4-float\" class=\"headerlink\" title=\"Lecture 4 float\"></a>Lecture 4 float</h2><p>这一讲介绍的是浮点数，包括小数二进制数表示，IEEE754浮点数标准，浮点数的舍入规则、加法和乘法。</p>\n<h3 id=\"Fractional-binary-numbers\"><a href=\"#Fractional-binary-numbers\" class=\"headerlink\" title=\"Fractional binary numbers\"></a>Fractional binary numbers</h3><p><code>1011.101</code> 为例，小数点后面的数按照负指数依次进行计算即可，这在前面也提到了。一个好的计算方法是：</p>\n<ul>\n<li>对于小数部分，不考虑其为小数部分，按照 unsigned 数得出其数值，如例子中的 <code>.101</code> 为 5</li>\n<li>小数部分的位数为 k，将第一步得到的数值除以 2^k 即得到最终小数部分的值，如例子中的 k = 3，最终的小数部分数值为 5/8。</li>\n</ul>\n<p>这种表示方法太局限了，要对 1/3 这样的小数进行精确表示，需要很多位数，此外对于固定位数的数，我们始终要在表示的数据范围和对小数表示的精确成都进行折中。</p>\n<h3 id=\"Floating-Point\"><a href=\"#Floating-Point\" class=\"headerlink\" title=\"Floating Point\"></a>Floating Point</h3><p>这里介绍 IEEE 754 标准提出的浮点数，这也是当前所有主流 CPU 支持的浮点数标准。该标准易于实现浮点数的舍入、上溢出和下溢出，它的缺点是在硬件上实现起来较慢。</p>\n<p>典型的浮点数表示如下，M取值为 [1.0, 2.0)。<br>$$<br>(-1)^s\\cdot M \\cdot 2^E<br>$$<br>对应到内存中，表示如下：</p>\n <img src=\"/2021/01/csapp-chapter2-notes-integer-float/floating-point-representation.png\" title=\"floating-point-representation\">\n<ul>\n<li>s  表示公式中的符号位 s</li>\n<li>exp 表示公式中的 E（并不相等，存在转换关系）</li>\n<li>frac 表示公式中的 M（并不相等，存在转换关系）</li>\n</ul>\n<p>IEEE 754 主要提供了两种浮点数标准：单精度（32位）和双精度（64位）</p>\n <img src=\"/2021/01/csapp-chapter2-notes-integer-float/single-precision.png\" title=\"single-precision\">\n <img src=\"/2021/01/csapp-chapter2-notes-integer-float/double-precision.png\" title=\"double-precision\">\n<p>这两种标准是相似的，只是数据位数不同，甚至我们自己也可以参考这种定义给出如 8 位浮点数的定义，容易帮助我们理解浮点数。</p>\n<p>针对 e 的内容的不同，划分了浮点数的类型：</p>\n<ul>\n<li><code>00...00</code>：denormalized</li>\n<li><code>exp != 0 and exp != 11...11</code>: normalized</li>\n<li><code>11...11</code>: specail</li>\n</ul>\n<h4 id=\"Normalized\"><a href=\"#Normalized\" class=\"headerlink\" title=\"Normalized\"></a>Normalized</h4><p><code>exp != 0 and exp != 11...11</code>，此时 E = exp - <em>Bias</em>，</p>\n<ul>\n<li>exp 为 exp 部分表示的 unsigned 值。</li>\n<li>Bias = 2^{k-1}-1，k 为 exp 部分的位数。对于单精度，k = 8，Bias = 127，对于双精度，k=11，Bias = 1023。</li>\n</ul>\n<p>公式中的 M 部分化为 <code>M = 1.xx...xxx</code>：</p>\n<ul>\n<li><code>xx...xxx</code> 作为 frac 部分</li>\n<li>最大为 <code>frac = 000...0 (M = 1.0)</code></li>\n<li>最小为 <code>frac = 111...1 (M = 2.0 -\\delta)</code></li>\n</ul>\n<p>由此得到了内存中 frac 部分和 exp 部分与原数据的对应关系，在考虑到符号位即可得出数据的浮点数表示。</p>\n<h4 id=\"Denormalized\"><a href=\"#Denormalized\" class=\"headerlink\" title=\"Denormalized\"></a>Denormalized</h4><p>上述表示的问题在于，对于 M &lt; 1 的数据，无法进行处理，这部由 denormalized 定义：</p>\n<ul>\n<li><code>exp = 000...0</code></li>\n<li>Bias 和前面的定义相当，但是转换关系变成 E = 1 - Bias</li>\n<li>M 表示为 <code>0.xxx...x</code>，<code>xxx...x</code> 作为 frac 部分</li>\n</ul>\n<p>这样一来，exp 和 frac 所有位均为 0 时就可以表示数字 0 了，注意到这里仍然有 +0 和 -0 的区别。</p>\n<h4 id=\"Special\"><a href=\"#Special\" class=\"headerlink\" title=\"Special\"></a>Special</h4><p>除了上面说到的，浮点数还有一种例外，即当 <code>exp = 111...1</code> 时：</p>\n<ul>\n<li><code>exp = 111..1</code>，<code>frac = 000...0</code>：表示 infinity 无穷大，用于表述数据运算中的溢出</li>\n<li><p><code>exp = 111...1</code>，<code>frac != 000...0</code>：表示 NaN 非数，用于表述数据运算中的无效运算结果，如 sqrt(-1)。</p>\n<img src=\"/2021/01/csapp-chapter2-notes-integer-float/visualization-floating-point.png\" title=\"visualization-floating\">\n</li>\n</ul>\n<h3 id=\"Special-Properties\"><a href=\"#Special-Properties\" class=\"headerlink\" title=\"Special Properties\"></a>Special Properties</h3><ul>\n<li>全 0 表示整数 0</li>\n<li>数据大小比较，几乎可以使用 unsigned 整数比较方法。当然有一些例外：<ul>\n<li>首先比较符号位</li>\n<li>-0 = 0</li>\n<li>NaNs 大于任何数</li>\n<li>其他均是可以的</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"Floating-Point-Rounding\"><a href=\"#Floating-Point-Rounding\" class=\"headerlink\" title=\"Floating Point Rounding\"></a>Floating Point Rounding</h3><p>加法也好，乘法也好，关键在于对结果的舍入，因为位数有限，只能如此。</p>\n<ul>\n<li>先计算准确的数值</li>\n<li>然后按照规则进行舍入</li>\n</ul>\n<p>默认的舍入规则为向<strong>就近 偶数（Nearest Even）</strong>靠近，如 1.4 舍入为 1， 1.5 舍入为2.0，2.5 舍入为 2.0：基本上按照向最近的数靠近（1.4==&gt;&gt;1.0），但是当出于中间时，则向最近的偶数靠近（1.5==&gt;&gt;2.0）。所以这个名字可能有些困扰，它应该分为两部分理解：优先选择近的（Nearest），如果距离两个数距离相同（half-way），则选择偶数（even）。</p>\n<p>十进制例子如下所示（有效位数为小数点后两位）：</p>\n<ul>\n<li>7.8949999 —&gt;&gt;&gt; 7.89</li>\n<li>7.8940001 —&gt;&gt;&gt; 7.90</li>\n<li>7.8950000 —&gt;&gt;&gt; 7.90</li>\n<li>7.8850000 —&gt;&gt;&gt; 7.88</li>\n</ul>\n<p>在二进制中，even 表示最低有效位为 0，half-way 表示最低有效位后的为 <code>100...</code>。如下这几个例子（有效位数为小数点后两位）</p>\n<ul>\n<li>10.00011   —-&gt;&gt; 10.00</li>\n<li>10.00110   —-&gt;&gt; 10.01</li>\n<li>10.11100   —-&gt;&gt; 11.00</li>\n<li>10.10100   —-&gt;&gt; 10.10</li>\n</ul>\n<h3 id=\"Floating-Point-Multiplication\"><a href=\"#Floating-Point-Multiplication\" class=\"headerlink\" title=\"Floating Point Multiplication\"></a>Floating Point Multiplication</h3><p>按照如下规则计算：</p>\n<ul>\n<li>s = s1 ^ s2</li>\n<li>M = M1 * M2</li>\n<li>E = E1 + E2</li>\n</ul>\n<p>然后在进行转化和舍入。</p>\n<h3 id=\"Floating-Point-Additon\"><a href=\"#Floating-Point-Additon\" class=\"headerlink\" title=\"Floating Point Additon\"></a>Floating Point Additon</h3><p>对于 E 不相同的浮点数，先通过移位将 E 向较大的一方靠近，然后进行加法，再进行舍入。</p>\n<h3 id=\"Mathematical-Properties\"><a href=\"#Mathematical-Properties\" class=\"headerlink\" title=\"Mathematical Properties\"></a>Mathematical Properties</h3><ul>\n<li>对加法封闭</li>\n<li>加法满足交换律 Commutative</li>\n<li>加法不满足结合率 Associative（因为舍入）</li>\n<li>对乘法封闭</li>\n<li>乘法满足交换律</li>\n<li>乘法不满足结合律（因为舍入）</li>\n</ul>\n<h3 id=\"Floating-Point-in-C\"><a href=\"#Floating-Point-in-C\" class=\"headerlink\" title=\"Floating Point in C\"></a>Floating Point in C</h3><p>包括单精度 float 和双精度 double，注意他们的转换关系，即是否会产生误差，关注他们的位数即可，float 的 frac 长为23，int 长为 32，double frac 长为 52，根据短的向长的转换不会出现误差即可的得出结论。</p>\n <img src=\"/2021/01/csapp-chapter2-notes-integer-float/floating-point-puzzles.png\" title=\"floating-point-puzzles\">","tags":[{"name":"notes","slug":"notes","permalink":"https://jonathan1214.github.io/tags/notes/"},{"name":"csapp","slug":"csapp","permalink":"https://jonathan1214.github.io/tags/csapp/"}]},{"title":"双指针技术","date":"2021-01-22T08:10:50.000Z","path":"2021/01/two-pointer-technique/","text":"这几天忙着整理实验数据，耽搁了。数组部分已经写完了，加起来一共 10 道题吧，不算太难，接下来是链表部分，这是第一篇，包括 4 道题：Linked List Cycle，Linked List Cycle II，Intersection of Two Linked Lists，Remove Nth Node From End of List。另外，我决定用 C++ 来写后面的题，C 还是太原始了。 前两题挺有意思的，去年也写过，还记得当时写得非常痛苦，后来直接放弃了刷题计划……现在看来也不过如此，现在面临的任何问题几乎都有对应的解决方法，当时我太过自卑自傲，不愿去查找，现在好了，抱着学习的心态，想不出来就去查，学会别人的方法就好。应用双指针技术可以很好地解决这两个问题，第二题的解法叫 Floyd 算法，还挺有名的，自己画画图、设几个未知数就能把问题解决了。 Linked List Cycle Given head, the head of a linked list, determine if the linked list has a cycle in it. There is a cycle in a linked list if there is some node in the list that can be reached again by continuously following the next pointer. Internally, pos is used to denote the index of the node that tail’s next pointer is connected to. Note that pos is not passed as a parameter. Return true if there is a cycle in the linked list. Otherwise, return false. example:123Input: head = [3,2,0,-4], pos = 1Output: trueExplanation: There is a cycle in the linked list, where the tail connects to the 1st node (0-indexed). solution: 1234567891011121314bool hasCycle(ListNode *head) &#123; ListNode *slow_p = head; ListNode *fast_p = head; bool isCircle = false; while ( fast_p &amp;&amp; fast_p-next ) &#123; slow_p = slow_p-next; fast_p = fast_p-next-next; if ( slow_p == fast_p ) &#123; isCircle = true; break; &#125; &#125; return isCircle;&#125; Linked List Cycle II Given a linked list, return the node where the cycle begins. If there is no cycle, return null. There is a cycle in a linked list if there is some node in the list that can be reached again by continuously following the next pointer. Internally, pos is used to denote the index of the node that tail’s next pointer is connected to. Note that pos is not passed as a parameter. Notice that you should not modify the linked list. example: 123Input: head = [3,2,0,-4], pos = 1Output: tail connects to node index 1Explanation: There is a cycle in the linked list, where tail connects to the second node. solution: 12345678910111213141516171819202122ListNode *detectCycle(ListNode *head) &#123; ListNode *slow_p = head; ListNode *fast_p = head; bool hasCircle = false; while ( fast_p &amp;&amp; fast_p-next ) &#123; // detect circle slow_p = slow_p-next; fast_p = fast_p-next-next; if ( slow_p == fast_p ) &#123; hasCircle = true; break; &#125; &#125; if ( hasCircle ) &#123; // find circle start fast_p = head; while ( fast_p != slow_p ) &#123; fast_p = fast_p-next; slow_p = slow_p-next; &#125; return slow_p; &#125; else return nullptr;&#125; Intersection of Two Linked Lists Write a program to find the node at which the intersection of two singly linked lists begins. example: For example, the following two linked lists begin to intersect at node c1. solution: 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051ListNode *getIntersectionNode(ListNode *headA, ListNode *headB) &#123; // traverse two lists, get lengths of lists, minus them, if ( headA == headB ) return headA; ListNode *pA = headA; ListNode *pB = headB; ListNode *pp = nullptr; int lenDiff = 0; while ( pA &amp;&amp; pB ) &#123; pA = pA-next; pB = pB-next; &#125; if ( pB ) &#123; // listB is longer pp = headB; pA = headA; while ( pB ) &#123; pp = pp-next; pB = pB-next; &#125; while ( pp &amp;&amp; pA ) &#123; if ( pp == pA ) return pp; pp = pp-next; pA = pA-next; &#125; &#125; if ( pA ) &#123; // listA is longer pp = headA; pB = headB; while ( pA ) &#123; pp = pp-next; pA = pA-next; &#125; while ( pp &amp;&amp; pB ) &#123; if ( pp == pB ) return pp; pp = pp-next; pB = pB-next; &#125; &#125; // length equally pA = headA; pB = headB; while ( pA &amp;&amp; pB ) &#123; if ( pA == pB ) return pA; pA = pA-next; pB = pB-next; &#125; return nullptr;&#125; Remove Nth Node From End of ListGiven the head of a linked list, remove the nth node from the end of the list and return its head. Follow up: Could you do this in one pass? example: 12Input: head = [1,2,3,4,5], n = 2Output: [1,2,3,5] solution:12345678910111213141516171819202122ListNode* removeNthFromEnd(ListNode* head, int n) &#123; // it's a esay problem ListNode *p1 = head; ListNode *p2 = head; ListNode *toDel; // according to constrains for ( int i = 0; i &lt; n; i++) p1 = p1-&gt;next; while ( p1 &amp;&amp; p1-&gt;next ) &#123; p1 = p1-&gt;next; p2 = p2-&gt;next; &#125; if ( p1 ) &#123; toDel = p2-&gt;next; p2-&gt;next = p2-&gt;next-&gt;next; &#125; else &#123; toDel = head; head = head-&gt;next; &#125; delete toDel; return head;&#125; Summary: Two-pointer in Linked List下面给出一个链表中双指针技巧的使用模板（来自leetcode）。 123456789101112131415// Initialize slow &amp; fast pointersListNode* slow = head;ListNode* fast = head;/** * Change this condition to fit specific problem. * Attention: remember to avoid null-pointer error **/while (slow &amp;&amp; fast &amp;&amp; fast-&gt;next) &#123; slow = slow-&gt;next; // move slow pointer one step each time fast = fast-&gt;next-&gt;next; // move fast pointer two steps each time if (slow == fast) &#123; // change this condition to fit specific problem return true; &#125;&#125;return false; // change return value to fit specific problem 这就是全部的双指针技巧部分了，这几道题都不算难，解题思路也很直观，不多做分析了。","content":"<p>这几天忙着整理实验数据，耽搁了。数组部分已经写完了，加起来一共 10 道题吧，不算太难，接下来是链表部分，这是第一篇，包括 4 道题：<a href=\"https://leetcode.com/problems/linked-list-cycle/\" target=\"_blank\" rel=\"noopener\">Linked List Cycle</a>，<a href=\"https://leetcode.com/problems/linked-list-cycle-ii/\" target=\"_blank\" rel=\"noopener\">Linked List Cycle II</a>，<a href=\"https://leetcode.com/problems/intersection-of-two-linked-lists/\" target=\"_blank\" rel=\"noopener\">Intersection of Two Linked Lists</a>，<a href=\"https://leetcode.com/problems/remove-nth-node-from-end-of-list/\" target=\"_blank\" rel=\"noopener\">Remove Nth Node From End of List</a>。另外，我决定用 C++ 来写后面的题，C 还是太原始了。</p>\n<p>前两题挺有意思的，去年也写过，还记得当时写得非常痛苦，后来直接放弃了刷题计划……现在看来也不过如此，现在面临的任何问题几乎都有对应的解决方法，当时我太过自卑自傲，不愿去查找，现在好了，抱着学习的心态，想不出来就去查，学会别人的方法就好。应用双指针技术可以很好地解决这两个问题，第二题的解法叫 Floyd 算法，还挺有名的，自己画画图、设几个未知数就能把问题解决了。</p>\n<a id=\"more\"></a>\n<h2 id=\"Linked-List-Cycle\"><a href=\"#Linked-List-Cycle\" class=\"headerlink\" title=\"Linked List Cycle\"></a>Linked List Cycle</h2><blockquote>\n<p>Given <code>head</code>, the head of a linked list, determine if the linked list has a cycle in it. There is a cycle in a linked list if there is some node in the list that can be reached again by continuously following the <code>next</code> pointer. Internally, <code>pos</code> is used to denote the index of the node that tail’s <code>next</code> pointer is connected to. <strong>Note that <code>pos</code> is not passed as a parameter</strong>. Return <code>true</code> <em>if there is a cycle in the linked list</em>. Otherwise, return <code>false</code>.</p>\n</blockquote>\n<h3 id=\"example\"><a href=\"#example\" class=\"headerlink\" title=\"example:\"></a><em>example</em>:</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Input: head = [3,2,0,-4], pos = 1</span><br><span class=\"line\">Output: true</span><br><span class=\"line\">Explanation: There is a cycle in the linked list, where the tail connects to the 1st node (0-indexed).</span><br></pre></td></tr></table></figure>\n<h3 id=\"solution\"><a href=\"#solution\" class=\"headerlink\" title=\"solution:\"></a>solution:</h3> <figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">bool</span> <span class=\"title\">hasCycle</span><span class=\"params\">(ListNode *head)</span> </span>&#123;</span><br><span class=\"line\">    ListNode *slow_p = head;</span><br><span class=\"line\">    ListNode *fast_p = head;</span><br><span class=\"line\">    <span class=\"keyword\">bool</span> isCircle = <span class=\"literal\">false</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> ( fast_p &amp;&amp; fast_p-next ) &#123;</span><br><span class=\"line\">        slow_p = slow_p-next;</span><br><span class=\"line\">        fast_p = fast_p-next-next;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> ( slow_p == fast_p ) &#123;</span><br><span class=\"line\">            isCircle = <span class=\"literal\">true</span>;</span><br><span class=\"line\">            <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> isCircle;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"Linked-List-Cycle-II\"><a href=\"#Linked-List-Cycle-II\" class=\"headerlink\" title=\"Linked List Cycle II\"></a>Linked List Cycle II</h2><blockquote>\n<p>Given a linked list, return the node where the cycle begins. If there is no cycle, return null. There is a cycle in a linked list if there is some node in the list that can be reached again by continuously following the next pointer. Internally, pos is used to denote the index of the node that tail’s next pointer is connected to. Note that pos is not passed as a parameter. Notice that you should not modify the linked list.</p>\n</blockquote>\n<h3 id=\"example-1\"><a href=\"#example-1\" class=\"headerlink\" title=\"example:\"></a>example:</h3> <img src=\"/2021/01/two-pointer-technique/image-20210122164350248.png\">\n <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Input: head = [3,2,0,-4], pos = 1</span><br><span class=\"line\">Output: tail connects to node index 1</span><br><span class=\"line\">Explanation: There is a cycle in the linked list, where tail connects to the second node.</span><br></pre></td></tr></table></figure>\n<h3 id=\"solution-1\"><a href=\"#solution-1\" class=\"headerlink\" title=\"solution:\"></a>solution:</h3> <figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\">ListNode *<span class=\"title\">detectCycle</span><span class=\"params\">(ListNode *head)</span> </span>&#123;</span><br><span class=\"line\">    ListNode *slow_p = head;</span><br><span class=\"line\">    ListNode *fast_p = head;</span><br><span class=\"line\">    <span class=\"keyword\">bool</span> hasCircle = <span class=\"literal\">false</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> ( fast_p &amp;&amp; fast_p-next ) &#123; <span class=\"comment\">// detect circle</span></span><br><span class=\"line\">        slow_p = slow_p-next;</span><br><span class=\"line\">        fast_p = fast_p-next-next;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> ( slow_p == fast_p ) &#123;</span><br><span class=\"line\">            hasCircle = <span class=\"literal\">true</span>;</span><br><span class=\"line\">            <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> ( hasCircle ) &#123; <span class=\"comment\">// find circle start</span></span><br><span class=\"line\">        fast_p = head;</span><br><span class=\"line\">        <span class=\"keyword\">while</span> ( fast_p != slow_p ) &#123;</span><br><span class=\"line\">            fast_p = fast_p-next;</span><br><span class=\"line\">            slow_p = slow_p-next;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> slow_p;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">nullptr</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"Intersection-of-Two-Linked-Lists\"><a href=\"#Intersection-of-Two-Linked-Lists\" class=\"headerlink\" title=\"Intersection of Two Linked Lists\"></a>Intersection of Two Linked Lists</h2><blockquote>\n<p>Write a program to find the node at which the intersection of two singly linked lists begins.</p>\n</blockquote>\n<h3 id=\"example-2\"><a href=\"#example-2\" class=\"headerlink\" title=\"example:\"></a>example:</h3><p> For example, the following two linked lists begin to intersect at node c1.</p>\n <img src=\"/2021/01/two-pointer-technique/image-20210122173105096.png\">\n<h3 id=\"solution-2\"><a href=\"#solution-2\" class=\"headerlink\" title=\"solution:\"></a>solution:</h3> <figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\">ListNode *<span class=\"title\">getIntersectionNode</span><span class=\"params\">(ListNode *headA, ListNode *headB)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// traverse two lists, get lengths of lists, minus them,</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> ( headA == headB ) <span class=\"keyword\">return</span> headA;</span><br><span class=\"line\">    ListNode *pA = headA;</span><br><span class=\"line\">    ListNode *pB = headB;</span><br><span class=\"line\">    ListNode *pp = <span class=\"literal\">nullptr</span>;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> lenDiff = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> ( pA &amp;&amp; pB ) &#123;</span><br><span class=\"line\">        pA = pA-next;</span><br><span class=\"line\">        pB = pB-next;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> ( pB ) &#123; <span class=\"comment\">// listB is longer</span></span><br><span class=\"line\">        pp = headB;</span><br><span class=\"line\">        pA = headA;</span><br><span class=\"line\">        <span class=\"keyword\">while</span> ( pB ) &#123;</span><br><span class=\"line\">            pp = pp-next;</span><br><span class=\"line\">            pB = pB-next;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">while</span> ( pp &amp;&amp; pA ) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> ( pp == pA )</span><br><span class=\"line\">                <span class=\"keyword\">return</span> pp;</span><br><span class=\"line\">            pp = pp-next;</span><br><span class=\"line\">            pA = pA-next;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> ( pA ) &#123; <span class=\"comment\">// listA is longer</span></span><br><span class=\"line\">        pp = headA;</span><br><span class=\"line\">        pB = headB;</span><br><span class=\"line\">        <span class=\"keyword\">while</span> ( pA ) &#123;</span><br><span class=\"line\">            pp = pp-next;</span><br><span class=\"line\">            pA = pA-next;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">while</span> ( pp &amp;&amp; pB ) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> ( pp == pB )</span><br><span class=\"line\">                <span class=\"keyword\">return</span> pp;</span><br><span class=\"line\">            pp = pp-next;</span><br><span class=\"line\">            pB = pB-next;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// length equally</span></span><br><span class=\"line\">    pA = headA;</span><br><span class=\"line\">    pB = headB;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> ( pA &amp;&amp; pB ) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> ( pA == pB )</span><br><span class=\"line\">            <span class=\"keyword\">return</span> pA;</span><br><span class=\"line\">        pA = pA-next;</span><br><span class=\"line\">        pB = pB-next;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">nullptr</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"Remove-Nth-Node-From-End-of-List\"><a href=\"#Remove-Nth-Node-From-End-of-List\" class=\"headerlink\" title=\"Remove Nth Node From End of List\"></a>Remove Nth Node From End of List</h2><p>Given the <code>head</code> of a linked list, remove the <code>nth</code> node from the end of the list and return its head. <strong>Follow up:</strong> Could you do this in one pass?</p>\n<h3 id=\"example-3\"><a href=\"#example-3\" class=\"headerlink\" title=\"example:\"></a>example:</h3> <img src=\"/2021/01/two-pointer-technique/image-20210122192335143.png\">\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Input: head = [1,2,3,4,5], n = 2</span><br><span class=\"line\">Output: [1,2,3,5]</span><br></pre></td></tr></table></figure>\n<h3 id=\"solution-3\"><a href=\"#solution-3\" class=\"headerlink\" title=\"solution:\"></a>solution:</h3><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\">ListNode* <span class=\"title\">removeNthFromEnd</span><span class=\"params\">(ListNode* head, <span class=\"keyword\">int</span> n)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// it's a esay problem</span></span><br><span class=\"line\">    ListNode *p1 = head;</span><br><span class=\"line\">    ListNode *p2 = head;</span><br><span class=\"line\">    ListNode *toDel;</span><br><span class=\"line\">    <span class=\"comment\">// according to constrains</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> ( <span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; n; i++)</span><br><span class=\"line\">        p1 = p1-&gt;next;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> ( p1 &amp;&amp; p1-&gt;next ) &#123;</span><br><span class=\"line\">        p1 = p1-&gt;next;</span><br><span class=\"line\">        p2 = p2-&gt;next;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> ( p1 ) &#123;</span><br><span class=\"line\">        toDel = p2-&gt;next;</span><br><span class=\"line\">        p2-&gt;next = p2-&gt;next-&gt;next;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        toDel = head;</span><br><span class=\"line\">        head = head-&gt;next;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">delete</span> toDel;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> head;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"Summary-Two-pointer-in-Linked-List\"><a href=\"#Summary-Two-pointer-in-Linked-List\" class=\"headerlink\" title=\"Summary: Two-pointer in Linked List\"></a>Summary: Two-pointer in Linked List</h2><p>下面给出一个链表中双指针技巧的使用模板（来自leetcode）。</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// Initialize slow &amp; fast pointers</span></span><br><span class=\"line\">ListNode* slow = head;</span><br><span class=\"line\">ListNode* fast = head;</span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Change this condition to fit specific problem.</span></span><br><span class=\"line\"><span class=\"comment\"> * Attention: remember to avoid null-pointer error</span></span><br><span class=\"line\"><span class=\"comment\"> **/</span></span><br><span class=\"line\"><span class=\"keyword\">while</span> (slow &amp;&amp; fast &amp;&amp; fast-&gt;next) &#123;</span><br><span class=\"line\">    slow = slow-&gt;next;          <span class=\"comment\">// move slow pointer one step each time</span></span><br><span class=\"line\">    fast = fast-&gt;next-&gt;next;    <span class=\"comment\">// move fast pointer two steps each time</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (slow == fast) &#123;         <span class=\"comment\">// change this condition to fit specific problem</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">return</span> <span class=\"literal\">false</span>;   <span class=\"comment\">// change return value to fit specific problem</span></span><br></pre></td></tr></table></figure>\n<p>这就是全部的双指针技巧部分了，这几道题都不算难，解题思路也很直观，不多做分析了。</p>\n","tags":[{"name":"算法","slug":"算法","permalink":"https://jonathan1214.github.io/tags/算法/"},{"name":"链表","slug":"链表","permalink":"https://jonathan1214.github.io/tags/链表/"},{"name":"LeetCode","slug":"LeetCode","permalink":"https://jonathan1214.github.io/tags/LeetCode/"},{"name":"two-pointer","slug":"two-pointer","permalink":"https://jonathan1214.github.io/tags/two-pointer/"}]},{"title":"STL源码分析——02STL体系结构基础介绍","date":"2021-01-19T02:50:47.000Z","path":"2021/01/STL-source-code-analysis-02introduction-of-STL-architecture-foundation/","text":"STL 六大部件： 容器（Containers） 分配器（Allocators） 算法（Algorithms） 迭代器（Iterators） 适配器（Adapters） 仿函数（Functors） 一个例子： 1234567891011121314#include &lt;vector&gt;#include &lt;algorithm&gt;#include &lt;functional&gt;#include &lt;iostream&gt;using namespace std;int main()&#123; int ia[6] = &#123;27, 210, 12, 47, 109, 83&#125;; vector&lt;int, allocator&lt;int&gt;&gt; vi(ia, ia+6); cout &lt;&lt; count_if(vi.begin(), vi.end(), not1(bind2nd(less&lt;int&gt;(), 40))); return 0;&#125; 前闭后开区间：begin 指向第一个元素，end 指向最后一个元素的下一个位置。 遍历容器：1234Container&lt;T&gt; c;Container&lt;T&gt;::iterator ite = c.begin();for (; ite != c.end(); ++ite) &#123;&#125; C++11带来的新方法： 123456789101112131415// for ( decl : coll ) &#123;// statement;// &#125; for ( int i : &#123; 2, 3 ,5, 7&#125; ) &#123; std::cout &lt;&lt; i &lt;&lt; std::endl; &#125; std::vector&lt;double&gt; vec; for ( auto elem : vec ) &#123; std::cout &lt;&lt; elem &lt;&lt; std::endl; &#125; for ( auto &amp;elem : vec ) &#123; elem *= 3; &#125; 容器——结构与分类 序列型容器（Sequence Containers）： Array（C++11） Vector Deque List Forward-List 关联型容器（Associative Containers）：几乎所有编译器支持的底层实现都是红黑树 Set/Multiset Map/Multimap 无序容器（Unordered Containers）从C++11开始：底层实现是HashTable：Separate Chaining Unordered Set/Multiset Unordered Map/Multimap","content":"<p>STL 六大部件：</p>\n<ul>\n<li>容器（Containers）</li>\n<li>分配器（Allocators）</li>\n<li>算法（Algorithms）</li>\n<li>迭代器（Iterators）</li>\n<li>适配器（Adapters）</li>\n<li><p>仿函数（Functors）</p>\n<img src=\"/2021/01/STL-source-code-analysis-02introduction-of-STL-architecture-foundation/image-20210119105439154.png\">\n</li>\n</ul>\n<!--![image-20210119105439154](2021-01-19-STL-source-code-analysis-02introduction-of-STL-architecture-foundation/image-20210119105439154.png)-->\n<p>一个例子：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;vector&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;algorithm&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;functional&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> ia[<span class=\"number\">6</span>] = &#123;<span class=\"number\">27</span>, <span class=\"number\">210</span>, <span class=\"number\">12</span>, <span class=\"number\">47</span>, <span class=\"number\">109</span>, <span class=\"number\">83</span>&#125;;</span><br><span class=\"line\">    <span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>, allocator&lt;<span class=\"keyword\">int</span>&gt;&gt; vi(ia, ia+<span class=\"number\">6</span>);</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"built_in\">cout</span> &lt;&lt; count_if(vi.begin(), vi.end(),</span><br><span class=\"line\">            not1(bind2nd(less&lt;<span class=\"keyword\">int</span>&gt;(), <span class=\"number\">40</span>)));</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>前闭后开区间：begin 指向第一个元素，end 指向最后一个元素的下一个位置。</p>\n<p>遍历容器：<br><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Container&lt;T&gt; c;</span><br><span class=\"line\"></span><br><span class=\"line\">Container&lt;T&gt;::iterator ite = c.begin();</span><br><span class=\"line\"><span class=\"keyword\">for</span> (; ite != c.end(); ++ite) &#123;&#125;</span><br></pre></td></tr></table></figure></p>\n<p>C++11带来的新方法：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//    for ( decl : coll ) &#123;</span></span><br><span class=\"line\"><span class=\"comment\">//        statement;</span></span><br><span class=\"line\"><span class=\"comment\">//    &#125;</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> ( <span class=\"keyword\">int</span> i : &#123; <span class=\"number\">2</span>, <span class=\"number\">3</span> ,<span class=\"number\">5</span>, <span class=\"number\">7</span>&#125; ) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">std</span>::<span class=\"built_in\">cout</span> &lt;&lt; i &lt;&lt; <span class=\"built_in\">std</span>::<span class=\"built_in\">endl</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"built_in\">std</span>::<span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">double</span>&gt; vec;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> ( <span class=\"keyword\">auto</span> elem : vec ) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">std</span>::<span class=\"built_in\">cout</span> &lt;&lt; elem &lt;&lt; <span class=\"built_in\">std</span>::<span class=\"built_in\">endl</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">for</span> ( <span class=\"keyword\">auto</span> &amp;elem : vec ) &#123;</span><br><span class=\"line\">        elem *= <span class=\"number\">3</span>;</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"容器——结构与分类\"><a href=\"#容器——结构与分类\" class=\"headerlink\" title=\"容器——结构与分类\"></a>容器——结构与分类</h2> <img src=\"/2021/01/STL-source-code-analysis-02introduction-of-STL-architecture-foundation/image-20210119111745950.png\">\n<p>序列型容器（Sequence Containers）：</p>\n<ul>\n<li>Array（C++11）</li>\n<li>Vector</li>\n<li>Deque</li>\n<li>List</li>\n<li>Forward-List</li>\n</ul>\n<p>关联型容器（Associative Containers）：几乎所有编译器支持的底层实现都是红黑树</p>\n<ul>\n<li>Set/Multiset</li>\n<li>Map/Multimap</li>\n</ul>\n<p>无序容器（Unordered Containers）从C++11开始：底层实现是HashTable：Separate Chaining</p>\n<ul>\n<li>Unordered Set/Multiset</li>\n<li>Unordered Map/Multimap</li>\n</ul>\n","tags":[{"name":"notes","slug":"notes","permalink":"https://jonathan1214.github.io/tags/notes/"},{"name":"C/C++","slug":"C-C","permalink":"https://jonathan1214.github.io/tags/C-C/"},{"name":"STL","slug":"STL","permalink":"https://jonathan1214.github.io/tags/STL/"}]},{"title":"原地操作","date":"2021-01-18T01:42:40.000Z","path":"2021/01/in-place-operations/","text":"数组相关算法中的原地操作，即空间复杂度位 $O(1)$，不需要开辟新的数组空间。一共是 5 道题： Replace Elements with Greatest Element on Right Side，Remove Duplicates from Sorted Array，Move Zeroes，Sort Array By Parity，Remove Element。其中有两题之前做过了，参考 从数组中删除元素。 Replace Elements with Greatest Element on Right SideGiven an array arr, replace every element in that array with the greatest element among the elements to its right, and replace the last element with -1. After doing so, return the array. example: 12345&gt; Input: arr = [17,18,5,4,6,1]&gt; Output: [18,6,6,6,1,-1]&gt; Input: arr = [17,18,5,4,6,1]&gt; Output: [18,6,6,6,1,-1]&gt; solution：123456789101112131415161718192021&gt; int* replaceElements(int* arr, int arrSize, int* returnSize)&#123;&gt; *returnSize = arrSize;&gt; &gt; // iterate from end&gt; // since arr.length is greater than 0&gt; if ( arrSize &lt; 1 ) return arr;&gt; &gt; int r_max = arr[arrSize-1]; // tmp max&gt; arr[arrSize-1] = -1; // last value ===&gt; -1&gt; int tmp;&gt; &gt; int i = arrSize - 2; // iterate from second to last&gt; while ( i &gt;= 0 ) &#123; // iterate until first value&gt; tmp = arr[i];&gt; arr[i] = r_max;&gt; r_max = (tmp &gt; r_max) ? tmp : r_max;&gt; i--;&gt; &#125;&gt; return arr;&gt; &#125;&gt; 双指针是实现 in-place 操作的主要技巧： This was just a very brief introduction to the very versatile and widely used two-pointer technique. It is one of the main techniques used for in-place Array algorithms. We’ll be looking at it further in the next Array explore card! Move Zeroes:Given an array nums, write a function to move all 0‘s to the end of it while maintaining the relative order of the non-zero elements. example: 123&gt; Input: [0,1,0,3,12]&gt; Output: [1,3,12,0,0]&gt; solution:1234567891011121314151617181920212223242526&gt; void moveZeroes(int* nums, int numsSize)&#123;&gt; int i = -1; // point zero&gt; int j = 0; // point non zero&gt; &gt; // find first zero&gt; while ( j &lt; numsSize ) &#123;&gt; if ( nums[j] == 0 ) &#123;&gt; i = j;&gt; break;&gt; &#125;&gt; ++j;&gt; &#125;&gt; &gt; // zero not found or fist zero locates at last position&gt; if ( i &lt; 0 || i == numsSize - 1 ) return;&gt; &gt; while ( j &lt; numsSize ) &#123;&gt; if ( nums[j] != 0 ) &#123;&gt; nums[i] = nums[j];&gt; nums[j] = 0;&gt; i++;&gt; &#125;&gt; j++;&gt; &#125; &gt; &#125;&gt; Sort Array By Parity:Given an array A of non-negative integers, return an array consisting of all the even elements of A, followed by all the odd elements of A. You may return any answer array that satisfies this condition. example: 1234&gt; Input: [3,1,2,4]&gt; Output: [2,4,3,1]&gt; The outputs [4,2,3,1], [2,4,1,3], and [4,2,1,3] would also be accepted.&gt; solution: 1234567891011121314151617181920212223242526&gt; void moveZeroes(int* nums, int numsSize)&#123;&gt; int i = -1; // point zero&gt; int j = 0; // point non zero&gt; &gt; // find first zero&gt; while ( j &lt; numsSize ) &#123;&gt; if ( nums[j] == 0 ) &#123;&gt; i = j;&gt; break;&gt; &#125;&gt; ++j;&gt; &#125;&gt; &gt; // zero not found or fist zero locates at last position&gt; if ( i &lt; 0 || i == numsSize - 1 ) return;&gt; &gt; while ( j &lt; numsSize ) &#123;&gt; if ( nums[j] != 0 ) &#123;&gt; nums[i] = nums[j];&gt; nums[j] = 0;&gt; i++;&gt; &#125;&gt; j++;&gt; &#125; &gt; &#125;&gt;","content":"<p>数组相关算法中的原地操作，即空间复杂度位 $O(1)$，不需要开辟新的数组空间。一共是 5 道题：<a href=\"https://leetcode.com/problems/replace-elements-with-greatest-element-on-right-side/\" target=\"_blank\" rel=\"noopener\"> Replace Elements with Greatest Element on Right Side</a>，<a href=\"https://leetcode.com/problems/remove-duplicates-from-sorted-array/\" target=\"_blank\" rel=\"noopener\">Remove Duplicates from Sorted Array</a>，<a href=\"https://leetcode.com/problems/move-zeroes/\" target=\"_blank\" rel=\"noopener\">Move Zeroes</a>，<a href=\"https://leetcode.com/problems/sort-array-by-parity/\" target=\"_blank\" rel=\"noopener\">Sort Array By Parity</a>，<a href=\"https://leetcode.com/problems/remove-element/\" target=\"_blank\" rel=\"noopener\">Remove Element</a>。其中有两题之前做过了，参考 <a href=\"/2021/01/remove-item-from-an-array/\" title=\"从数组中删除元素\">从数组中删除元素</a>。</p>\n<a id=\"more\"></a>\n<blockquote>\n<h2 id=\"Replace-Elements-with-Greatest-Element-on-Right-Side\"><a href=\"#Replace-Elements-with-Greatest-Element-on-Right-Side\" class=\"headerlink\" title=\"Replace Elements with Greatest Element on Right Side\"></a><strong>Replace Elements with Greatest Element on Right Side</strong></h2><p>Given an array arr, replace every element in that array with the greatest element among the elements to its right, and replace the last element with -1. After doing so, return the array.</p>\n<p><em>example</em>:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt; Input: arr = [17,18,5,4,6,1]</span><br><span class=\"line\">&gt; Output: [18,6,6,6,1,-1]</span><br><span class=\"line\">&gt; Input: arr = [17,18,5,4,6,1]</span><br><span class=\"line\">&gt; Output: [18,6,6,6,1,-1]</span><br><span class=\"line\">&gt;</span><br></pre></td></tr></table></figure>\n</blockquote>\n<blockquote>\n<p>solution：<br><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt; <span class=\"function\"><span class=\"keyword\">int</span>* <span class=\"title\">replaceElements</span><span class=\"params\">(<span class=\"keyword\">int</span>* arr, <span class=\"keyword\">int</span> arrSize, <span class=\"keyword\">int</span>* returnSize)</span></span>&#123;</span><br><span class=\"line\">&gt;  *returnSize = arrSize;</span><br><span class=\"line\">&gt; </span><br><span class=\"line\">&gt;  <span class=\"comment\">// iterate from end</span></span><br><span class=\"line\">&gt;  <span class=\"comment\">// since arr.length is greater than 0</span></span><br><span class=\"line\">&gt;  <span class=\"keyword\">if</span> ( arrSize &lt; <span class=\"number\">1</span> ) <span class=\"keyword\">return</span> arr;</span><br><span class=\"line\">&gt; </span><br><span class=\"line\">&gt;  <span class=\"keyword\">int</span> r_max = arr[arrSize<span class=\"number\">-1</span>]; <span class=\"comment\">// tmp max</span></span><br><span class=\"line\">&gt;  arr[arrSize<span class=\"number\">-1</span>] = <span class=\"number\">-1</span>;        <span class=\"comment\">// last value ===&gt; -1</span></span><br><span class=\"line\">&gt;  <span class=\"keyword\">int</span> tmp;</span><br><span class=\"line\">&gt; </span><br><span class=\"line\">&gt;  <span class=\"keyword\">int</span> i     = arrSize - <span class=\"number\">2</span>;        <span class=\"comment\">// iterate from second to last</span></span><br><span class=\"line\">&gt;  <span class=\"keyword\">while</span> ( i &gt;= <span class=\"number\">0</span> ) &#123;              <span class=\"comment\">// iterate until first value</span></span><br><span class=\"line\">&gt;      tmp     = arr[i];</span><br><span class=\"line\">&gt;      arr[i]  = r_max;</span><br><span class=\"line\">&gt;      r_max   = (tmp &gt; r_max) ? tmp : r_max;</span><br><span class=\"line\">&gt;      i--;</span><br><span class=\"line\">&gt;  &#125;</span><br><span class=\"line\">&gt;  <span class=\"keyword\">return</span> arr;</span><br><span class=\"line\">&gt; &#125;</span><br><span class=\"line\">&gt;</span><br></pre></td></tr></table></figure></p>\n</blockquote>\n<p>双指针是实现 in-place 操作的主要技巧： </p>\n<blockquote>\n<p>This was just a very brief introduction to the very versatile and widely used <strong>two-pointer technique</strong>. It is one of the main techniques used for in-place Array algorithms. We’ll be looking at it further in the next Array explore card!</p>\n</blockquote>\n<blockquote>\n<h2 id=\"Move-Zeroes\"><a href=\"#Move-Zeroes\" class=\"headerlink\" title=\"Move Zeroes:\"></a><strong>Move Zeroes</strong>:</h2><p>Given an array <code>nums</code>, write a function to move all <code>0</code>‘s to the end of it while maintaining the relative order of the non-zero elements.</p>\n<p><em>example</em>:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt; Input: [0,1,0,3,12]</span><br><span class=\"line\">&gt; Output: [1,3,12,0,0]</span><br><span class=\"line\">&gt;</span><br></pre></td></tr></table></figure>\n</blockquote>\n<blockquote>\n<p>solution:<br><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt; <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">moveZeroes</span><span class=\"params\">(<span class=\"keyword\">int</span>* nums, <span class=\"keyword\">int</span> numsSize)</span></span>&#123;</span><br><span class=\"line\">&gt;     <span class=\"keyword\">int</span> i = <span class=\"number\">-1</span>;  <span class=\"comment\">// point zero</span></span><br><span class=\"line\">&gt;     <span class=\"keyword\">int</span> j = <span class=\"number\">0</span>;   <span class=\"comment\">// point non zero</span></span><br><span class=\"line\">&gt;     </span><br><span class=\"line\">&gt;     <span class=\"comment\">// find first zero</span></span><br><span class=\"line\">&gt;     <span class=\"keyword\">while</span> ( j &lt; numsSize ) &#123;</span><br><span class=\"line\">&gt;         <span class=\"keyword\">if</span> ( nums[j] == <span class=\"number\">0</span> ) &#123;</span><br><span class=\"line\">&gt;             i = j;</span><br><span class=\"line\">&gt;             <span class=\"keyword\">break</span>;</span><br><span class=\"line\">&gt;         &#125;</span><br><span class=\"line\">&gt;         ++j;</span><br><span class=\"line\">&gt;     &#125;</span><br><span class=\"line\">&gt;     </span><br><span class=\"line\">&gt;     <span class=\"comment\">// zero not found or fist zero locates at last position</span></span><br><span class=\"line\">&gt;     <span class=\"keyword\">if</span> ( i &lt; <span class=\"number\">0</span> || i == numsSize - <span class=\"number\">1</span> ) <span class=\"keyword\">return</span>;</span><br><span class=\"line\">&gt;     </span><br><span class=\"line\">&gt;     <span class=\"keyword\">while</span> ( j &lt; numsSize ) &#123;</span><br><span class=\"line\">&gt;         <span class=\"keyword\">if</span> ( nums[j] != <span class=\"number\">0</span> ) &#123;</span><br><span class=\"line\">&gt;             nums[i] = nums[j];</span><br><span class=\"line\">&gt;             nums[j] = <span class=\"number\">0</span>;</span><br><span class=\"line\">&gt;             i++;</span><br><span class=\"line\">&gt;         &#125;</span><br><span class=\"line\">&gt;         j++;</span><br><span class=\"line\">&gt;     &#125;  </span><br><span class=\"line\">&gt; &#125;</span><br><span class=\"line\">&gt;</span><br></pre></td></tr></table></figure></p>\n</blockquote>\n<blockquote>\n<h2 id=\"Sort-Array-By-Parity\"><a href=\"#Sort-Array-By-Parity\" class=\"headerlink\" title=\"Sort Array By Parity:\"></a><strong>Sort Array By Parity</strong>:</h2><p>Given an array <code>A</code> of non-negative integers, return an array consisting of all the even elements of <code>A</code>, followed by all the odd elements of <code>A</code>. You may return any answer array that satisfies this condition.</p>\n<p>example:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt; Input: [3,1,2,4]</span><br><span class=\"line\">&gt; Output: [2,4,3,1]</span><br><span class=\"line\">&gt; The outputs [4,2,3,1], [2,4,1,3], and [4,2,1,3] would also be accepted.</span><br><span class=\"line\">&gt;</span><br></pre></td></tr></table></figure>\n</blockquote>\n<blockquote>\n<p>solution:</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt; <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">moveZeroes</span><span class=\"params\">(<span class=\"keyword\">int</span>* nums, <span class=\"keyword\">int</span> numsSize)</span></span>&#123;</span><br><span class=\"line\">&gt;     <span class=\"keyword\">int</span> i = <span class=\"number\">-1</span>;  <span class=\"comment\">// point zero</span></span><br><span class=\"line\">&gt;     <span class=\"keyword\">int</span> j = <span class=\"number\">0</span>;   <span class=\"comment\">// point non zero</span></span><br><span class=\"line\">&gt;     </span><br><span class=\"line\">&gt;     <span class=\"comment\">// find first zero</span></span><br><span class=\"line\">&gt;     <span class=\"keyword\">while</span> ( j &lt; numsSize ) &#123;</span><br><span class=\"line\">&gt;         <span class=\"keyword\">if</span> ( nums[j] == <span class=\"number\">0</span> ) &#123;</span><br><span class=\"line\">&gt;             i = j;</span><br><span class=\"line\">&gt;             <span class=\"keyword\">break</span>;</span><br><span class=\"line\">&gt;         &#125;</span><br><span class=\"line\">&gt;         ++j;</span><br><span class=\"line\">&gt;     &#125;</span><br><span class=\"line\">&gt;     </span><br><span class=\"line\">&gt;     <span class=\"comment\">// zero not found or fist zero locates at last position</span></span><br><span class=\"line\">&gt;     <span class=\"keyword\">if</span> ( i &lt; <span class=\"number\">0</span> || i == numsSize - <span class=\"number\">1</span> ) <span class=\"keyword\">return</span>;</span><br><span class=\"line\">&gt;     </span><br><span class=\"line\">&gt;     <span class=\"keyword\">while</span> ( j &lt; numsSize ) &#123;</span><br><span class=\"line\">&gt;         <span class=\"keyword\">if</span> ( nums[j] != <span class=\"number\">0</span> ) &#123;</span><br><span class=\"line\">&gt;             nums[i] = nums[j];</span><br><span class=\"line\">&gt;             nums[j] = <span class=\"number\">0</span>;</span><br><span class=\"line\">&gt;             i++;</span><br><span class=\"line\">&gt;         &#125;</span><br><span class=\"line\">&gt;         j++;</span><br><span class=\"line\">&gt;     &#125;  </span><br><span class=\"line\">&gt; &#125;</span><br><span class=\"line\">&gt;</span><br></pre></td></tr></table></figure></blockquote>\n","tags":[{"name":"算法","slug":"算法","permalink":"https://jonathan1214.github.io/tags/算法/"},{"name":"LeetCode","slug":"LeetCode","permalink":"https://jonathan1214.github.io/tags/LeetCode/"},{"name":"数组","slug":"数组","permalink":"https://jonathan1214.github.io/tags/数组/"}]},{"title":"在数组中查找元素","date":"2021-01-17T01:45:29.000Z","path":"2021/01/searching-for-items-in-an-array/","text":"两道题都是在数组中查找元素，Check If N and Its Double Exist，Valid Mountain Array。问题的关键在于，在一个无序数组中查找，一般而言时间复杂度会达到 $O(n^2)$，比如第一题，看起来只能先排序一遍，然后使用二分搜索等查找方法才能把复杂度降下来，这里不给题解了，用 C 解的话还要自己写排序，看来后续要切换到用 C++ 解才行。第二题比较简单，边界条件也很好处理。 Check If N and Its Double Exist: Given an array arr of integers, check if there exists two integers N and M such that N is the double of M ( i.e. N = 2 * M). More formally check if there exists two indices i and j such that : i != j 0 &lt;= i, j &lt; arr.length arr[i] == 2 * arr[j] example: 1234&gt; Input: arr = [10,2,5,3]&gt; Output: true&gt; Explanation: N = 10 is the double of M = 5,that is, 10 = 2 * 5.&gt; Valid Mountain Array: Given an array of integers arr, return true if and only if it is a valid mountain array. Recall that arr is a mountain array if and only if: arr.length &gt;= 3 There exists some i with 0 &lt; i &lt; arr.length - 1 such that: arr[0] &lt; arr[1] &lt; ... &lt; arr[i - 1] &lt; arr[i] arr[i] &gt; arr[i + 1] &gt; ... &gt; arr[arr.length - 1] example: 123456&gt; Input: arr = [2,1]&gt; Output: false&gt; &gt; Input: arr = [3,5,5]&gt; Output: false&gt; Valid Mountain Array solution: 1234567891011121314bool validMountainArray(int* arr, int arrSize)&#123; if ( arrSize &lt;= 2 ) return false; int i = 0; // find mountain while ( i &lt; arrSize - 1 &amp;&amp; arr[i] &lt; arr[i+1] ) i++; if ( i == 0 || i == arrSize - 1) return false; while ( i &lt; arrSize - 1 &amp;&amp; arr[i] &gt; arr[i+1] ) i++; if ( i == arrSize - 1) return true; else return false;&#125;","content":"<p>两道题都是在数组中查找元素，<a href=\"https://leetcode.com/problems/check-if-n-and-its-double-exist/\" target=\"_blank\" rel=\"noopener\">Check If N and Its Double Exist</a>，<a href=\"https://leetcode.com/problems/valid-mountain-array/\" target=\"_blank\" rel=\"noopener\">Valid Mountain Array</a>。问题的关键在于，在一个无序数组中查找，一般而言时间复杂度会达到 $O(n^2)$，比如第一题，看起来只能先排序一遍，然后使用二分搜索等查找方法才能把复杂度降下来，这里不给题解了，用 C 解的话还要自己写排序，看来后续要切换到用 C++ 解才行。第二题比较简单，边界条件也很好处理。</p>\n<a id=\"more\"></a>\n<blockquote>\n<p><strong>Check If N and Its Double Exist</strong>:</p>\n<p>Given an array <code>arr</code> of integers, check if there exists two integers <code>N</code> and <code>M</code> such that <code>N</code> is the double of <code>M</code> ( i.e. <code>N = 2 * M</code>). More formally check if there exists two indices <code>i</code> and <code>j</code> such that :</p>\n<ul>\n<li><code>i != j</code></li>\n<li><code>0 &lt;= i, j &lt; arr.length</code></li>\n<li><code>arr[i] == 2 * arr[j]</code></li>\n</ul>\n<p><em>example</em>:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt; Input: arr = [10,2,5,3]</span><br><span class=\"line\">&gt; Output: true</span><br><span class=\"line\">&gt; Explanation: N = 10 is the double of M = 5,that is, 10 = 2 * 5.</span><br><span class=\"line\">&gt;</span><br></pre></td></tr></table></figure>\n</blockquote>\n<blockquote>\n<p><strong>Valid Mountain Array</strong>:</p>\n<p>Given an array of integers <code>arr</code>, return <em><code>true</code> if and only if it is a valid mountain array</em>. Recall that arr is a mountain array if and only if:</p>\n<ul>\n<li><p><code>arr.length &gt;= 3</code></p>\n</li>\n<li><p>There exists some <code>i</code> with <code>0 &lt; i &lt; arr.length - 1</code> such that:</p>\n<ul>\n<li><code>arr[0] &lt; arr[1] &lt; ... &lt; arr[i - 1] &lt; arr[i]</code></li>\n<li><code>arr[i] &gt; arr[i + 1] &gt; ... &gt; arr[arr.length - 1]</code></li>\n</ul>\n<p><em>example</em>:</p>\n</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt; Input: arr = [2,1]</span><br><span class=\"line\">&gt; Output: false</span><br><span class=\"line\">&gt; </span><br><span class=\"line\">&gt; Input: arr = [3,5,5]</span><br><span class=\"line\">&gt; Output: false</span><br><span class=\"line\">&gt;</span><br></pre></td></tr></table></figure>\n</blockquote>\n<p><code>Valid Mountain Array</code> solution:</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">bool</span> <span class=\"title\">validMountainArray</span><span class=\"params\">(<span class=\"keyword\">int</span>* arr, <span class=\"keyword\">int</span> arrSize)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> ( arrSize &lt;= <span class=\"number\">2</span> ) <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">int</span> i = <span class=\"number\">0</span>;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">// find mountain</span></span><br><span class=\"line\">    <span class=\"keyword\">while</span> ( i &lt; arrSize - <span class=\"number\">1</span> &amp;&amp; arr[i] &lt; arr[i+<span class=\"number\">1</span>] ) i++;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> ( i == <span class=\"number\">0</span> || i == arrSize - <span class=\"number\">1</span>) <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">while</span> ( i &lt; arrSize - <span class=\"number\">1</span> &amp;&amp; arr[i] &gt; arr[i+<span class=\"number\">1</span>] ) i++;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">if</span> ( i == arrSize - <span class=\"number\">1</span>) <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">    <span class=\"keyword\">else</span>                   <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n","tags":[{"name":"算法","slug":"算法","permalink":"https://jonathan1214.github.io/tags/算法/"},{"name":"LeetCode","slug":"LeetCode","permalink":"https://jonathan1214.github.io/tags/LeetCode/"},{"name":"数组","slug":"数组","permalink":"https://jonathan1214.github.io/tags/数组/"}]},{"title":"从数组中删除元素","date":"2021-01-16T01:55:59.000Z","path":"2021/01/remove-item-from-an-array/","text":"接着上一篇 向数组中插入元素 而来，下面这两道题是从数组中删除删除元素，解法一样：Remove Element 和 Remove Duplicates from Sorted Array。我还是太菜了，居然做不出来……看了 solution 之后才恍然大悟，原来如此，我把两个指针一前一后放置，然后向中间靠拢，但是后面那个指针的移动太快了，因此导致出错，真是『步子大了，喀嚓，容易扯着蛋』。 Remove Element： Given an array nums and a value val, remove all instances of that value in-place and return the new length. Do not allocate extra space for another array, you must do this by modifying the input array in-place with O(1) extra memory. The order of elements can be changed. It doesn’t matter what you leave beyond the new length. example： 12345&gt; Input: nums = [3,2,2,3], val = 3&gt; Output: 2, nums = [2,2]&gt; Explanation: Your function should return length = 2, with the first two elements of nums being 2.&gt; It doesn&apos;t matter what you leave beyond the returned length. For example if you return 2 with nums = [2,2,3,3] or nums = [2,2,0,0], your answer will be accepted.&gt; Remove Duplicates from Sorted Array： Given a sorted array nums, remove the duplicates in-place such that each element appears only once and returns the new length. Do not allocate extra space for another array, you must do this by modifying the input array in-place with O(1) extra memory. example： 1234&gt; Input: nums = [1,1,2]&gt; Output: 2, nums = [1,2]&gt; Explanation: Your function should return length = 2, with the first two elements of nums being 1 and 2 respectively. It doesn&apos;t matter what you leave beyond the returned length.&gt; 题解如下所示： 12345678910111213int removeElement(int* nums, int numsSize, int val)&#123; int i = 0; int j = numsSize - 1; while ( i &lt;= j ) &#123; // while ( nums[j] == val ) j--; if ( nums[i] == val ) &#123; nums[i] = nums[j]; j--; &#125; else i++; &#125; return j+1;&#125; 123456789101112131415int removeDuplicates(int* nums, int numsSize)&#123; if ( numsSize == 0 ) return 0; int j = 0; int n = 0; int curVal = nums[j]; while ( j &lt; numsSize - 1 ) &#123; if ( nums[j+1] != curVal ) &#123; nums[n++] = curVal; curVal = nums[j+1]; &#125; j++; &#125; nums[n++] = curVal; return n;&#125;","content":"<p>接着上一篇 <a href=\"/2021/01/inserting-items-into-an-array/\" title=\"向数组中插入元素\">向数组中插入元素</a> 而来，下面这两道题是从数组中删除删除元素，解法一样：<a href=\"https://leetcode.com/problems/remove-element/\" target=\"_blank\" rel=\"noopener\">Remove Element</a> 和 <a href=\"https://leetcode.com/problems/remove-duplicates-from-sorted-array/\" target=\"_blank\" rel=\"noopener\">Remove Duplicates from Sorted Array</a>。我还是太菜了，居然做不出来……看了 solution 之后才恍然大悟，原来如此，我把两个指针一前一后放置，然后向中间靠拢，但是后面那个指针的移动太快了，因此导致出错，真是『步子大了，喀嚓，容易扯着蛋』。</p>\n<a id=\"more\"></a>\n<blockquote>\n<p><strong>Remove Element</strong>：</p>\n<p>Given an array <em>nums</em> and a value <code>val</code>, remove all instances of that value <a href=\"https://en.wikipedia.org/wiki/In-place_algorithm\" target=\"_blank\" rel=\"noopener\"><strong>in-place</strong></a> and return the new length. Do not allocate extra space for another array, you must do this by <strong>modifying the input array <a href=\"https://en.wikipedia.org/wiki/In-place_algorithm\" target=\"_blank\" rel=\"noopener\">in-place</a></strong> with <code>O(1)</code> extra memory. The order of elements can be changed. It doesn’t matter what you leave beyond the new length.</p>\n<p><em>example</em>：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt; Input: nums = [3,2,2,3], val = 3</span><br><span class=\"line\">&gt; Output: 2, nums = [2,2]</span><br><span class=\"line\">&gt; Explanation: Your function should return length = 2, with the first two elements of nums being 2.</span><br><span class=\"line\">&gt; It doesn&apos;t matter what you leave beyond the returned length. For example if you return 2 with nums = [2,2,3,3] or nums = [2,2,0,0], your answer will be accepted.</span><br><span class=\"line\">&gt;</span><br></pre></td></tr></table></figure>\n</blockquote>\n<blockquote>\n<p><strong>Remove Duplicates from Sorted Array</strong>：</p>\n<p>Given a sorted array <em>nums</em>, remove the duplicates <a href=\"https://en.wikipedia.org/wiki/In-place_algorithm\" target=\"_blank\" rel=\"noopener\"><strong>in-place</strong></a> such that each element appears only <em>once</em> and returns the new length. Do not allocate extra space for another array, you must do this by <strong>modifying the input array <a href=\"https://en.wikipedia.org/wiki/In-place_algorithm\" target=\"_blank\" rel=\"noopener\">in-place</a></strong> with O(1) extra memory.</p>\n<p><em>example</em>：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt; Input: nums = [1,1,2]</span><br><span class=\"line\">&gt; Output: 2, nums = [1,2]</span><br><span class=\"line\">&gt; Explanation: Your function should return length = 2, with the first two elements of nums being 1 and 2 respectively. It doesn&apos;t matter what you leave beyond the returned length.</span><br><span class=\"line\">&gt;</span><br></pre></td></tr></table></figure>\n</blockquote>\n<blockquote>\n</blockquote>\n<p>题解如下所示：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">removeElement</span><span class=\"params\">(<span class=\"keyword\">int</span>* nums, <span class=\"keyword\">int</span> numsSize, <span class=\"keyword\">int</span> val)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> i      = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> j      = numsSize - <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> ( i &lt;= j ) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// while ( nums[j] == val ) j--;</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> ( nums[i] == val ) &#123;</span><br><span class=\"line\">            nums[i] = nums[j];</span><br><span class=\"line\">            j--;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span></span><br><span class=\"line\">            i++;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> j+<span class=\"number\">1</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">removeDuplicates</span><span class=\"params\">(<span class=\"keyword\">int</span>* nums, <span class=\"keyword\">int</span> numsSize)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> ( numsSize == <span class=\"number\">0</span> ) <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> j = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> n = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> curVal = nums[j];</span><br><span class=\"line\">    <span class=\"keyword\">while</span> ( j &lt; numsSize - <span class=\"number\">1</span> ) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> ( nums[j+<span class=\"number\">1</span>] != curVal ) &#123;</span><br><span class=\"line\">            nums[n++] = curVal;</span><br><span class=\"line\">            curVal = nums[j+<span class=\"number\">1</span>];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        j++;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    nums[n++] = curVal;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> n;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n","tags":[{"name":"算法","slug":"算法","permalink":"https://jonathan1214.github.io/tags/算法/"},{"name":"LeetCode","slug":"LeetCode","permalink":"https://jonathan1214.github.io/tags/LeetCode/"},{"name":"数组","slug":"数组","permalink":"https://jonathan1214.github.io/tags/数组/"}]},{"title":"向数组中插入数据","date":"2021-01-15T13:15:23.000Z","path":"2021/01/inserting-items-into-an-array/","text":"今天就不写记录了，来写下今天做的两道题：duplicate zeros，merge sorted array，均来自 Array101 模块。 在写之前，我得反省下，做这两道题花的时间实在是太长了，这直接导致下午做毕设计划的失败，今天又是没做毕设的一天。已经是周五了，下周一需要和老师约一次讨论，后面两天抓紧点完成。为了控制自己去做不想做的事情，希望做到下面这些：刷题就给自己 15mins，做不出来就不要再想了，继续想下午八成也是做不出来的，不如直接看看答案的思路，好好学习下；别打游戏了…… 先来看两道题的描述： Duplicate Zeros： Given a fixed length array arr of integers, duplicate each occurrence of zero, shifting the remaining elements to the right. Note that elements beyond the length of the original array are not written. Do the above modifications to the input array in place, do not return anything from your function. example： 12345678&gt; Input: [1,0,2,3,0,4,5,0]&gt; Output: null&gt; Explanation: After calling your function, the input array is modified to: [1,0,0,2,3,0,0,4]&gt; &gt; Input: [1,2,3]&gt; Output: null&gt; Explanation: After calling your function, the input array is modified to: [1,2,3]&gt; Merge Sorted Array： Given two sorted integer arrays nums1 and nums2, merge nums2 into nums1 as one sorted array. The number of elements initialized in nums1 and nums2 are m and n respectively. You may assume that nums1 has enough space (size that is equal to m + n) to hold additional elements from nums2. example： 123456&gt; Input: nums1 = [1,2,3,0,0,0], m = 3, nums2 = [2,5,6], n = 3&gt; Output: [1,2,2,3,5,6]&gt; &gt; Input: nums1 = [1], m = 1, nums2 = [], n = 0&gt; Output: [1]&gt; 显然，这两道题是类似的，且第二道更简单，不过在看题解之前，我实在是想不出来该如何解决问题，知道看了题解才恍然大悟：原来我一直想的都是从前到后遍历数组，以期待解决问题，但未曾想到这两道题应该从后向前思考…… 以 duplicate zeros 为例，O(n^2) 的方法很容易想到：遍历数组，每当当前值为0，复制值到下一个位置，然后将所有的值都向后推。我们这里不考虑这种暴力解法。为了达成将数组中的 0 向后复制一个位置，且多出的数直接向后推出数组，如果从前向后考虑，那么向后迭代时我们需要保存好当前的值，还要根据下一个位置的值是否为 0 进行不同的操作，这里面的条件实在太多了，很难判断。如果从后向前考虑就不一样了，假设已经操作结束了，那么有相当一部分值被推出了数组，这不是是意味着原来他们所在的空间在迭代的时候是可以被使用的，如 example 中的 5，他位于数组的第7个位，在迭代时我们根本不用管这个数，假装他不存在就好了。为了达到这个目的，我们需要先遍历一遍数组，计算有多个 0 要被复制，这样我们就知道后几个值会被推出数组，然后再从后往前遍历，将他们依次尽可能的往数组末尾推，这样就完成了整个算法，当然其中有一些边界条件很烦人，需要细心处理。最终的代码如下： 12345678910111213141516171819202122232425262728293031323334void duplicateZeros(int* arr, int arrSize)&#123; int i; int zeros_cnt = 0; int copy_from; int copy_to; // count how many zeros in array for ( i = 0; i &lt; arrSize; i++ ) &#123; if ( i + zeros_cnt &lt; arrSize ) &#123; if ( arr[i] == 0) zeros_cnt++; &#125; else break; &#125; int tmp = i + zeros_cnt; if ( zeros_cnt &gt; 0 &amp;&amp; (tmp &gt; arrSize )) zeros_cnt--; copy_from = arrSize - zeros_cnt - 1; copy_to = arrSize - 1; // zeros at boundary, copy directly if ( arr[copy_from] == 0 &amp;&amp; (tmp &gt; arrSize) ) arr[copy_to--] = arr[copy_from--]; // exchange from end while ( copy_from &gt;= 0 ) &#123; if ( arr[copy_from] == 0 ) &#123; arr[copy_to] = 0; arr[copy_to-1] = 0; copy_to -= 2; copy_from--; &#125; else &#123; arr[copy_to--] = arr[copy_from--]; &#125; &#125;&#125; 后面那道和前面的非常相似，为什么说更加简单？因为只需要从后往前向数组内写入两个数组当前值中的最小值即可，没有前面那道题中那么 tricky 的边界条件。最终的代码如下： 1234567891011void merge(int* nums1, int nums1Size, int m, int* nums2, int nums2Size, int n)&#123; int i = m + n - 1; int p_1 = m - 1; int p_2 = n - 1; int curVal; while ( p_2 &gt;= 0 &amp;&amp; p_1 &gt;= 0 ) nums1[i--] = (nums2[p_2] &gt; nums1[p_1]) ? nums2[p_2--] : nums1[p_1--]; while ( p_2 &gt;= 0 ) nums1[i--] = nums2[p_2--];&#125; 简单总结下，当问题从前向后难以解决时，不妨假设问题已经解决了，基于解决后的情形试试从后往前处理。","content":"<p>今天就不写记录了，来写下今天做的两道题：<a href=\"https://leetcode.com/problems/duplicate-zeros/\" target=\"_blank\" rel=\"noopener\">duplicate zeros</a>，<a href=\"https://leetcode.com/problems/merge-sorted-array/\" target=\"_blank\" rel=\"noopener\">merge sorted array</a>，均来自 Array101 模块。</p>\n<p>在写之前，我得反省下，做这两道题花的时间实在是太长了，这直接导致下午做毕设计划的失败，今天又是没做毕设的一天。已经是周五了，下周一需要和老师约一次讨论，后面两天抓紧点完成。为了控制自己去做不想做的事情，希望做到下面这些：刷题就给自己 15mins，做不出来就不要再想了，继续想下午八成也是做不出来的，不如直接看看答案的思路，好好学习下；别打游戏了……</p>\n<a id=\"more\"></a>\n<p>先来看两道题的描述：</p>\n<blockquote>\n<p><strong>Duplicate Zeros</strong>：</p>\n<p>Given a fixed length array <code>arr</code> of integers, duplicate each occurrence of zero, shifting the remaining elements to the right. Note that elements beyond the length of the original array are not written. Do the above modifications to the input array <strong>in place</strong>, do not return anything from your function.</p>\n<p><em>example</em>：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt; Input: [1,0,2,3,0,4,5,0]</span><br><span class=\"line\">&gt; Output: null</span><br><span class=\"line\">&gt; Explanation: After calling your function, the input array is modified to: [1,0,0,2,3,0,0,4]</span><br><span class=\"line\">&gt; </span><br><span class=\"line\">&gt; Input: [1,2,3]</span><br><span class=\"line\">&gt; Output: null</span><br><span class=\"line\">&gt; Explanation: After calling your function, the input array is modified to: [1,2,3]</span><br><span class=\"line\">&gt;</span><br></pre></td></tr></table></figure>\n</blockquote>\n<blockquote>\n<p><strong>Merge Sorted Array</strong>：</p>\n<p>Given two sorted integer arrays <code>nums1</code> and <code>nums2</code>, merge <code>nums2</code> into <code>nums1</code> as one sorted array. The number of elements initialized in <code>nums1</code> and <code>nums2</code> are <code>m</code> and <code>n</code> respectively. You may assume that <code>nums1</code> has enough space (size that is equal to <code>m + n</code>) to hold additional elements from <code>nums2</code>.</p>\n<p><em>example</em>：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt; Input: nums1 = [1,2,3,0,0,0], m = 3, nums2 = [2,5,6], n = 3</span><br><span class=\"line\">&gt; Output: [1,2,2,3,5,6]</span><br><span class=\"line\">&gt; </span><br><span class=\"line\">&gt; Input: nums1 = [1], m = 1, nums2 = [], n = 0</span><br><span class=\"line\">&gt; Output: [1]</span><br><span class=\"line\">&gt;</span><br></pre></td></tr></table></figure>\n</blockquote>\n<p>显然，这两道题是类似的，且第二道更简单，不过在看题解之前，我实在是想不出来该如何解决问题，知道看了题解才恍然大悟：原来我一直想的都是从前到后遍历数组，以期待解决问题，但未曾想到这两道题应该从后向前思考……</p>\n<p>以 duplicate zeros 为例，<code>O(n^2)</code> 的方法很容易想到：遍历数组，每当当前值为0，复制值到下一个位置，然后将所有的值都向后推。我们这里不考虑这种暴力解法。为了达成将数组中的 0 向后复制一个位置，且多出的数直接向后推出数组，如果从前向后考虑，那么向后迭代时我们需要保存好当前的值，还要根据下一个位置的值是否为 0 进行不同的操作，这里面的条件实在太多了，很难判断。如果从后向前考虑就不一样了，假设已经操作结束了，那么有相当一部分值被推出了数组，这不是是意味着原来他们所在的空间在迭代的时候是可以被使用的，如 example 中的 5，他位于数组的第7个位，在迭代时我们根本不用管这个数，假装他不存在就好了。为了达到这个目的，我们需要先遍历一遍数组，计算有多个 0 要被复制，这样我们就知道后几个值会被推出数组，然后再从后往前遍历，将他们依次尽可能的往数组末尾推，这样就完成了整个算法，当然其中有一些边界条件很烦人，需要细心处理。最终的代码如下：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">duplicateZeros</span><span class=\"params\">(<span class=\"keyword\">int</span>* arr, <span class=\"keyword\">int</span> arrSize)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> i;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> zeros_cnt = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> copy_from;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> copy_to;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// count how many zeros in array</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> ( i = <span class=\"number\">0</span>; i &lt; arrSize; i++ ) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> ( i + zeros_cnt &lt; arrSize ) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> ( arr[i] == <span class=\"number\">0</span>)</span><br><span class=\"line\">                zeros_cnt++;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span></span><br><span class=\"line\">            <span class=\"keyword\">break</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> tmp = i + zeros_cnt;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> ( zeros_cnt &gt; <span class=\"number\">0</span> &amp;&amp; (tmp &gt; arrSize )) zeros_cnt--;</span><br><span class=\"line\"></span><br><span class=\"line\">    copy_from = arrSize - zeros_cnt - <span class=\"number\">1</span>;</span><br><span class=\"line\">    copy_to   = arrSize - <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"comment\">// zeros at boundary, copy directly</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> ( arr[copy_from] == <span class=\"number\">0</span> &amp;&amp; (tmp &gt; arrSize) )</span><br><span class=\"line\">        arr[copy_to--] = arr[copy_from--];</span><br><span class=\"line\">    <span class=\"comment\">// exchange from end</span></span><br><span class=\"line\">    <span class=\"keyword\">while</span> ( copy_from &gt;= <span class=\"number\">0</span> ) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> ( arr[copy_from] == <span class=\"number\">0</span> ) &#123;</span><br><span class=\"line\">            arr[copy_to]   = <span class=\"number\">0</span>;</span><br><span class=\"line\">            arr[copy_to<span class=\"number\">-1</span>] = <span class=\"number\">0</span>;</span><br><span class=\"line\">            copy_to -= <span class=\"number\">2</span>;</span><br><span class=\"line\">            copy_from--;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            arr[copy_to--] = arr[copy_from--];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>后面那道和前面的非常相似，为什么说更加简单？因为只需要从后往前向数组内写入两个数组当前值中的最小值即可，没有前面那道题中那么 tricky 的边界条件。最终的代码如下：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">merge</span><span class=\"params\">(<span class=\"keyword\">int</span>* nums1, <span class=\"keyword\">int</span> nums1Size, <span class=\"keyword\">int</span> m, <span class=\"keyword\">int</span>* nums2, <span class=\"keyword\">int</span> nums2Size, <span class=\"keyword\">int</span> n)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> i   = m + n - <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> p_1 = m - <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> p_2 = n - <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> curVal;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> ( p_2 &gt;= <span class=\"number\">0</span> &amp;&amp; p_1 &gt;= <span class=\"number\">0</span> )</span><br><span class=\"line\">        nums1[i--] = (nums2[p_2] &gt; nums1[p_1]) ? nums2[p_2--] : nums1[p_1--];</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">while</span> ( p_2 &gt;= <span class=\"number\">0</span> )</span><br><span class=\"line\">        nums1[i--] = nums2[p_2--];</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>简单总结下，当问题从前向后难以解决时，不妨假设问题已经解决了，基于解决后的情形试试从后往前处理。</p>\n","tags":[{"name":"算法","slug":"算法","permalink":"https://jonathan1214.github.io/tags/算法/"},{"name":"LeetCode","slug":"LeetCode","permalink":"https://jonathan1214.github.io/tags/LeetCode/"},{"name":"数组","slug":"数组","permalink":"https://jonathan1214.github.io/tags/数组/"}]},{"title":"寒假第一天的学习记录","date":"2021-01-14T13:17:36.000Z","path":"2021/01/day1-holiday-learning/","text":"寒假开始学习的第一天，马马虎虎过去了，傍晚手机传来『今日游戏时长已达3h，请放下手机休息』，由此可知今天的学习成果了。若真要细究，昨天做的那些安排，今天真正完成的怕只有关于算法的那一半，FPGA 那部分是根本没碰，我是真心不想搞这个东西，不过为了那一句『做自己不喜欢做的事情，还能做好才是真的厉害』我只能坚持下去，那么明天就得真正做起来。 那么就来看看关于算法，今天到底看了些什么吧？列出如下： 极客时间『数据结构与算法之美』看了两篇，都是关于算法时间复杂度分析的。 labuladong 博客中分析的算法刷题框架思维以及刷题思路。 leetcode 中 learn 模块下的 Array101 中的 Introduction 部分中的三道题。 最后一项还是在一小时前完成的，算是冲下今天的业绩，不然也太混了。总结下今天的内容。关于时间复杂度，那两篇文章让我大概了解了算法时间复杂度的概念以及简单的分析方法，这种东西属于内功，需要经常练习，有意思的是在编程的过程中我们可以一直思考这个问题，这样写出来的代码一定会更好，具体分析在前面的那篇文章中贴出了别人的看法，我觉得说得挺好。 说的太多，还是要刷题的，不得不说，labuladong 真强啊，老做题家了，真正令我意外的是他是与我同级的人，实在是厉害，对于算法刷题的理解很深刻，我决定按照他推荐的路线去做，培养好自己的刷题框架思维，能够真正解决一些算法题，至于更加底层的理论知识，得空看看吧。在阅读的过程中，我发现递归思维的培养并不容易，我现在写代码都只会按照迭代的思想去做，或许写出来的代码更加高效，但是代码不够优雅，而且太慢了，太容易陷入细节处理之中，递归思维真的是非常必要啊！我已经找到了合适的培养递归思维的刷题路线：结合 labuladong 的文章和 leetcode 中learn 模块下的一些内容，相信在一周以后，我就能形成一个初步的递归思维，今天写的 Array101 正是第一步。 一共写了三道题：Max Consecutive Ones、Find Numbers with Even Number of Digits、Squares of a Sorted Array。这三道题都比较简单，也都是 easy 难度，都是通过迭代的方法解决的，值得一提的是最后一道题，需要利用到归并的思想降低复杂度，挺有意思的。 大概就是这些内容了，今天还是没有碰 FPGA，粗略算起来，距离碰它已经过去了近 20 天，手都生了，明天必须得重新捡起来了，不然毕设真做不完了，粗略算起来大概还有两周时间，之后几乎没有时间了，一定要在这段时间内取得突破，即完成第一个版本的译码器，modelsim 下的仿真必须跑通，如果有多余的时间，最好试试真正在 FPGA 板子上跑吧，我老感觉心里没底，这东西我真的能做出来吗？尤其现在我的心思很难放到这上面去……这大概就是那种我无法逃避的事情吧，硬着头皮上咯。","content":"<p>寒假开始学习的第一天，马马虎虎过去了，傍晚手机传来『今日游戏时长已达3h，请放下手机休息』，由此可知今天的学习成果了。若真要细究，昨天做的那些安排，今天真正完成的怕只有关于算法的那一半，FPGA 那部分是根本没碰，我是真心不想搞这个东西，不过为了那一句『做自己不喜欢做的事情，还能做好才是真的厉害』我只能坚持下去，那么明天就得真正做起来。</p>\n<a id=\"more\"></a>\n<p>那么就来看看关于算法，今天到底看了些什么吧？列出如下：</p>\n<ul>\n<li>极客时间『数据结构与算法之美』看了两篇，都是关于算法时间复杂度分析的。</li>\n<li>labuladong 博客中分析的算法刷题框架思维以及刷题思路。</li>\n<li><a href=\"leetcode.com\">leetcode</a> 中 learn 模块下的 Array101 中的 Introduction 部分中的三道题。</li>\n</ul>\n<p>最后一项还是在一小时前完成的，算是冲下今天的业绩，不然也太混了。总结下今天的内容。关于时间复杂度，那两篇文章让我大概了解了算法时间复杂度的概念以及简单的分析方法，这种东西属于内功，需要经常练习，有意思的是在编程的过程中我们可以一直思考这个问题，这样写出来的代码一定会更好，具体分析在前面的那篇文章中贴出了别人的看法，我觉得说得挺好。</p>\n<p>说的太多，还是要刷题的，不得不说，labuladong 真强啊，老做题家了，真正令我意外的是他是与我同级的人，实在是厉害，对于算法刷题的理解很深刻，我决定按照他推荐的路线去做，培养好自己的刷题框架思维，能够真正解决一些算法题，至于更加底层的理论知识，得空看看吧。在阅读的过程中，我发现递归思维的培养并不容易，我现在写代码都只会按照迭代的思想去做，或许写出来的代码更加高效，但是代码不够优雅，而且太慢了，太容易陷入细节处理之中，递归思维真的是非常必要啊！我已经找到了合适的培养递归思维的刷题路线：结合 labuladong 的文章和 <a href=\"leetcode.com\">leetcode</a> 中learn 模块下的一些内容，相信在一周以后，我就能形成一个初步的递归思维，今天写的 Array101 正是第一步。</p>\n<p>一共写了三道题：<a href=\"https://leetcode.com/problems/max-consecutive-ones/\" target=\"_blank\" rel=\"noopener\">Max Consecutive Ones</a>、<a href=\"https://leetcode.com/problems/find-numbers-with-even-number-of-digits/\" target=\"_blank\" rel=\"noopener\">Find Numbers with Even Number of Digits</a>、<a href=\"https://leetcode.com/problems/squares-of-a-sorted-array/\" target=\"_blank\" rel=\"noopener\">Squares of a Sorted Array</a>。这三道题都比较简单，也都是 easy 难度，都是通过迭代的方法解决的，值得一提的是最后一道题，需要利用到归并的思想降低复杂度，挺有意思的。</p>\n<p>大概就是这些内容了，今天还是没有碰 FPGA，粗略算起来，距离碰它已经过去了近 20 天，手都生了，明天必须得重新捡起来了，不然毕设真做不完了，粗略算起来大概还有两周时间，之后几乎没有时间了，一定要在这段时间内取得突破，即完成第一个版本的译码器，modelsim 下的仿真必须跑通，如果有多余的时间，最好试试真正在 FPGA 板子上跑吧，我老感觉心里没底，这东西我真的能做出来吗？尤其现在我的心思很难放到这上面去……这大概就是那种我无法逃避的事情吧，硬着头皮上咯。</p>\n","tags":[{"name":"记录","slug":"记录","permalink":"https://jonathan1214.github.io/tags/记录/"}]},{"title":"回家咯！","date":"2021-01-13T08:38:08.000Z","path":"2021/01/no-big-just-go-home/","text":"8 号考完了本科阶段的最后一门课，题目很简单，考得也很顺利，只是离毕业又近了一步。今天是 1 月 13 号，经过了将近两天的路程，火车转汽车再转汽车，终于在昨天下午到家了，现在还是有点恍惚，假期就这么开始了？希望结束的时候不稀里糊涂。 9 号和 10 号在学校快乐地玩耍了两天，10 号晚上坐上熟悉的那班火车，踏上回家的路。12号凌晨到达长沙，找个地方睡了一觉，第二天起来好歹是赶上了 9 点 20 回县城的大巴，令人不解的是大巴并没有同往常一样驶入站内，我们在站前的路上被放下了，有一段 6 车道宽的路，只有斑马线没有红绿灯，因为害怕，我在路旁站了起码 20 分钟才鼓起勇气穿过马路，在整个穿越的过程中，我都不太敢抬起头去看旁边的车，只敢用余光去看看，心想：如果就这么结束了，是不是也不算一件坏事儿……但并没有结束，我过去了，多等了一个小时，坐上了回来的车，这一趟折腾总算是结束了。 说回假期的计划吧，这寒冷的天气都快让我忘记这回事儿了，在这种温度下，开始学习是一件需要很大勇气的事情，希望我有勇气开始，有定力能够坚持做下去。大概就下面这几件事情： 基于 FPGA 的 LDPC 译码器 算法 C++ 英语 第一件事是最重要的，一定要放在首位，在假期结束的时候我需要完成，那么，为了达到这个目的，我的连续可用时间最长的下午就全部应该用来忙这件事儿。 其他三件都好说，没有硬性指标，只是一定要每天坚持去做，尤其是算法，希望每天都坚持看一点并且输出自己的想法，保证自己不是单纯的接受，一定要对输入的东西进行思考和加工。 还有补充几点：保证适当的运动，不要生锈了；如果可能的话，看看有没有办法提高下自己的写作水平；打字速度该怎么提高呢；字该练了‘抄抄经吧…… 学习是没有尽头的，Linux 也应该看起来了，毕竟系统都装好了……","content":"<p>8 号考完了本科阶段的最后一门课，题目很简单，考得也很顺利，只是离毕业又近了一步。今天是 1 月 13 号，经过了将近两天的路程，火车转汽车再转汽车，终于在昨天下午到家了，现在还是有点恍惚，假期就这么开始了？希望结束的时候不稀里糊涂。</p>\n<a id=\"more\"></a>\n<p>9 号和 10 号在学校快乐地玩耍了两天，10 号晚上坐上熟悉的那班火车，踏上回家的路。12号凌晨到达长沙，找个地方睡了一觉，第二天起来好歹是赶上了 9 点 20 回县城的大巴，令人不解的是大巴并没有同往常一样驶入站内，我们在站前的路上被放下了，有一段 6 车道宽的路，只有斑马线没有红绿灯，因为害怕，我在路旁站了起码 20 分钟才鼓起勇气穿过马路，在整个穿越的过程中，我都不太敢抬起头去看旁边的车，只敢用余光去看看，心想：如果就这么结束了，是不是也不算一件坏事儿……但并没有结束，我过去了，多等了一个小时，坐上了回来的车，这一趟折腾总算是结束了。</p>\n<p>说回假期的计划吧，这寒冷的天气都快让我忘记这回事儿了，在这种温度下，开始学习是一件需要很大勇气的事情，希望我有勇气开始，有定力能够坚持做下去。大概就下面这几件事情：</p>\n<ul>\n<li>基于 FPGA 的 LDPC 译码器</li>\n<li>算法</li>\n<li>C++</li>\n<li>英语</li>\n</ul>\n<p><strong>第一件事是最重要的，一定要放在首位，在假期结束的时候我需要完成，那么，为了达到这个目的，我的连续可用时间最长的下午就全部应该用来忙这件事儿。</strong></p>\n<p>其他三件都好说，没有硬性指标，<strong>只是一定要每天坚持去做</strong>，尤其是算法，希望每天都坚持看一点并且输出自己的想法，保证自己不是单纯的接受，一定要对输入的东西进行思考和加工。</p>\n<p>还有补充几点：保证适当的运动，不要生锈了；如果可能的话，看看有没有办法提高下自己的写作水平；打字速度该怎么提高呢；字该练了‘抄抄经吧……</p>\n<p>学习是没有尽头的，Linux 也应该看起来了，毕竟系统都装好了……</p>\n","tags":[{"name":"记录","slug":"记录","permalink":"https://jonathan1214.github.io/tags/记录/"}]},{"title":"ready-for-final-exam","date":"2021-01-07T15:34:18.000Z","path":"2021/01/ready-for-final-exam/","text":"又过了两天，感冒还是没好全，但好在体温不高，应该不会影响我的回家计划，数值分析已经复习得差不多了，我的目标早就不是奖学金一类的东西了，因为太难了我追求不到，倒不如现在就改换赛道，做点别的事情，也让自己能够开心点，求不得苦还是少受点为好。 真是糟糕，我已经记不得昨天发生了什么，午饭吃的什么东西呢？完全没有印象了，大概不重要的事情都是这样，一晃而过，我只是按照预订的路线去经历罢了，但那些刻骨铭心的事呢？我在内心不断对它进行加工，慢慢的，它变得面目全非，当时到底发生了发生什么，当时的我到底在想什么，都无从知晓了。这大概就是记录的意义，让平淡的生活留下痕迹，保留那些难得的珍贵回忆。 这两天的复习就是在消磨时间，因为内心认为考试比较简单，没有必要花太多时间，所以早就把认为该看的内容看完了，可惜的是多出来的这点时间全都白白消耗了，打游戏，逛论坛，刷 B 站，干什么都好，就是没有正经学习。啊！该做的计划也没有做，记得用notion吧，或者找一个更好的离线版的工具，不然每天真的不知道自己都干了些什么，用文字记录虽然可以，但总是不够直白，图表形式才是最好的。罢了罢了，明天再说，又是这样的态度，可惜没有办法，只能明天再说了。 明天好好考试，然后找老师讨论下放假要完成的任务，制定一个好的计划，这大概就是接下来的安排了。晚安。","content":"<p>又过了两天，感冒还是没好全，但好在体温不高，应该不会影响我的回家计划，数值分析已经复习得差不多了，我的目标早就不是奖学金一类的东西了，因为太难了我追求不到，倒不如现在就改换赛道，做点别的事情，也让自己能够开心点，求不得苦还是少受点为好。</p>\n<p>真是糟糕，我已经记不得昨天发生了什么，午饭吃的什么东西呢？完全没有印象了，大概不重要的事情都是这样，一晃而过，我只是按照预订的路线去经历罢了，但那些刻骨铭心的事呢？我在内心不断对它进行加工，慢慢的，它变得面目全非，当时到底发生了发生什么，当时的我到底在想什么，都无从知晓了。这大概就是记录的意义，让平淡的生活留下痕迹，保留那些难得的珍贵回忆。</p>\n<p>这两天的复习就是在消磨时间，因为内心认为考试比较简单，没有必要花太多时间，所以早就把认为该看的内容看完了，可惜的是多出来的这点时间全都白白消耗了，打游戏，逛论坛，刷 B 站，干什么都好，就是没有正经学习。啊！该做的计划也没有做，记得用notion吧，或者找一个更好的离线版的工具，不然每天真的不知道自己都干了些什么，用文字记录虽然可以，但总是不够直白，图表形式才是最好的。罢了罢了，明天再说，又是这样的态度，可惜没有办法，只能明天再说了。</p>\n<p>明天好好考试，然后找老师讨论下放假要完成的任务，制定一个好的计划，这大概就是接下来的安排了。晚安。</p>\n","tags":[{"name":"记录","slug":"记录","permalink":"https://jonathan1214.github.io/tags/记录/"}]},{"title":"算法复杂度分析","date":"2021-01-06T02:52:57.000Z","path":"2021/01/alogorithm-notes-complexity-analysis/","text":"以下内容为了极客时间专栏『数据结构与算法之美』的学习笔记。 复杂度也叫渐进复杂度，包括时间复杂度和空间复杂度，用来分析算法执行效率和数据规模之间的增长关系，可以粗略地表示，越高阶复杂度的算法，执行效率越低。 大 O 时间复杂度实际上并不具体表示代码真正的执行时间，而是表示代码执行时间随数据规模增长的变化趋势，所以，也叫作渐进时间复杂度（asymptotic time complexity），简称时间复杂度。 具体的时间复杂度分析，有下面几个比较实用的方法： 只关注循环次数执行最多的一段代码 加法法则：总复杂度等于量级最大的那段代码的复杂度 如果 T1(n)=O(f(n))，T2(n)=O(g(n))；那么 T(n)=T1(n)+T2(n)=max(O(f(n)), O(g(n))) =O(max(f(n), g(n)))。 乘法法则：嵌套代码的复杂度等于嵌套内外代码复杂度的乘积 如果 T1(n)=O(f(n))，T2(n)=O(g(n))；那么 T(n)=T1(n)*T2(n)=O(f(n))*O(g(n))=O(f(n)*g(n))。 1.1 几种常见的时间复杂度实例分析可以分为多项式量级和非多项式量级，把时间复杂度为非多项式量级的算法问题叫作 NP（Non-Deterministic Polynomial，非确定多项式）问题。 O(1)：一般情况下，只要算法中不存在循环语句、递归语句，即使有成千上万行的代码，其时间复杂度也是Ο(1)。 O(logn)、O(nlogn)： 12int i=1;while (i &lt;= n) i = i * 2; O(m+n)、O(m*n) 1.2 空间复杂度分析类比时间复杂度，空间复杂度的全称是渐进空间复杂度，表示算法的存储空间与数据规模之间的增长关系。一般情况下，很少去分析空间复杂度，因为在现在的硬件条件下，绝大多数时候，我们更加在乎时间复杂度，常常牺牲一部分空间复杂度去降低算法的时间复杂度。 1.3 Q：我们项目之前都会进行性能测试，再做代码的时间复杂度、空间复杂度分析，是不是多此一举呢？而且，每段代码都分析一下时间复杂度、空间复杂度，是不是很浪费时间呢？ 我不认为是多此一举，渐进时间，空间复杂度分析为我们提供了一个很好的理论分析的方向，并且它是宿主平台无关的，能够让我们对我们的程序或算法有一个大致的认识，让我们知道，比如在最坏的情况下程序的执行效率如何，同时也为我们交流提供了一个不错的桥梁，我们可以说，算法1的时间复杂度是 O(n)，算法2的时间复杂度是 O(logN)，这样我们立刻就对不同的算法有了一个“效率”上的感性认识。 当然，渐进式时间，空间复杂度分析只是一个理论模型，只能提供给粗略的估计分析，我们不能直接断定就觉得 O(logN) 的算法一定优于 O(n), 针对不同的宿主环境，不同的数据集，不同的数据量的大小，在实际应用上面可能真正的性能会不同，个人觉得，针对不同的实际情况，进而进行一定的性能基准测试是很有必要的，比如在统一一批手机上(同样的硬件，系统等等)进行横向基准测试，进而选择适合特定应用场景下的最有算法。 综上所述，渐进式时间，空间复杂度分析与性能基准测试并不冲突，而是相辅相成的，但是一个低阶的时间复杂度程序有极大的可能性会优于一个高阶的时间复杂度程序，所以在实际编程中，时刻关心理论时间，空间度模型是有助于产出效率高的程序的，同时，因为渐进式时间，空间复杂度分析只是提供一个粗略的分析模型，因此也不会浪费太多时间，重点在于在编程时，要具有这种复杂度分析的思维。 2.1 最好、最坏时间复杂度分析同样一段代码在不同的数据输入情况下，所需的时间可能是不相同，因此需要针对不同的输入进行复杂度分析，也就有了最好、最坏和平均情况时间复杂度分析 最好情况时间复杂度就是，在最理想的情况下，执行这段代码的时间复杂度。 最坏情况时间复杂度就是，在最糟糕的情况下，执行这段代码的时间复杂度。 一般情况下，我们都不会去关注最好情况时间复杂度，因为它没有什么意义，最坏情况时间复杂度明确给出了算法的复杂度上界，这个信息在实际工程中是非常重要的。 2.2 平均情况时间复杂度虽然最坏时间复杂度对于工程的指导非常重要，但是这种情况出现的概率也很小，因此我们有必要对平均情况下的复杂度进行分析，即平均情况时间复杂度分析。平均情况时间复杂度的分析关键在于对每种输入的概率进行考虑，对每种输入下的时间复杂度进行一个概率加权，然后再把加权后的结果加起来，作为最终的平均情况时间复杂度。 看起来很复杂，但实际上只要我们知道了输入的分布，这都不是什么难事儿，无非是一个加权积分或者加权求和的事儿，路径是很清晰的，就是计算可能会很麻烦，还好实际使用中，我们只粗略关注时间复杂度即可，并不区分的这么细。 2.3 均摊时间复杂度均摊时间复杂度，听起来和平均情况时间复杂度有点像，事实确实如此，均摊时间复杂度就是一种特殊的平均时间复杂度。均摊时间负责度分析起来更加简单，用不着去进行概率加权求和，针对一些特殊的场景： O(1) 出现的频率远高于 O(n) O(1) 和 O(n) 出现的时机有规律，一般是执行一个 O(n) 操作，紧接着执行 n-1 个 O(1) 操作。 我们引入更加简单的分析方法：摊还分析，通过摊还分析得到的时间复杂度我们起了一个名字，叫均摊时间复杂度。 由于这种分析方法的应用场景比较少，一般情况下并不会用到，这里简单列出： 对一个数据结构进行一组连续操作中，大部分情况下时间复杂度都很低，只有个别情况下时间复杂度比较高，而且这些操作之间存在前后连贯的时序关系，这个时候，我们就可以将这一组操作放在一块儿分析，看是否能将较高时间复杂度那次操作的耗时，平摊到其他那些时间复杂度比较低的操作上。而且，在能够应用均摊时间复杂度分析的场合，一般均摊时间复杂度就等于最好情况时间复杂度。","content":"<p>以下内容为了极客时间专栏『数据结构与算法之美』的学习笔记。</p>\n<blockquote>\n<p>复杂度也叫渐进复杂度，包括时间复杂度和空间复杂度，用来分析算法执行效率和数据规模之间的增长关系，可以粗略地表示，越高阶复杂度的算法，执行效率越低。</p>\n</blockquote>\n<p>大 O 时间复杂度实际上并不具体表示代码真正的执行时间，而是<strong>表示代码执行时间随数据规模增长的变化趋势</strong>，所以，也叫作<strong>渐进时间复杂度</strong>（asymptotic time complexity），简称时间复杂度。</p>\n<a id=\"more\"></a>\n<p>具体的时间复杂度分析，有下面几个比较实用的方法：</p>\n<ul>\n<li><p>只关注循环次数执行最多的一段代码</p>\n</li>\n<li><p>加法法则：总复杂度等于量级最大的那段代码的复杂度</p>\n<p>如果 <code>T1(n)=O(f(n))</code>，<code>T2(n)=O(g(n))</code>；那么 <code>T(n)=T1(n)+T2(n)=max(O(f(n)), O(g(n))) =O(max(f(n), g(n)))</code>。</p>\n</li>\n<li><p>乘法法则：嵌套代码的复杂度等于嵌套内外代码复杂度的乘积</p>\n<p>如果 <code>T1(n)=O(f(n))</code>，<code>T2(n)=O(g(n))</code>；那么 <code>T(n)=T1(n)*T2(n)=O(f(n))*O(g(n))=O(f(n)*g(n))</code>。</p>\n</li>\n</ul>\n<h2 id=\"1-1-几种常见的时间复杂度实例分析\"><a href=\"#1-1-几种常见的时间复杂度实例分析\" class=\"headerlink\" title=\"1.1 几种常见的时间复杂度实例分析\"></a>1.1 几种常见的时间复杂度实例分析</h2><p>可以分为<strong>多项式量级</strong>和<strong>非多项式量级</strong>，把时间复杂度为非多项式量级的算法问题叫作 <strong>NP</strong>（Non-Deterministic Polynomial，非确定多项式）问题。</p>\n<ul>\n<li><p>O(1)：一般情况下，只要算法中不存在循环语句、递归语句，即使有成千上万行的代码，其时间复杂度也是Ο(1)。</p>\n</li>\n<li><p>O(logn)、O(nlogn)：</p>\n</li>\n</ul>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">int</span> i=<span class=\"number\">1</span>;</span><br><span class=\"line\"><span class=\"keyword\">while</span> (i &lt;= n) i = i * <span class=\"number\">2</span>;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>O(m+n)、O(m*n)</li>\n</ul>\n<h2 id=\"1-2-空间复杂度分析\"><a href=\"#1-2-空间复杂度分析\" class=\"headerlink\" title=\"1.2 空间复杂度分析\"></a>1.2 空间复杂度分析</h2><p>类比时间复杂度，空间复杂度的全称是渐进空间复杂度，表示算法的存储空间与数据规模之间的增长关系。一般情况下，很少去分析空间复杂度，因为在现在的硬件条件下，绝大多数时候，我们更加在乎时间复杂度，常常牺牲一部分空间复杂度去降低算法的时间复杂度。</p>\n<h2 id=\"1-3-Q：我们项目之前都会进行性能测试，再做代码的时间复杂度、空间复杂度分析，是不是多此一举呢？而且，每段代码都分析一下时间复杂度、空间复杂度，是不是很浪费时间呢？\"><a href=\"#1-3-Q：我们项目之前都会进行性能测试，再做代码的时间复杂度、空间复杂度分析，是不是多此一举呢？而且，每段代码都分析一下时间复杂度、空间复杂度，是不是很浪费时间呢？\" class=\"headerlink\" title=\"1.3 Q：我们项目之前都会进行性能测试，再做代码的时间复杂度、空间复杂度分析，是不是多此一举呢？而且，每段代码都分析一下时间复杂度、空间复杂度，是不是很浪费时间呢？\"></a>1.3 Q：我们项目之前都会进行性能测试，再做代码的时间复杂度、空间复杂度分析，是不是多此一举呢？而且，每段代码都分析一下时间复杂度、空间复杂度，是不是很浪费时间呢？</h2><blockquote>\n<p>我不认为是多此一举，渐进时间，空间复杂度分析为我们提供了一个很好的理论分析的方向，并且它是宿主平台无关的，能够让我们对我们的程序或算法有一个大致的认识，让我们知道，比如在最坏的情况下程序的执行效率如何，同时也为我们交流提供了一个不错的桥梁，我们可以说，算法1的时间复杂度是 <code>O(n)</code>，算法2的时间复杂度是 <code>O(logN)</code>，这样我们立刻就对不同的算法有了一个“效率”上的感性认识。</p>\n<p>当然，渐进式时间，空间复杂度分析只是一个理论模型，只能提供给粗略的估计分析，我们不能直接断定就觉得 <code>O(logN)</code> 的算法一定优于 <code>O(n)</code>, 针对不同的宿主环境，不同的数据集，不同的数据量的大小，在实际应用上面可能真正的性能会不同，个人觉得，针对不同的实际情况，进而进行一定的性能基准测试是很有必要的，比如在统一一批手机上(同样的硬件，系统等等)进行横向基准测试，进而选择适合特定应用场景下的最有算法。</p>\n<p>综上所述，渐进式时间，空间复杂度分析与性能基准测试并不冲突，而是相辅相成的，但是一个低阶的时间复杂度程序有极大的可能性会优于一个高阶的时间复杂度程序，所以在实际编程中，时刻关心理论时间，空间度模型是有助于产出效率高的程序的，同时，因为渐进式时间，空间复杂度分析只是提供一个粗略的分析模型，因此也不会浪费太多时间，重点在于在编程时，要具有这种复杂度分析的思维。</p>\n</blockquote>\n<h2 id=\"2-1-最好、最坏时间复杂度分析\"><a href=\"#2-1-最好、最坏时间复杂度分析\" class=\"headerlink\" title=\"2.1 最好、最坏时间复杂度分析\"></a>2.1 最好、最坏时间复杂度分析</h2><p>同样一段代码在不同的数据输入情况下，所需的时间可能是不相同，因此需要针对不同的输入进行复杂度分析，也就有了最好、最坏和平均情况时间复杂度分析</p>\n<ul>\n<li><strong>最好情况时间复杂度就是，在最理想的情况下，执行这段代码的时间复杂度。</strong></li>\n<li><strong>最坏情况时间复杂度就是，在最糟糕的情况下，执行这段代码的时间复杂度。</strong></li>\n</ul>\n<p>一般情况下，我们都不会去关注最好情况时间复杂度，因为它没有什么意义，最坏情况时间复杂度明确给出了算法的复杂度上界，这个信息在实际工程中是非常重要的。</p>\n<h2 id=\"2-2-平均情况时间复杂度\"><a href=\"#2-2-平均情况时间复杂度\" class=\"headerlink\" title=\"2.2 平均情况时间复杂度\"></a>2.2 平均情况时间复杂度</h2><p>虽然最坏时间复杂度对于工程的指导非常重要，但是这种情况出现的概率也很小，因此我们有必要对平均情况下的复杂度进行分析，即平均情况时间复杂度分析。平均情况时间复杂度的分析关键在于对每种输入的概率进行考虑，对每种输入下的时间复杂度进行一个概率加权，然后再把加权后的结果加起来，作为最终的平均情况时间复杂度。</p>\n<p>看起来很复杂，但实际上只要我们知道了输入的分布，这都不是什么难事儿，无非是一个加权积分或者加权求和的事儿，路径是很清晰的，就是计算可能会很麻烦，还好实际使用中，我们只粗略关注时间复杂度即可，并不区分的这么细。</p>\n<h2 id=\"2-3-均摊时间复杂度\"><a href=\"#2-3-均摊时间复杂度\" class=\"headerlink\" title=\"2.3 均摊时间复杂度\"></a>2.3 均摊时间复杂度</h2><p>均摊时间复杂度，听起来和平均情况时间复杂度有点像，事实确实如此，<strong>均摊时间复杂度就是一种特殊的平均时间复杂度</strong>。均摊时间负责度分析起来更加简单，用不着去进行概率加权求和，针对一些特殊的场景：</p>\n<ul>\n<li>O(1) 出现的频率远高于 O(n)</li>\n<li>O(1) 和 O(n) 出现的时机有规律，一般是执行一个 <code>O(n)</code> 操作，紧接着执行 <code>n-1</code> 个 <code>O(1)</code> 操作。</li>\n</ul>\n<p>我们引入更加简单的分析方法：<strong>摊还分析</strong>，通过摊还分析得到的时间复杂度我们起了一个名字，叫<strong>均摊时间复杂度</strong>。</p>\n<p>由于这种分析方法的应用场景比较少，一般情况下并不会用到，这里简单列出：</p>\n<blockquote>\n<p>对一个数据结构进行一组连续操作中，大部分情况下时间复杂度都很低，只有个别情况下时间复杂度比较高，而且这些操作之间存在前后连贯的时序关系，这个时候，我们就可以将这一组操作放在一块儿分析，看是否能将较高时间复杂度那次操作的耗时，平摊到其他那些时间复杂度比较低的操作上。而且，在能够应用均摊时间复杂度分析的场合，一般均摊时间复杂度就等于最好情况时间复杂度。</p>\n</blockquote>\n","tags":[{"name":"复杂度分析","slug":"复杂度分析","permalink":"https://jonathan1214.github.io/tags/复杂度分析/"}]},{"title":"数值分析总结","date":"2021-01-06T02:46:09.000Z","path":"2021/01/numerical-analysis-summary/","text":"今天是 1 月 6 号，两天后将进行数值分析考试，那是本学期的最后一门考试课（研究生课），也是我本科参加的最后一门考试了。这几天好好复习了一下，虽然老师上课讲的好像比较复杂，比较难，但真要考起来也不会太难，往年的考试题也比较简单，心里有底了。写个简单的知识点总结吧，就当是消磨时间了，剩下这一两天也怪难熬的。 总共分为 5 个部分： 非线性方程和方程组的数值解法 线性方程组的数值解法 插值法和数值逼近 数值积分 常微分方程的初值问题和数值解法 以及一个额外的问题：乘幂法求矩阵的最大模特征值及对应的特征向量。 先从整体上来认识一下这门课程。数值分析，这个标题告诉我们这门课程就是要用一些数值方法去去近似求解一下难以求解的问题，这些问题往往是我们得不到解析解的，或者说只需要求出几个点的值而去求出整体的解析解没有多大意义，比如常第5部分会涉及到的常微分方程的初值问题。那么针对这些不同的问题，有哪些数值方法可以进行求解呢？ 非线性方程和方程组的数值解法非线性方程和方程组，这无疑是我们最常遇到的难以求得解析解的问题，针对这类问题，有一些很好的迭代算法可以用于求解。对于非线性方程的求解，最简单的数值求解方法就是二分法，更高级一点的方法有牛顿法以及其改进形式。 假设待求解的非线性方程是 $f(x) = 0$，迭代的第一步就是要通过这个方程构造出迭代形式：$$x_{k+1} = \\phi(x_{k})$$其中，$\\phi(x)$ 被称为迭代函数，迭代格式好不好就和这个迭代函数的性质有很大的关系。 收敛阶：满足如下条件，则称迭代格式 p 阶收敛，其中 $\\epsilon_{i}$ 为第 i 次迭代的误差。$$\\rm{lim}\\frac{|\\epsilon_{i+1}|}{|\\epsilon_{i}|}=c \\ne 0$$ 计算效率：$EI = p^{\\frac{1}{\\theta}}$。 局部收敛性：若 $\\phi(x)$ 在 $x = \\phi(x)$ 的根 $\\alpha$ 的邻域内有连续的一阶导数，且满足 $|\\phi^{‘}(\\alpha)| &lt; 1$，则称 $x_{k+1} = \\phi(x_{k})$ 具有局部收敛性。而且我们可以推出，$\\alpha$ 处的导数模值越小，迭代收敛越快，显然当它为零的时候，收敛最快，由此我们可以引出另外一个关于收敛阶的定理：$x=\\phi(x)$ 的根 $\\alpha$ 邻域内有充分多阶连续导数，则关于 $\\alpha$ p 阶收敛等价于 $\\phi(x)$ 在 $\\alpha$ 处的前 p-1 阶导数值全都为0，且 p 阶导数不为0。 了解了这些基础，对于二分法和牛顿法自然就是水到渠成的事情了。 对于非线性方程组，我们也有相应的拟牛顿法进行计算，这都不是什么难事儿，只是在多元问题中，导数值的计算变成了 Jacobi 矩阵的计算。 线性方程组的数值解法再来看看线性方程组的数值解法。对一个线性方程组而言，当他满秩的时候 插值法和数值逼近数值积分常微分方程的初值问题和数值解法","content":"<p>今天是 1 月 6 号，两天后将进行数值分析考试，那是本学期的最后一门考试课（研究生课），也是我本科参加的最后一门考试了。这几天好好复习了一下，虽然老师上课讲的好像比较复杂，比较难，但真要考起来也不会太难，往年的考试题也比较简单，心里有底了。写个简单的知识点总结吧，就当是消磨时间了，剩下这一两天也怪难熬的。</p>\n<a id=\"more\"></a>\n<p>总共分为 5 个部分：</p>\n<ul>\n<li>非线性方程和方程组的数值解法</li>\n<li>线性方程组的数值解法</li>\n<li>插值法和数值逼近</li>\n<li>数值积分</li>\n<li>常微分方程的初值问题和数值解法</li>\n</ul>\n<p>以及一个额外的问题：乘幂法求矩阵的最大模特征值及对应的特征向量。</p>\n<p>先从整体上来认识一下这门课程。数值分析，这个标题告诉我们这门课程就是要用一些数值方法去去近似求解一下难以求解的问题，这些问题往往是我们得不到解析解的，或者说只需要求出几个点的值而去求出整体的解析解没有多大意义，比如常第5部分会涉及到的常微分方程的初值问题。那么针对这些不同的问题，有哪些数值方法可以进行求解呢？</p>\n<h2 id=\"非线性方程和方程组的数值解法\"><a href=\"#非线性方程和方程组的数值解法\" class=\"headerlink\" title=\"非线性方程和方程组的数值解法\"></a>非线性方程和方程组的数值解法</h2><p>非线性方程和方程组，这无疑是我们最常遇到的难以求得解析解的问题，针对这类问题，有一些很好的迭代算法可以用于求解。对于非线性方程的求解，最简单的数值求解方法就是二分法，更高级一点的方法有牛顿法以及其改进形式。</p>\n<p>假设待求解的非线性方程是 $f(x) = 0$，迭代的第一步就是要通过这个方程构造出迭代形式：<br>$$<br>x_{k+1} = \\phi(x_{k})<br>$$<br>其中，$\\phi(x)$ 被称为迭代函数，迭代格式好不好就和这个迭代函数的性质有很大的关系。</p>\n<p>收敛阶：满足如下条件，则称迭代格式 p 阶收敛，其中 $\\epsilon_{i}$ 为第 i 次迭代的误差。<br>$$<br>\\rm{lim}\\frac{|\\epsilon_{i+1}|}{|\\epsilon_{i}|}=c \\ne 0<br>$$</p>\n<p>计算效率：$EI = p^{\\frac{1}{\\theta}}$。</p>\n<p>局部收敛性：若 $\\phi(x)$ 在 $x = \\phi(x)$ 的根 $\\alpha$ 的邻域内有连续的一阶导数，且满足 $|\\phi^{‘}(\\alpha)| &lt; 1$，则称 $x_{k+1} = \\phi(x_{k})$ 具有局部收敛性。而且我们可以推出，$\\alpha$ 处的导数模值越小，迭代收敛越快，显然当它为零的时候，收敛最快，由此我们可以引出另外一个关于收敛阶的定理：$x=\\phi(x)$ 的根 $\\alpha$ 邻域内有充分多阶连续导数，则关于 $\\alpha$ p 阶收敛等价于 $\\phi(x)$ 在 $\\alpha$ 处的前 p-1 阶导数值全都为0，且 p 阶导数不为0。</p>\n<p>了解了这些基础，对于二分法和牛顿法自然就是水到渠成的事情了。</p>\n<p>对于非线性方程组，我们也有相应的拟牛顿法进行计算，这都不是什么难事儿，只是在多元问题中，导数值的计算变成了 Jacobi 矩阵的计算。</p>\n<h2 id=\"线性方程组的数值解法\"><a href=\"#线性方程组的数值解法\" class=\"headerlink\" title=\"线性方程组的数值解法\"></a>线性方程组的数值解法</h2><p>再来看看线性方程组的数值解法。对一个线性方程组而言，当他满秩的时候</p>\n<h2 id=\"插值法和数值逼近\"><a href=\"#插值法和数值逼近\" class=\"headerlink\" title=\"插值法和数值逼近\"></a>插值法和数值逼近</h2><h2 id=\"数值积分\"><a href=\"#数值积分\" class=\"headerlink\" title=\"数值积分\"></a>数值积分</h2><h2 id=\"常微分方程的初值问题和数值解法\"><a href=\"#常微分方程的初值问题和数值解法\" class=\"headerlink\" title=\"常微分方程的初值问题和数值解法\"></a>常微分方程的初值问题和数值解法</h2>","tags":[{"name":"notes","slug":"notes","permalink":"https://jonathan1214.github.io/tags/notes/"}]},{"title":"2021 第五天","date":"2021-01-05T15:21:49.000Z","path":"2021/01/day3-feeling-better/","text":"又是流水的一天，唯有大腿的疼痛提醒我今天早上打羽毛球不该那么拼的，菜就认，接不到的球就不要去勉强了嘛，现在能想明白，但当时是肯定不服气的，不过这没啥好处，现在除了大腿疼，左脚也有轻微的扭伤……人老了，随便动一动也得好好考虑考虑了。 好消息是今天把数值分析简单复习完了，可算是容易啊，讲的知识点很多，但是要考的东西都比较简单，复习起来也快。8 号的考试快点来吧，考完放假，回家。还有一个好消息，cy 的高频课出分了，80 来分，我又可以吃到一顿饭了。晚上发现了 windows store 中的 bilibili 客户端居然可以缓存 B 站的视频，这下好了，不用担心回家因为网络问题而无法学习了，这几天要把打算的学习的内容基本准备好，考完试就写一个计划吧，这次一定要坚持久一点。 尽管早晨起来嗓子像是被火烧一样，但感冒的确是好点儿了，今天又吃了一天药，正常的话明天就该痊愈了，希望如此。我在生病的时候似乎总是会去想一些奇怪的东西，不过也有可能是因为生病印象了我午睡的质量，事实上今天中午我并没有睡着，那个时候我在想写什么呢？现在已经没有印象了，要不下次醒来就开始记录，把脑子中有的印象全部写下来，就像我以前做的那样，这一定很有意思。 关于学习实在没什么好说的，最近一直在以缓慢的速度复习数值分析，纯粹是为了消磨时间罢了，晚上经常打打游戏，让时间更快的过去，为什么现在有一种煎熬的感觉，难道是因为马上就要放假了吗？心已经走了吗？我知道它没有要去的地方，应该只是给自己一个暗示：要放假了，我应该有个放假的样子，该放松放松了。不过我自认为一直很松啊，保持我自己想要额节奏就好了，记得适时检查自己，内自省也。 因为后悔没用，所以永不后悔。","content":"<p>又是流水的一天，唯有大腿的疼痛提醒我今天早上打羽毛球不该那么拼的，菜就认，接不到的球就不要去勉强了嘛，现在能想明白，但当时是肯定不服气的，不过这没啥好处，现在除了大腿疼，左脚也有轻微的扭伤……人老了，随便动一动也得好好考虑考虑了。</p>\n<a id=\"more\"></a>\n<p>好消息是今天把数值分析简单复习完了，可算是容易啊，讲的知识点很多，但是要考的东西都比较简单，复习起来也快。8 号的考试快点来吧，考完放假，回家。还有一个好消息，cy 的高频课出分了，80 来分，我又可以吃到一顿饭了。晚上发现了 windows store 中的 bilibili 客户端居然可以缓存 B 站的视频，这下好了，不用担心回家因为网络问题而无法学习了，这几天要把打算的学习的内容基本准备好，考完试就写一个计划吧，这次一定要坚持久一点。</p>\n<p>尽管早晨起来嗓子像是被火烧一样，但感冒的确是好点儿了，今天又吃了一天药，正常的话明天就该痊愈了，希望如此。我在生病的时候似乎总是会去想一些奇怪的东西，不过也有可能是因为生病印象了我午睡的质量，事实上今天中午我并没有睡着，那个时候我在想写什么呢？现在已经没有印象了，要不下次醒来就开始记录，把脑子中有的印象全部写下来，就像我以前做的那样，这一定很有意思。</p>\n<p>关于学习实在没什么好说的，最近一直在以缓慢的速度复习数值分析，纯粹是为了消磨时间罢了，晚上经常打打游戏，让时间更快的过去，为什么现在有一种煎熬的感觉，难道是因为马上就要放假了吗？心已经走了吗？我知道它没有要去的地方，应该只是给自己一个暗示：要放假了，我应该有个放假的样子，该放松放松了。不过我自认为一直很松啊，保持我自己想要额节奏就好了，记得适时检查自己，内自省也。</p>\n<p>因为后悔没用，所以永不后悔。</p>\n","tags":[{"name":"记录","slug":"记录","permalink":"https://jonathan1214.github.io/tags/记录/"}]},{"title":"2021 第三天","date":"2021-01-03T15:21:49.000Z","path":"2021/01/day2-not-feeling-well/","text":"新年第三天了，这两天也没做什么事情，做了两次物联网实验，粘贴了一份读书报告，补完了数值分析的实验报告和作业，终于有时间复习数值分析了，下周五就要考试了，得抓紧复习了。 物联网这个实验做的实在太让人难受了，实验简单，本以为按照实验指导书一步步做就可以完成实验，这样就可以快速做完，腾出时间复习数值分析了，事实证明我想多了。最大的问题在于实验指导书就写得如同一坨狗屎，有时真不知道写这指导书的人在干嘛，写完之后有审核过吗？真的能起到指导作用吗？看来做这个产品的公司估计也不是一家好公司。很多时候，人们并不关系那种看起来很牛逼却看不懂的东西，大家会把更多的精力投入自己能够理解的那部分中去，以获得参与感和满足感，对于指导书一类的东西，一定要写的足够清楚，这才有意义。 抄报告真的会上瘾？我想这是真的，尤其当你面对一个你不想写的报告，而这个学分你又非常想你拿到。最好是那种复制粘贴即可的，稍微改改格式就行的。理解别人的这种行为吧，因为我不知道什么时候自己也会去做，所以我应该做的不是苛责，而是思考背后的原因，这是关键。 晚上头晕得厉害，估计是这些天来的累积结果，某一天晚上踢被子被冻醒了，昨天在正心一楼的大教室自习，脚一直没热过……想必是要感冒了，想到马上就要放假，不会开学那段极限坐车经历又要再次重演了吧，果真生活是个圈？赶紧找vv要了点药吃，希望赶紧好起来，还得复习数值分析，orz。 啊！对了，看到一篇很感人的帖子七年了，我还是很想你，真羡慕啊，“有一个人能去爱，多珍贵”，后面和朋友们聊到这件事，说自己变得越来越现实，大概不会再去喜欢别人了，当我开始选择的时候，就意味着没有选择了，不过还是要相信真爱的，当不会在我这里发生就是了，祝各位幸福。 OK，这大概就是这两天了，时间快到了，事也说得差不多了。晚安。","content":"<p>新年第三天了，这两天也没做什么事情，做了两次物联网实验，粘贴了一份读书报告，补完了数值分析的实验报告和作业，终于有时间复习数值分析了，下周五就要考试了，得抓紧复习了。</p>\n<a id=\"more\"></a>\n<p>物联网这个实验做的实在太让人难受了，实验简单，本以为按照实验指导书一步步做就可以完成实验，这样就可以快速做完，腾出时间复习数值分析了，事实证明我想多了。最大的问题在于实验指导书就写得如同一坨狗屎，有时真不知道写这指导书的人在干嘛，写完之后有审核过吗？真的能起到指导作用吗？看来做这个产品的公司估计也不是一家好公司。很多时候，人们并不关系那种看起来很牛逼却看不懂的东西，大家会把更多的精力投入自己能够理解的那部分中去，以获得参与感和满足感，对于指导书一类的东西，一定要写的足够清楚，这才有意义。</p>\n<p>抄报告真的会上瘾？我想这是真的，尤其当你面对一个你不想写的报告，而这个学分你又非常想你拿到。最好是那种复制粘贴即可的，稍微改改格式就行的。理解别人的这种行为吧，因为我不知道什么时候自己也会去做，所以我应该做的不是苛责，而是思考背后的原因，这是关键。</p>\n<p>晚上头晕得厉害，估计是这些天来的累积结果，某一天晚上踢被子被冻醒了，昨天在正心一楼的大教室自习，脚一直没热过……想必是要感冒了，想到马上就要放假，不会开学那段极限坐车经历又要再次重演了吧，果真生活是个圈？赶紧找vv要了点药吃，希望赶紧好起来，还得复习数值分析，orz。</p>\n<p>啊！对了，看到一篇很感人的帖子<a href=\"https://m.hupu.com/bbs/40172727.html\" target=\"_blank\" rel=\"noopener\">七年了，我还是很想你</a>，真羡慕啊，“有一个人能去爱，多珍贵”，后面和朋友们聊到这件事，说自己变得越来越现实，大概不会再去喜欢别人了，当我开始选择的时候，就意味着没有选择了，不过还是要相信真爱的，当不会在我这里发生就是了，祝各位幸福。</p>\n<p>OK，这大概就是这两天了，时间快到了，事也说得差不多了。晚安。</p>\n","tags":[{"name":"记录","slug":"记录","permalink":"https://jonathan1214.github.io/tags/记录/"}]},{"title":"新年快乐！2020 的小结与2021 年的展望","date":"2021-01-01T15:29:39.000Z","path":"2021/01/happy-new-year-2021/","text":"新年快乐，2020总算是过去了。 先总结下这一年。对我而言，虽然经历了很多事情，但这一年过得并不算坏。尝试拥有了自己一直渴求的东西，最后发现不是自己想要的就果断放手了，算是对那段过去做了一个交代。很幸运能够被现在的毕设导师选择，我将在老师手下度过剩下的两年半，用朋友的话说：你这选到了神仙导师，直接起飞了。那确实，我实在是有点幸运啊。两年过去了，我开始渐渐理解他的选择，如果是我，绝对会把事情弄得一塌糊涂，对于家里的事情，我决定和他使用同样的态度，多么希望能有机会再和他谈谈……9月终于开学了，开题，上课，看文献，写代码，做毕设，生活忙碌了起来，时间也像流水一样逝去。回望这一年，我没有在自己的核心竞争力上取得多大提升，年初决定的计划几乎都没有执行到底，这一点和往年一样，不同的是这样的时间不会再有太多了，我已经大四了，没有什么拿得出手的技能，换句话说没有人愿意付钱雇我干活，已经没有太多时间浪费了。 未来这一年，我有什么样的计划呢？暂时还没有想好，只有一个大概的想法，最重要的事情当然就是好好做完毕设，顺利毕业，然后就是提升自己的的核心竞争力，让别人愿意出一个好价钱。这些想法都宽泛了，难以执行，最好我在后面会详细说明下，希望自己坚持下去，这一篇算是个开头展望。 我永远对未来抱有美好的期望，只是我似乎不知道自己在期望什么，《球状闪电》中说到：美妙人生的关键在于你能迷上什么东西。我不知道自己有什么可以沉迷的，游戏么？最好不要，那就试试其他有用的吧，”有用的“，在我这里似乎什么都得有用才行，没有那种纯粹靠着一时冲动去做的，但我又何尝不在冲动之下犯下一个又一个错误呢？我啊，说的总是和做的差太多，算不上是个好人。那么这一次，我说，2021 年，我要大幅度提高自己对产品或者说是对人文世界的感知力。编程能力倒是先不着急，我知道自己一定不甘心在这方面落下的。 昨晚收到老师送的礼物，还有星空，实在太美了，太感谢了。 2021，做自己，不留遗憾。","content":"<p>新年快乐，2020总算是过去了。</p>\n<a id=\"more\"></a>\n<p>先总结下这一年。对我而言，虽然经历了很多事情，但这一年过得并不算坏。尝试拥有了自己一直渴求的东西，最后发现不是自己想要的就果断放手了，算是对那段过去做了一个交代。很幸运能够被现在的毕设导师选择，我将在老师手下度过剩下的两年半，用朋友的话说：你这选到了神仙导师，直接起飞了。那确实，我实在是有点幸运啊。两年过去了，我开始渐渐理解他的选择，如果是我，绝对会把事情弄得一塌糊涂，对于家里的事情，我决定和他使用同样的态度，多么希望能有机会再和他谈谈……9月终于开学了，开题，上课，看文献，写代码，做毕设，生活忙碌了起来，时间也像流水一样逝去。回望这一年，我没有在自己的核心竞争力上取得多大提升，年初决定的计划几乎都没有执行到底，这一点和往年一样，不同的是这样的时间不会再有太多了，我已经大四了，没有什么拿得出手的技能，换句话说没有人愿意付钱雇我干活，已经没有太多时间浪费了。</p>\n<p>未来这一年，我有什么样的计划呢？暂时还没有想好，只有一个大概的想法，最重要的事情当然就是好好做完毕设，顺利毕业，然后就是提升自己的的核心竞争力，让别人愿意出一个好价钱。这些想法都宽泛了，难以执行，最好我在后面会详细说明下，希望自己坚持下去，这一篇算是个开头展望。</p>\n<p>我永远对未来抱有美好的期望，只是我似乎不知道自己在期望什么，《球状闪电》中说到：美妙人生的关键在于你能迷上什么东西。我不知道自己有什么可以沉迷的，游戏么？最好不要，那就试试其他有用的吧，”有用的“，在我这里似乎什么都得有用才行，没有那种纯粹靠着一时冲动去做的，但我又何尝不在冲动之下犯下一个又一个错误呢？我啊，说的总是和做的差太多，算不上是个好人。那么这一次，我说，2021 年，我要大幅度提高自己对产品或者说是对人文世界的感知力。编程能力倒是先不着急，我知道自己一定不甘心在这方面落下的。</p>\n<p>昨晚收到老师送的礼物，还有星空，实在太美了，太感谢了。</p>\n<p>2021，做自己，不留遗憾。</p>\n","tags":[{"name":"记录","slug":"记录","permalink":"https://jonathan1214.github.io/tags/记录/"}]},{"title":"一点数字电路设计的感悟","date":"2020-12-01T02:41:12.000Z","path":"2020/12/a-little-understanding-of-FPGA-design/","text":"惊呼：已经12月了！ 现在每日牵挂的无非是课设二字，近日还算专心钻研数字电路设计，也算是知道了一点东西，有一点感悟，不妨写下来，让这种感觉更加准确。数字电路设计，无非是时序逻辑电路和组合逻辑电路，在 FPGA 设计中，就是带触发器的同步电路设计和纯组合电路设计，浅显的理解可以认为是阻塞赋值和非阻塞赋值的区别。话虽说得简单，但是实际做起来倒真的不容易，就比如我几天前写的那个串口接收和发送的代码，时序总是不对，后面多看了看别人的设计，才发现自己真是太嫩了，这种设计自然是有比较特定的规律。 边沿检测边沿检测可算是最最经典的电路设计了，实际当中却是处处会用到。一个典型的检测电路如下： 123456789101112131415161718192021222324252627module Edge_detect( input clk, // 时钟 input rst_n, // 复位信号 input SigIn, // 输入信号 output SigOut, // 同步之后的输出信号 output down, // 检测到下降沿产生一个脉冲 output up // 检测上升沿产生一个脉冲); reg [2:0] ToggleSigIn; // 三级寄存器，前两级用于同步信号 always @(posedge clk or negedge rst_n) begin if (~rst_n) begin ToggleSigIn &lt;= 0; end else begin // 移位寄存 ToggleSigIn &lt;= &#123;ToggleSigIn[1:0], SigIn&#125;; end end // 同步后的信号直接作为输出 assign SigOut = ToggleSigIn[2]; // 前一时刻为低电平 后一时刻为高电平 下降沿出现 assign down = (~ToggleSigIn[2] &amp; ToggleSigIn[1]); // 前一时刻为高电平 后一时刻为低电平 下降沿出现 assign up = (ToggleSigIn[2] &amp; ~ToggleSigIn[1]);endmodule 看起来非常简单，但在实际使用中却是必不可少又十分有效的，譬如在串口接收中就需要简单信号线上下降沿的产生，以检测信号到来，当然，检测之前，做一次数据同步是必不可少的。","content":"<p>惊呼：已经12月了！</p>\n<p>现在每日牵挂的无非是课设二字，近日还算专心钻研数字电路设计，也算是知道了一点东西，有一点感悟，不妨写下来，让这种感觉更加准确。<br><a id=\"more\"></a><br>数字电路设计，无非是时序逻辑电路和组合逻辑电路，在 FPGA 设计中，就是带触发器的同步电路设计和纯组合电路设计，浅显的理解可以认为是阻塞赋值和非阻塞赋值的区别。话虽说得简单，但是实际做起来倒真的不容易，就比如我几天前写的那个串口接收和发送的代码，时序总是不对，后面多看了看别人的设计，才发现自己真是太嫩了，这种设计自然是有比较特定的规律。</p>\n<h2 id=\"边沿检测\"><a href=\"#边沿检测\" class=\"headerlink\" title=\"边沿检测\"></a>边沿检测</h2><p>边沿检测可算是最最经典的电路设计了，实际当中却是处处会用到。一个典型的检测电路如下：</p>\n<figure class=\"highlight verilog\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">module</span> Edge_detect(</span><br><span class=\"line\">    <span class=\"keyword\">input</span> clk,\t\t<span class=\"comment\">// 时钟</span></span><br><span class=\"line\">    <span class=\"keyword\">input</span> rst_n,\t<span class=\"comment\">// 复位信号</span></span><br><span class=\"line\">    <span class=\"keyword\">input</span> SigIn,\t<span class=\"comment\">// 输入信号 </span></span><br><span class=\"line\">    <span class=\"keyword\">output</span> SigOut,  <span class=\"comment\">// 同步之后的输出信号</span></span><br><span class=\"line\">    <span class=\"keyword\">output</span> down,    <span class=\"comment\">// 检测到下降沿产生一个脉冲</span></span><br><span class=\"line\">    <span class=\"keyword\">output</span> up\t    <span class=\"comment\">// 检测上升沿产生一个脉冲</span></span><br><span class=\"line\">);</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">reg</span> [<span class=\"number\">2</span>:<span class=\"number\">0</span>] ToggleSigIn;\t<span class=\"comment\">// 三级寄存器，前两级用于同步信号</span></span><br><span class=\"line\">    <span class=\"keyword\">always</span> @(<span class=\"keyword\">posedge</span> clk <span class=\"keyword\">or</span> <span class=\"keyword\">negedge</span> rst_n) <span class=\"keyword\">begin</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (~rst_n) <span class=\"keyword\">begin</span></span><br><span class=\"line\">            ToggleSigIn &lt;= <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">end</span></span><br><span class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">begin</span></span><br><span class=\"line\">            <span class=\"comment\">// 移位寄存</span></span><br><span class=\"line\">            ToggleSigIn &lt;= &#123;ToggleSigIn[<span class=\"number\">1</span>:<span class=\"number\">0</span>], SigIn&#125;;</span><br><span class=\"line\">        <span class=\"keyword\">end</span></span><br><span class=\"line\">    <span class=\"keyword\">end</span></span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">// 同步后的信号直接作为输出</span></span><br><span class=\"line\">    <span class=\"keyword\">assign</span> SigOut = ToggleSigIn[<span class=\"number\">2</span>];\t</span><br><span class=\"line\">    <span class=\"comment\">// 前一时刻为低电平 后一时刻为高电平 下降沿出现</span></span><br><span class=\"line\">    <span class=\"keyword\">assign</span> down   = (~ToggleSigIn[<span class=\"number\">2</span>] &amp; ToggleSigIn[<span class=\"number\">1</span>]);</span><br><span class=\"line\">    <span class=\"comment\">// 前一时刻为高电平 后一时刻为低电平 下降沿出现</span></span><br><span class=\"line\">    <span class=\"keyword\">assign</span> up     = (ToggleSigIn[<span class=\"number\">2</span>] &amp; ~ToggleSigIn[<span class=\"number\">1</span>]);</span><br><span class=\"line\"><span class=\"keyword\">endmodule</span></span><br></pre></td></tr></table></figure>\n<p>看起来非常简单，但在实际使用中却是必不可少又十分有效的，譬如在串口接收中就需要简单信号线上下降沿的产生，以检测信号到来，当然，检测之前，做一次数据同步是必不可少的。</p>\n","tags":[{"name":"记录","slug":"记录","permalink":"https://jonathan1214.github.io/tags/记录/"},{"name":"sr-log","slug":"sr-log","permalink":"https://jonathan1214.github.io/tags/sr-log/"}]},{"title":"11 月的第一篇和最后一篇","date":"2020-11-29T15:06:46.000Z","path":"2020/11/log-11-29/","text":"已经是11月29日了，今天是教学周第12周的的最后一天，已经有许久没有整理整理了，今天正好休息，记下两笔吧。先说毕设，距离我预订的完成时间还剩下两周，按照过去一个月的进度来看，我肯定无法在这最后两周完成全部内容，但我还想试试。我现在对 FPGA 的掌握程度还远没有达到预订的目标：给定一个需求，能够完成设计和代码实现。现在的我就算是照着设计去写代码都有很大的困难，问题出在哪里呢？这段时间以来，我也没闲着，也在看 Verilog 代码，也看了一些那几本书，但还是不得要领。按照之前学习的经验来看，还是代码抄得不够，我感觉回到了三年前，那是一次痛苦的 Python 学习经历，像个无头苍蝇一样撞了几天后直接放弃了，不过现在我没有放弃这个选项，我必须完成，那么在接下来这段时间多抄点代码吧，看看好的设计是怎么完成的。下周日再来检验吧。 25号考完了本科中的最后一门必修课，恍惚间大学生活似乎就要结束了，真快啊。三年来，发生了一些有意思的事情，也碰到了很多有意思的人，完成了自己的执念也终于放下，有人永远地离去，我想抓住却已经来不及，珍惜身边人吧。 加油。","content":"<p>已经是11月29日了，今天是教学周第12周的的最后一天，已经有许久没有整理整理了，今天正好休息，记下两笔吧。<br><a id=\"more\"></a><br>先说毕设，距离我预订的完成时间还剩下两周，按照过去一个月的进度来看，我肯定无法在这最后两周完成全部内容，但我还想试试。我现在对 FPGA 的掌握程度还远没有达到预订的目标：给定一个需求，能够完成设计和代码实现。现在的我就算是照着设计去写代码都有很大的困难，问题出在哪里呢？这段时间以来，我也没闲着，也在看 Verilog 代码，也看了一些那几本书，但还是不得要领。按照之前学习的经验来看，还是代码抄得不够，我感觉回到了三年前，那是一次痛苦的 Python 学习经历，像个无头苍蝇一样撞了几天后直接放弃了，不过现在我没有放弃这个选项，我必须完成，那么在接下来这段时间多抄点代码吧，看看好的设计是怎么完成的。下周日再来检验吧。</p>\n<p>25号考完了本科中的最后一门必修课，恍惚间大学生活似乎就要结束了，真快啊。三年来，发生了一些有意思的事情，也碰到了很多有意思的人，完成了自己的执念也终于放下，有人永远地离去，我想抓住却已经来不及，珍惜身边人吧。</p>\n<p>加油。</p>\n","tags":[{"name":"记录","slug":"记录","permalink":"https://jonathan1214.github.io/tags/记录/"},{"name":"sr-log","slug":"sr-log","permalink":"https://jonathan1214.github.io/tags/sr-log/"}]},{"title":"写在开题答辩之后","date":"2020-10-26T15:38:34.000Z","path":"2020/10/fxxking-opening-things/","text":"今天下午进行了毕设开题答辩，一句话来总结：退一步越想越气。一气自己不争气，二气答辩老师太离谱。抛开其他人的因素，我自己也应该从这次经历中学到点东西。","content":"<p>今天下午进行了毕设开题答辩，一句话来总结：退一步越想越气。一气自己不争气，二气答辩老师太离谱。抛开其他人的因素，我自己也应该从这次经历中学到点东西。<br><a id=\"more\"></a></p>\n","tags":[{"name":"记录","slug":"记录","permalink":"https://jonathan1214.github.io/tags/记录/"}]},{"title":"作用域，连接属性以及存储类型","date":"2020-10-15T08:47:34.000Z","path":"2020/10/C-scope-linkage-and-storage-class/","text":"逃避手中的难事，看看 C 中标识符的作用域、链接属性和存储类型是如何区分的吧。 以下内容为阅读《C 和指针》时做的笔记。pp39-47。 作用域当变量在程序的某个部分被声明时，它只有在程序的一定区域才能被访问，这个区域由标识符的作用域决定。 标识符的作用域就是程序中该标识符可以被使用的区域。 这意味着，作用域之外无法访问这些变量，分属不同作用域的变量可以有相同的名字。 编译器可以确认 4 种不同类型的作用域——文件作用域、函数作用域、代码作用域和原型作用域。标识符声明的位置决定它的作用域。 代码块作用域：位于一堆花括号之间的所有语句称为一个代码块，任何在代码块开始位置声明的标识符都具有代码块作用域（block scope）。 文件作用域：任何在代码块之外声明的标识符都具有文件作用域（file scope）。它表示这些标识符从它们的声明之处直到它所在的源文件结尾处都是可以访问的。文件中定义的函数名也具有文件作用域。 原型作用域：只适用于在函数原型中声明的参数名。 函数作用域：只适用于语句标签，在goto 语句中使用。（不用理会） 链接属性标识符的链接属性决定如何处理在不同文件中出现的标识符。标识符的作用域与它的链接属性有关，但两个属性并不相同。 链接属性一共 3 种——external、internal 和 none。 none：拥有该属性的标识符被当作单独的个体，即该标识符的多个声明被当作独立不同的实体。 internal：拥有该属性的标识符在同一个源文件内的所有声明都指同一个实体，位于不同源文件的多个声明分属不同的实体。 external：拥有该属性的标识符不论声明多少次，位于多个源文件的标识符都表示同一实体。 如下例子所示，其中，b、c 和 f 的链接属性为 external，其余标识符的链接属性为 none。 12345678typedef char *a;int b;int c( int d )&#123; int e; int f(int g); ...&#125; 除了缺省时的链接属性之外，关键字 extern 和 static 用于在声明中修改标识符的链接属性。 如果某个声明缺省时为 external 链接属性，在它前面加上 static 关键字可以使它的链接属性变为 internal。如：static int b;。那么变量 b 将为这个源文件所私有。此外，static只对缺省链接属性为 external 的声明才有改变链接属性的效果。 external 关键字的规则更加复杂。一般来说，当它为一个标识符指定 external 链接属性时，就可以访问在其他任何位置定义的这个实体。 如果你在一个地方定义变量，请在使用这个变量的其他源文件的声明中添加 extern 关键字。 当 extern 关键字用于源文件中一个标识符的第 1 次声明时，它指定该标识符具有 external 链接属性，但如果它用于该标识符的第 2 次或以后的声明时，它并不会更改由第 1 次声明所指定的链接属性。 存储类型变量的存储类型是指存储变量值的内存类型，它决定变量何时创建、何时销毁以及它的值讲保持多久。三种类型：普通内存、运行时堆栈和硬件寄存器。 变量缺省存储类型取决于它的声明位置。凡是在任何代码块之外声明的变量总是存储于静态内存中，即不属于堆栈的内存，这类变量被称为静态变量。这类变量无法为其指定存储类型。静态变量在程序执行前创建，一直存在。 在代码块内部声明的变量的缺省存储类型是自动的（automatic），即它存储于堆栈中，称为自动变量。自动变量在代码块执行完毕后就消失，当代码块再次执行时，它们的值一般并不是上次执行时的值。注意，修改变量的存储类型并不表示修改该变量的作用域，它仍然只能在该代码块内部按照名字访问。 静态变量和自动变量的初始化存在重要差别。静态变量在可执行文件载入内存时，已经保存了正确初始值的位置将赋值给那个变量，完成这个任务不需要额外的时间和指令，默认初始化为 0。而自动变量的初始化需要更多的开销。事实上，自动变量没有缺省的初始值，而显示初始化将在代码块的起始处插入一条隐式的赋值语句，这导致： 除声明 const 变量之外，在声明变量时同时进行初始化和先声明后赋值只有风格之差，而无效率之别。 这条隐式的赋值语句使自动变量在程序执行到它们所声明的函数时，每次都将重新初始化。 由于初始化在程序运行时执行，因而可以用任何表达式作为初始化值。 若不对自动变量进行初始化，其值总是垃圾。 static 关键字如前面所言，static 关键字有两个用途：修改链接属性和修改存储类型。 当 static 用于函数定义时，或用于代码块之外的变量声明时，它用于修改标识符的链接属性，从 external 改为 internal，但不影响标识符的存储类型和作用域。用这种方式声明的函数或变量只能在声明它们的源文件中访问。 当它用于代码块内部的变量时，static 关键字用于修改变量的存储类型，从自动变量改为静态变量，但变量的链接属性和作用域不受影响。 总结 变量类型 声明的位置 是否存储于堆栈 作用域 如果声明为 static 全局 所有代码块之外 否 从声明处到文件尾 不允许其他源文件访问 局部 代码块起始处 是 整个代码块 变量不存储于堆栈中，其值在程序整个执行期一直保持 形式参数 函数头部 是 整个函数 不允许","content":"<p>逃避手中的难事，看看 C 中标识符的作用域、链接属性和存储类型是如何区分的吧。</p>\n<p>以下内容为阅读《C 和指针》时做的笔记。pp39-47。</p>\n<a id=\"more\"></a>\n<h2 id=\"作用域\"><a href=\"#作用域\" class=\"headerlink\" title=\"作用域\"></a>作用域</h2><p>当变量在程序的某个部分被声明时，它只有在程序的一定区域才能被访问，这个区域由标识符的作用域决定。</p>\n<blockquote>\n<p>标识符的作用域就是程序中该标识符可以被使用的区域。</p>\n</blockquote>\n<p>这意味着，作用域之外无法访问这些变量，分属不同作用域的变量可以有相同的名字。</p>\n<p>编译器可以确认 4 种不同类型的作用域——文件作用域、函数作用域、代码作用域和原型作用域。标识符声明的位置决定它的作用域。</p>\n<ul>\n<li><strong>代码块作用域</strong>：位于一堆花括号之间的所有语句称为一个代码块，任何在代码块开始位置声明的标识符都具有代码块作用域（block scope）。</li>\n<li><strong>文件作用域</strong>：任何在代码块之外声明的标识符都具有文件作用域（file scope）。它表示这些标识符从它们的声明之处直到它所在的源文件结尾处都是可以访问的。文件中定义的函数名也具有文件作用域。</li>\n<li><strong>原型作用域</strong>：只适用于在函数原型中声明的参数名。</li>\n<li><strong>函数作用域</strong>：只适用于语句标签，在<code>goto</code> 语句中使用。（不用理会）</li>\n</ul>\n<h2 id=\"链接属性\"><a href=\"#链接属性\" class=\"headerlink\" title=\"链接属性\"></a>链接属性</h2><p>标识符的链接属性决定如何处理在不同文件中出现的标识符。标识符的作用域与它的链接属性有关，但两个属性并不相同。</p>\n<p>链接属性一共 3 种——<code>external</code>、<code>internal</code> 和 <code>none</code>。</p>\n<ul>\n<li><code>none</code>：拥有该属性的标识符被当作单独的个体，即该标识符的多个声明被当作独立不同的实体。</li>\n<li><code>internal</code>：拥有该属性的标识符在同一个源文件内的所有声明都指同一个实体，位于不同源文件的多个声明分属不同的实体。</li>\n<li><code>external</code>：拥有该属性的标识符不论声明多少次，位于多个源文件的标识符都表示同一实体。</li>\n</ul>\n<p>如下例子所示，其中，b、c 和 f 的链接属性为 external，其余标识符的链接属性为 none。</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"keyword\">char</span> *a;</span><br><span class=\"line\"><span class=\"keyword\">int</span> b;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">c</span><span class=\"params\">( <span class=\"keyword\">int</span> d )</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> e;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">f</span><span class=\"params\">(<span class=\"keyword\">int</span> g)</span></span>;</span><br><span class=\"line\">    ...</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>除了缺省时的链接属性之外，关键字 <code>extern</code> 和 <code>static</code> 用于在声明中修改标识符的链接属性。</p>\n<p>如果某个声明缺省时为 <code>external</code> 链接属性，在它前面加上 <code>static</code> 关键字可以使它的链接属性变为 <code>internal</code>。如：<code>static int b;</code>。那么变量 b 将为这个源文件所私有。此外，<strong><code>static</code>只对缺省链接属性为 <code>external</code> 的声明才有改变链接属性的效果</strong>。</p>\n<p><code>external</code> 关键字的规则更加复杂。一般来说，<strong>当它为一个标识符指定 <code>external</code> 链接属性时，就可以访问在其他任何位置定义的这个实体</strong>。</p>\n<blockquote>\n<p>如果你在一个地方定义变量，请在使用这个变量的其他源文件的声明中添加 <code>extern</code> 关键字。</p>\n</blockquote>\n<p>当 <code>extern</code> 关键字用于源文件中一个标识符的第 1 次声明时，它指定该标识符具有 <code>external</code> 链接属性，但如果它用于该标识符的第 2 次或以后的声明时，它并不会更改由第 1 次声明所指定的链接属性。</p>\n<h2 id=\"存储类型\"><a href=\"#存储类型\" class=\"headerlink\" title=\"存储类型\"></a>存储类型</h2><p>变量的存储类型是指存储变量值的内存类型，它决定变量何时创建、何时销毁以及它的值讲保持多久。三种类型：普通内存、运行时堆栈和硬件寄存器。</p>\n<p><strong>变量缺省存储类型取决于它的声明位置。</strong>凡是在任何代码块之外声明的变量总是存储于静态内存中，即不属于堆栈的内存，这类变量被称为<em>静态变量</em>。这类变量无法为其指定存储类型。静态变量在程序执行前创建，一直存在。</p>\n<p>在代码块内部声明的变量的缺省存储类型是自动的（automatic），即它存储于堆栈中，称为<strong>自动变量</strong>。自动变量在代码块执行完毕后就消失，当代码块再次执行时，它们的值一般并不是上次执行时的值。注意，修改变量的存储类型并不表示修改该变量的作用域，它仍然只能在该代码块内部按照名字访问。</p>\n<p>静态变量和自动变量的初始化存在重要差别。静态变量在可执行文件载入内存时，已经保存了正确初始值的位置将赋值给那个变量，完成这个任务不需要额外的时间和指令，默认初始化为 0。而自动变量的初始化需要更多的开销。事实上，自动变量没有缺省的初始值，而显示初始化将在代码块的起始处插入一条隐式的赋值语句，这导致：</p>\n<ul>\n<li>除声明 const 变量之外，在声明变量时同时进行初始化和先声明后赋值只有风格之差，而无效率之别。</li>\n<li>这条隐式的赋值语句使自动变量在程序执行到它们所声明的函数时，每次都将重新初始化。</li>\n<li>由于初始化在程序运行时执行，因而可以用任何表达式作为初始化值。</li>\n<li>若不对自动变量进行初始化，其值总是垃圾。</li>\n</ul>\n<h2 id=\"static-关键字\"><a href=\"#static-关键字\" class=\"headerlink\" title=\"static 关键字\"></a><code>static</code> 关键字</h2><p>如前面所言，<code>static</code> 关键字有两个用途：修改链接属性和修改存储类型。</p>\n<p>当 <code>static</code> 用于函数定义时，或用于代码块之外的变量声明时，它用于修改标识符的链接属性，从 <code>external</code> 改为 <code>internal</code>，但不影响标识符的存储类型和作用域。用这种方式声明的函数或变量只能在声明它们的源文件中访问。</p>\n<p>当它用于代码块内部的变量时，static 关键字用于修改变量的存储类型，从自动变量改为静态变量，但变量的链接属性和作用域不受影响。</p>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><table>\n<thead>\n<tr>\n<th>变量类型</th>\n<th>声明的位置</th>\n<th>是否存储于堆栈</th>\n<th>作用域</th>\n<th>如果声明为 <code>static</code></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>全局</td>\n<td>所有代码块之外</td>\n<td>否</td>\n<td>从声明处到文件尾</td>\n<td>不允许其他源文件访问</td>\n</tr>\n<tr>\n<td>局部</td>\n<td>代码块起始处</td>\n<td>是</td>\n<td>整个代码块</td>\n<td>变量不存储于堆栈中，其值在程序整个执行期一直保持</td>\n</tr>\n<tr>\n<td>形式参数</td>\n<td>函数头部</td>\n<td>是</td>\n<td>整个函数</td>\n<td>不允许</td>\n</tr>\n</tbody>\n</table>\n","tags":[{"name":"C/C++","slug":"C-C","permalink":"https://jonathan1214.github.io/tags/C-C/"}]},{"title":"一张实验室电脑的软件清单","date":"2020-10-10T05:26:17.000Z","path":"2020/10/windows-software-list/","text":"最多两周后，需要搬到隔壁实验室去，大概会配一台电脑，在此列一张需要安装的软件清单，如果可以的话，最好列出获取软件的方式。 uTorrent 360 压缩 Altium Designer Anaconda Android Studio（-） CCleaner doxygen foxmail git GitHub Desktop Google Chrome Java KeePass Password Safe Keil 4 Mathpix Snipping Tool MathType MATLAB Office, Visio VScode VS Modelsim Node.js Notepad++ Fiddler PuTTy Python Quartus 13.1 ScreenToGif ShowMore Stardock Fences3 Steam Wallpaper Engine TeamViewer Typora Vim VMware WinSCP Wireshark Wolfram Engine XMind 百度网盘 坚果云 欧路词典 QQ 网易云音乐 微信 rime 输入法 桌面日历 补充： endnote Snipaste ToDo","content":"<p>最多两周后，需要搬到隔壁实验室去，大概会配一台电脑，在此列一张需要安装的软件清单，如果可以的话，最好列出获取软件的方式。<br><a id=\"more\"></a></p>\n<ul>\n<li>uTorrent</li>\n<li>360 压缩</li>\n<li>Altium Designer</li>\n<li>Anaconda</li>\n<li>Android Studio（-）</li>\n<li>CCleaner</li>\n<li>doxygen</li>\n<li>foxmail</li>\n<li>git</li>\n<li>GitHub Desktop</li>\n<li>Google Chrome</li>\n<li>Java</li>\n<li>KeePass Password Safe</li>\n<li>Keil 4</li>\n<li>Mathpix Snipping Tool</li>\n<li>MathType</li>\n<li>MATLAB</li>\n<li>Office, Visio</li>\n<li>VScode</li>\n<li>VS</li>\n<li>Modelsim</li>\n<li>Node.js</li>\n<li>Notepad++</li>\n<li>Fiddler</li>\n<li>PuTTy</li>\n<li>Python</li>\n<li>Quartus 13.1</li>\n<li>ScreenToGif</li>\n<li>ShowMore</li>\n<li>Stardock Fences3</li>\n<li>Steam Wallpaper Engine</li>\n<li>TeamViewer</li>\n<li>Typora</li>\n<li>Vim</li>\n<li>VMware</li>\n<li>WinSCP</li>\n<li>Wireshark</li>\n<li>Wolfram Engine</li>\n<li>XMind</li>\n<li>百度网盘</li>\n<li>坚果云</li>\n<li>欧路词典</li>\n<li>QQ</li>\n<li>网易云音乐</li>\n<li>微信</li>\n<li>rime 输入法</li>\n<li>桌面日历</li>\n</ul>\n<p>补充：</p>\n<ul>\n<li>endnote</li>\n<li>Snipaste</li>\n<li>ToDo</li>\n</ul>\n","tags":[{"name":"记录","slug":"记录","permalink":"https://jonathan1214.github.io/tags/记录/"}]},{"title":"生 日","date":"2020-10-07T14:53:02.000Z","path":"2020/10/to-tata/","text":"如果还在，49 了。 放心，一切都好。","content":"<p>如果还在，49 了。</p>\n<p>放心，一切都好。</p>\n","tags":[{"name":"记录","slug":"记录","permalink":"https://jonathan1214.github.io/tags/记录/"}]},{"title":"一次一次又一次的拖延，能逃离这个怪圈吗？","date":"2020-10-04T10:59:12.000Z","path":"2020/10/again-again-agin-delay/","text":"2 号老师告诉我们 8 号提交开题报告给她，现在已经 4 号晚上了，我还是几乎一字未动。是我拖延症又犯了，还是我根本不配写，关于这个问题，我决定好好考虑下，现在也写不下去，考虑下这个问题也挺好。首先明确一点，不管配不配，这个报告我都必须写完。在这个基础上，再去考虑下一步：我要写出一个什么样的报告？为了这个目标我需要去做哪些事情？如果仅仅只是为了写完报告，那么我大可以找几篇硕士论文，把他们的前面部分进行一些糅合，就可以得到一份报告了，这种方式不失为一个选择，但也面临着问题：我到底要做的是什么东西？这个问题的优先级甚至还可以再提一提。或许我早就有了前面那个问题的答案：简单做一个编译码器即可，但简单搜索之后，我感到很难受，因为这件事情别人早就做过了，甚至已经做得挺好了，而我只是一个新手，也要去做相同的事情，我下意识地想逃避了。 话说回来，我从心底是喜欢做这个东西的，我只是讨厌写报告，因为我不擅长写，非要写的话我会写得很烂，这让我感到很难受，这种感觉太真实了，我又把成长型思维抛到脑后了。现在让我尝试用这种思维进行思考：无论最终我的报告写得怎么样，我做的这个东西有没有得到认可以从而让我能够顺利毕业，我都要努力去完成，这是出于对老师的信任，而且我不该纠结于表面的批评，应该更深一步地考虑，将这看成是我成长的机会。报告写得烂，那就烂吧，我努力了，这次写得烂，那么给我建议吧，下一次我会让它变得更好。毕设做的东西毫无创新，不能通过，那可不行，我已经完成了。 还有一个问题，如果有不确定的地方，不要再过多考虑了，那只是徒劳，尽早去寻求帮助吧。不要高估了自己，我需要帮助，这是快速进步的秘诀。 话已至此，希望我真心听进去了，还剩下三天时间，加油写完吧，更重要的事是，记住这种感觉，这比什么都重要。人生没有这么短，路还长。","content":"<p>2 号老师告诉我们 8 号提交开题报告给她，现在已经 4 号晚上了，我还是几乎一字未动。是我拖延症又犯了，还是我根本不配写，关于这个问题，我决定好好考虑下，现在也写不下去，考虑下这个问题也挺好。<br><a id=\"more\"></a><br>首先明确一点，不管配不配，这个报告我都必须写完。在这个基础上，再去考虑下一步：我要写出一个什么样的报告？为了这个目标我需要去做哪些事情？如果仅仅只是为了写完报告，那么我大可以找几篇硕士论文，把他们的前面部分进行一些糅合，就可以得到一份报告了，这种方式不失为一个选择，但也面临着问题：我到底要做的是什么东西？这个问题的优先级甚至还可以再提一提。或许我早就有了前面那个问题的答案：简单做一个编译码器即可，但简单搜索之后，我感到很难受，因为这件事情别人早就做过了，甚至已经做得挺好了，而我只是一个新手，也要去做相同的事情，我下意识地想逃避了。</p>\n<p>话说回来，我从心底是喜欢做这个东西的，<strong>我只是讨厌写报告，因为我不擅长写，非要写的话我会写得很烂，这让我感到很难受</strong>，这种感觉太真实了，我又把成长型思维抛到脑后了。现在让我尝试用这种思维进行思考：无论最终我的报告写得怎么样，我做的这个东西有没有得到认可以从而让我能够顺利毕业，我都要努力去完成，这是出于对老师的信任，而且我不该纠结于表面的批评，应该更深一步地考虑，将这看成是我成长的机会。报告写得烂，那就烂吧，我努力了，这次写得烂，那么给我建议吧，下一次我会让它变得更好。毕设做的东西毫无创新，不能通过，那可不行，我已经完成了。</p>\n<p>还有一个问题，如果有不确定的地方，不要再过多考虑了，那只是徒劳，尽早去寻求帮助吧。不要高估了自己，我需要帮助，这是快速进步的秘诀。</p>\n<p>话已至此，希望我真心听进去了，还剩下三天时间，加油写完吧，更重要的事是，记住这种感觉，这比什么都重要。人生没有这么短，路还长。</p>\n","tags":[{"name":"记录","slug":"记录","permalink":"https://jonathan1214.github.io/tags/记录/"},{"name":"sr-log","slug":"sr-log","permalink":"https://jonathan1214.github.io/tags/sr-log/"}]},{"title":"毕设要开题了！","date":"2020-10-02T12:43:53.000Z","path":"2020/10/preparation-for-start-of-graduation-project/","text":"昨天恰逢国庆和中秋一起过，中午和晚上都出去聚餐了，中午和实验室的师姐和师兄们吃，晚上和打篮球的朋友们吃，很舒服。不过今天需要准备开题了，早上来实验室了，又是拖着略显疲惫的身体，我已经有点分不清是因为睡眠不足还是手上在做的东西迟迟没有进展，稍加思索，我更觉得是手上做的东西迟迟没有进展导致的，因为一事无成，所以心中有牵挂，晚上睡不好，早上没精神，然后就是效率低下，更加难以推进手中的事情，这是一个恶性循环。需要找到好的办法突破这个循环，目前看来唯一的办法就是取得进展，但是需要消耗的时间和精力未免也太多了些，我需要别的更好的办法。 现在这些暂时都不重要了，现在重要的事情是 8 号提交一份开题报告给老师。 抛开对未知的恐惧，找到一条路吧。","content":"<p>昨天恰逢国庆和中秋一起过，中午和晚上都出去聚餐了，中午和实验室的师姐和师兄们吃，晚上和打篮球的朋友们吃，很舒服。<br><a id=\"more\"></a><br>不过今天需要准备开题了，早上来实验室了，又是拖着略显疲惫的身体，我已经有点分不清是因为睡眠不足还是手上在做的东西迟迟没有进展，稍加思索，我更觉得是手上做的东西迟迟没有进展导致的，因为一事无成，所以心中有牵挂，晚上睡不好，早上没精神，然后就是效率低下，更加难以推进手中的事情，这是一个恶性循环。需要找到好的办法突破这个循环，目前看来唯一的办法就是取得进展，但是需要消耗的时间和精力未免也太多了些，我需要别的更好的办法。</p>\n<p>现在这些暂时都不重要了，现在重要的事情是 8 号提交一份开题报告给老师。</p>\n<p>抛开对未知的恐惧，找到一条路吧。</p>\n","tags":[{"name":"记录","slug":"记录","permalink":"https://jonathan1214.github.io/tags/记录/"}]},{"title":"完成小阶段任务——终于完成了简单的 LDPC 编译码","date":"2020-09-24T01:31:36.000Z","path":"2020/09/I-DID-IT/","text":"折腾了这么多天，总算是完成了 8 月就拿到的 LDPC 编码译码任务，最近几天一直在 Debug，如果不是做高阶调制，我可能永远不会注意到这个 Bug——随机数生成错误，而这个错误在低信噪比时对仿真结果几乎没有印象，当时做的时候也没有去尝试更高的信噪比，这是我的失误，加上高阶调制之后，事情变得不太一样了，错误就显现出来了，误码率平层在10^-4位置出现了，这本不该发生。经过几天的寻找，从一开始的随意寻找，到昨晚上才想到断点查看判决时的数据，还是经验不足啊，希望经过这次的痛苦经历，自己的Debug能力能有所提高。 列出几条 Debug 原则，长长记性。 Debug 之前，先捋一遍代码的整个流程，思考可能出现错误的地方。 测试驱动开发。多写写测试。 对于从网上找来的代码，如果没有经过充分的测试，谨慎使用。 按时提交代码，千万不要拖延。 更好的断点调试，查看出问题的数据，找到问题的根源。 如果实在在自己写的部分找不到错误，那么错的不是你，是这个世界…… OK，这一阶段的任务已经完成，下一步是尝试在 FPGA 上实现编译码过程，我需要好好思考这个问题： 目标：LDPC 码编译码 FPGA 实现。 这个目标还不够明确：是仅仅做一下基带仿真还是要进行实际的传输，这是两件完全不一样的事情。这个问题需要考虑，但我觉得大概率两件事情都要做，先易后难。至于更多的事情，后面碰到了再说吧。","content":"<p>折腾了这么多天，总算是完成了 8 月就拿到的 LDPC 编码译码任务，最近几天一直在 Debug，如果不是做高阶调制，我可能永远不会注意到这个 Bug——随机数生成错误，而这个错误在低信噪比时对仿真结果几乎没有印象，当时做的时候也没有去尝试更高的信噪比，这是我的失误，加上高阶调制之后，事情变得不太一样了，错误就显现出来了，误码率平层在10^-4位置出现了，这本不该发生。经过几天的寻找，从一开始的随意寻找，到昨晚上才想到断点查看判决时的数据，还是经验不足啊，希望经过这次的痛苦经历，自己的Debug能力能有所提高。</p>\n<p>列出几条 Debug 原则，长长记性。<br><a id=\"more\"></a></p>\n<ul>\n<li>Debug 之前，先捋一遍代码的整个流程，思考可能出现错误的地方。</li>\n<li>测试驱动开发。多写写测试。</li>\n<li>对于从网上找来的代码，如果没有经过充分的测试，谨慎使用。</li>\n<li>按时提交代码，千万不要拖延。</li>\n<li>更好的断点调试，查看出问题的数据，找到问题的根源。</li>\n<li>如果实在在自己写的部分找不到错误，那么错的不是你，是这个世界……</li>\n</ul>\n<p>OK，这一阶段的任务已经完成，下一步是尝试在 FPGA 上实现编译码过程，我需要好好思考这个问题：</p>\n<blockquote>\n<p>目标：LDPC 码编译码 FPGA 实现。</p>\n</blockquote>\n<p>这个目标还不够明确：是仅仅做一下基带仿真还是要进行实际的传输，这是两件完全不一样的事情。这个问题需要考虑，但我觉得大概率两件事情都要做，先易后难。至于更多的事情，后面碰到了再说吧。 </p>\n","tags":[{"name":"记录","slug":"记录","permalink":"https://jonathan1214.github.io/tags/记录/"},{"name":"sr-log","slug":"sr-log","permalink":"https://jonathan1214.github.io/tags/sr-log/"}]},{"title":"搬砖日记 2020.09.16","date":"2020-09-16T12:27:54.000Z","path":"2020/09/sr-log-200916/","text":"实验室的第二天，写下的第一篇日志。今天的任务是实现 LDPC 码的高阶调制问题，经过了一番折腾，最终得到了一个看起来正确的方法，这种方法也在『Channel Codes』这本书的第 15 章简单提到了。实现 LDPC 码的高阶调制解调框图如下所示。 问题在于如何从接收到的符号中获得 LDPC 码译码器需要的信息，15 章中给出了在 SPA 下，由接收到的符号求每个比特的内信息计算方法，如下所示： 其他的计算则和 BPSK 调制的 LDPC 码译码相同，由此我们解决了 LDPC 码的高阶调制问题。当然肯定有很多细节我没有考虑到，暂时先这样吧，后面想到了再补充。","content":"<p>实验室的第二天，写下的第一篇日志。今天的任务是实现 LDPC 码的高阶调制问题，经过了一番折腾，最终得到了一个看起来正确的方法，这种方法也在『Channel Codes』这本书的第 15 章简单提到了。实现 LDPC 码的高阶调制解调框图如下所示。</p>\n<a id=\"more\"></a>\n<img src=\"/2020/09/sr-log-200916/image-20200916203759142.png\" title=\"a block diagram of an LDPC-coded modulation system\">\n<p>问题在于如何从接收到的符号中获得 LDPC 码译码器需要的信息，15 章中给出了在 SPA 下，由接收到的符号求每个比特的内信息计算方法，如下所示：</p>\n<img src=\"/2020/09/sr-log-200916/image-20200916204403197.png\" title=\"LDPC-coded modulation system 内信息计算\">\n<p>其他的计算则和 BPSK 调制的 LDPC 码译码相同，由此我们解决了 LDPC 码的高阶调制问题。当然肯定有很多细节我没有考虑到，暂时先这样吧，后面想到了再补充。</p>\n","tags":[{"name":"记录","slug":"记录","permalink":"https://jonathan1214.github.io/tags/记录/"},{"name":"sr-log","slug":"sr-log","permalink":"https://jonathan1214.github.io/tags/sr-log/"}]},{"title":"闲逛半个月","date":"2020-09-03T02:27:36.000Z","path":"2020/09/hang-out-for-half-a-month/","text":"如题所示 ，我已经闲逛了半个月之久，昏昏沉沉过了半个月，像是突然失去了学习的状态，心情无法平复，难以集中到文章上，于是我逃避到游戏中，我尝试了 CSGO，Dota2，现在又开始玩 LOL 了，但我从心里知道这并不会长久的，很快我就会回归到我的状态，集中注意力学习。这半个月来我到底干了什么呢？首先我感受到了自己的懈怠，但是不想就这样懈怠下去，于是决定先做点简单的事情——在 B 站看 FPGA 教程，或许是教程的每个视频太长，让我感觉很挫败，或许根本就是我无法静下心学习，总之，几天后我决定看买的那本 FPGA 书。看书比起看视频来果然快很多，而且可以随时停下来刷刷手机，四天之后，我把书看完了，但真的只是看完了，自问看过的东西脑子还记得的真的不多，很惭愧。接下来我彻底无事可做了，虽然老师给了篇文章让我去看，但是我完全无法静下心去看文章，尽管那篇文章并不长，简单看下的话应该花不到一个下午就能看完，我一定是哪里不对劲了。到现在我还是没有找到原因，不过我感受到了，这段不对劲的时间马上要过去了，我可以重新回归到之前的状态。 我猜测，我在失去目标时很容易变的不知所措，如果我正在做的事情没有一个清晰的进度指示，也会让我感到沮丧无法坚持下去。","content":"<p>如题所示 ，我已经闲逛了半个月之久，昏昏沉沉过了半个月，像是突然失去了学习的状态，心情无法平复，难以集中到文章上，于是我逃避到游戏中，我尝试了 CSGO，Dota2，现在又开始玩 LOL 了，但我从心里知道这并不会长久的，很快我就会回归到我的状态，集中注意力学习。<br><a id=\"more\"></a><br>这半个月来我到底干了什么呢？首先我感受到了自己的懈怠，但是不想就这样懈怠下去，于是决定先做点简单的事情——在 B 站看 FPGA 教程，或许是教程的每个视频太长，让我感觉很挫败，或许根本就是我无法静下心学习，总之，几天后我决定看买的那本 FPGA 书。看书比起看视频来果然快很多，而且可以随时停下来刷刷手机，四天之后，我把书看完了，但真的只是看完了，自问看过的东西脑子还记得的真的不多，很惭愧。接下来我彻底无事可做了，虽然老师给了篇文章让我去看，但是我完全无法静下心去看文章，尽管那篇文章并不长，简单看下的话应该花不到一个下午就能看完，我一定是哪里不对劲了。到现在我还是没有找到原因，不过我感受到了，这段不对劲的时间马上要过去了，我可以重新回归到之前的状态。</p>\n<p>我猜测，我在失去目标时很容易变的不知所措，如果我正在做的事情没有一个清晰的进度指示，也会让我感到沮丧无法坚持下去。</p>\n","tags":[{"name":"记录","slug":"记录","permalink":"https://jonathan1214.github.io/tags/记录/"}]},{"title":"LDPC 码译码结束，喘上一口气","date":"2020-08-17T14:39:27.000Z","path":"2020/08/a-small-summer-win/","text":"过去的这两周，我的时间基本花在了 LDPC 码的学习上，开始是阅读『hannel Codes』这本书，然后就是用 C 语言实现其中介绍的译码算法和 SPA 和其简化版本 MSA，若是不深入其原理，实现这个算法并不困难，但我忽视了一个重要的问题：我实现的算法最终要达到什么样的效果？这导致我白白浪费了两天时间。 书上给出的 BER 曲线中，使用的算法是 SPA，而我实现的算法是 MSA，其他条件相同的情况下，MSA 性能就是不如 SPA，因为它只是 SPA 的简化版本。我做出来的误码率曲线老是和书上的差一点，让我非常困惑，纠结了半天，后面问了老师，她给了她当时做的时候生成的 H 矩阵和当时实现的代码，让我作一个参考，这对我帮助很大。 昨天一天还是白白度过了，我在极度自闭中混过了一天，期间断点运行了代码试了试，发现了我原来实现算法中的一个小问题，还优化了一下代码，但都对性能毫无改进，就算是使用老师给的 H 矩阵也是一样。我开始怀疑是算法本身的问题，是不是它根本就达不到书上给出的性能，于是今天我回头去看书，在图的上方，作者写明了仿真算法是 SPA，而我做的是 MSA！该死，我居然直接忽视了这么明显了信息。在往前翻翻，作者提到 MSA 会比 SPA 的性能差 0.1dB，我的仿真是符合的！我有点激动，赶紧实现了 SPA，稍加调试，开始运行，等待结果。 果然，就是 MSA 算法的问题，书上给出的图在 SPA 算法下的，而我做的是 MSA，自然有性能差距。 这次仿真就告一段落了，后续我会写几篇文章，总结仿真实现的过程以及在仿真中遇到的问题。现在我觉得最关键的一个问题是：面对仿真结果的不理想，如何进行调试，尤其是时间有限的情况下，如何快速定位错误。这是个共性的问题，需要经验的积累，从这次经历中我能学到的是什么呢？找时间总结下。","content":"<p>过去的这两周，我的时间基本花在了 LDPC 码的学习上，开始是阅读『hannel Codes』这本书，然后就是用 C 语言实现其中介绍的译码算法和 SPA 和其简化版本 MSA，若是不深入其原理，实现这个算法并不困难，但我忽视了一个重要的问题：我实现的算法最终要达到什么样的效果？这导致我白白浪费了两天时间。</p>\n<a id=\"more\"></a>\n<p>书上给出的 BER 曲线中，使用的算法是 SPA，而我实现的算法是 MSA，其他条件相同的情况下，MSA 性能就是不如 SPA，因为它只是 SPA 的简化版本。我做出来的误码率曲线老是和书上的差一点，让我非常困惑，纠结了半天，后面问了老师，她给了她当时做的时候生成的 H 矩阵和当时实现的代码，让我作一个参考，这对我帮助很大。</p>\n<img src=\"/2020/08/a-small-summer-win/image-20200817230403378.png\" title=\"书上给出的仿真结果图\">\n<p>昨天一天还是白白度过了，我在极度自闭中混过了一天，期间断点运行了代码试了试，发现了我原来实现算法中的一个小问题，还优化了一下代码，但都对性能毫无改进，就算是使用老师给的 H 矩阵也是一样。我开始怀疑是算法本身的问题，是不是它根本就达不到书上给出的性能，于是今天我回头去看书，在图的上方，作者写明了仿真算法是 SPA，而我做的是 MSA！该死，我居然直接忽视了这么明显了信息。在往前翻翻，作者提到 MSA 会比 SPA 的性能差 0.1dB，我的仿真是符合的！我有点激动，赶紧实现了 SPA，稍加调试，开始运行，等待结果。</p>\n<p><strong>果然，就是 MSA 算法的问题，书上给出的图在 SPA 算法下的，而我做的是 MSA，自然有性能差距。</strong></p>\n<img src=\"/2020/08/a-small-summer-win/finalresult.png\" title=\"最终的仿真结果\">\n<p>这次仿真就告一段落了，后续我会写几篇文章，总结仿真实现的过程以及在仿真中遇到的问题。现在我觉得最关键的一个问题是：<strong>面对仿真结果的不理想，如何进行调试，尤其是时间有限的情况下，如何快速定位错误。</strong>这是个共性的问题，需要经验的积累，从这次经历中我能学到的是什么呢？找时间总结下。</p>\n","tags":[{"name":"记录","slug":"记录","permalink":"https://jonathan1214.github.io/tags/记录/"}]},{"title":"FPGA 开发流程以及如何创建一个工程","date":"2020-08-07T13:57:18.000Z","path":"2020/08/FPGA-development-process-and-an-project-example/","text":"几天前再次从老师那儿得知毕设我需要做的是 LDPC 码的 FPGA 实现，看起来我必须得找时间学学 FPGA 了。本文就是在今天看完 B 站小梅哥的FPGA视频做的笔记，简单介绍 FPGA 的开发流程，最后会在 Quartus 中创建一个工程。 1. 开发流程一般的 FPGA 项目开发会遵循下面这个流程，从设计输入到最后的在线调试，当然有的人叫法可能不同，我看到的这个教程是这么介绍的，下面逐个来看每一步都需要做什么。 1.1 设计定义1.2 设计输入1.3 分析和综合1.4 功能仿真1.5 布局布线1.6 时序仿真1.7 IO 分配以及文件的生成1.8 配置 FPGA1.9 在线调试2. 如何完成一个简单的项目了解了上面的开发流程后，现在以一个简单的例子说明具体是如何操作的，同时学习下如何在 Quartus 中创建工程。 设计定义 一个二选一多路器，包含两个输入 IO，a 和 b，可以是高或低电平，还有一个输入按键，当按键按下时，LED 与 a 端口状态相同，当按键松开时，LED 与 b 端口状态相同。 这就完成了第一步，我们明确了需要做的东西需要实现的功能是什么样的。接下来是第二步，我们需要在 Verilog 文件中定义模块，将我们的设计实现出来。 2.1 创建工程在创建工程之前，先了解下我们的项目目录安排，如下图所示，template 文件夹下包含了四个文件夹，功能分别是： doc 用来存放相关的文档； prj 用来存放项目相关的文件； rtl 用来存放我们设计模块，保存的是 Verilog 文件； testbench 存放的是 testbench 的 Verilog 文件，在涉及到时在详细述。 了解项目目录安排后，我们就可以创建工程了，每次需要创建工程时，可以把这个 template 拷贝一份然后改为我们需要的名字即可。打开 Quartus 软件，开始界面如下所示，我使用的是 13.0 版本。 点击红框处的 Create a New Project 就可以开始创建一个新工程了，点击下一步会出现如下界面，在这个界面有两件事需要做：选择项目目录，填写项目名称。 像我们刚才所说的一样，复制 template 目录，重命名为 test，然后选择项目目录为 test 下的 prj 目录，填写项目名称为也为 test，然后点击下一步，这个界面我们可以添加已经有的文件，但我们还没有，直接点击下一步，在这里我们需要选择 FPGA 的型号，这里根据手中的板子上的 FPGA 型号选择即可，关于 FPGA 的命名规则，可以上网搜下。 选择完之后点击下一步，在这里我们需要选择 EDA 工具，这里选择 Simulation 工具即可，我这里安装了 ModelSim，所以选择 ModelSim，一般还是建议使用 ModelSim-Altera，说是用 ModelSim 会有一些路径问题，需要配置，对初学者不是很友好，我暂时还没有碰到，因此先这么用着。然后选择 Format 为 Verilog HDL。 之后一路点击next即可。我们的项目创建完毕了。 2.2 编写模块接下来编写模块以实现设计定义，先创建 Verilog 脚本：Ctrl + N 新建文件，选择 Verilog HDL。新建文件后，将文件保存到 rtl 目录下，命名为 test.v，之后就可以编写 module 了。在打开的 test.v 文件中输入如下内容： 1234567891011121314module test(a, b, key_in, led_out); input a; // 输入端口 a input b; // 输入端口 b input key_in; // 按键输入 选择信号 output led_out; // led 控制端口 // 当 key_in == 0, led_out = a assign led_out = (key_in == 0) ? a : b; endmodule 2.3 分析与综合这个模块就可以实现我们设计定义中的内容，编写完之后，点击菜单栏中的 Processing 下的 Start 下的 Start Analysis &amp; Synthesis，或者点击工具栏上的 Start Analysis &amp; Synthesis，对文件进行分析和综合，检查文件中是否有错，如果有的话，需要去解决才能进行下一步。 2.4 前仿真前仿真前，先要配置我们的 testbench。完成之后可以点击 RTL Simulation 进行前仿真。 2.5 布局布线点击 Start Compilation： 2.6 后仿真点击 Gate Level Simulation：","content":"<p>几天前再次从老师那儿得知毕设我需要做的是 LDPC 码的 FPGA 实现，看起来我必须得找时间学学 FPGA 了。本文就是在今天看完 B 站<a href=\"https://space.bilibili.com/476579378\" target=\"_blank\" rel=\"noopener\">小梅哥</a>的<a href=\"https://www.bilibili.com/video/BV1KE411h7AZ\" target=\"_blank\" rel=\"noopener\">FPGA视频</a>做的笔记，简单介绍 FPGA 的开发流程，最后会在 Quartus 中创建一个工程。</p>\n<a id=\"more\"></a>\n<h2 id=\"1-开发流程\"><a href=\"#1-开发流程\" class=\"headerlink\" title=\"1. 开发流程\"></a>1. 开发流程</h2><p>一般的 FPGA 项目开发会遵循下面这个流程，从设计输入到最后的在线调试，当然有的人叫法可能不同，我看到的这个教程是这么介绍的，下面逐个来看每一步都需要做什么。</p>\n<h3 id=\"1-1-设计定义\"><a href=\"#1-1-设计定义\" class=\"headerlink\" title=\"1.1 设计定义\"></a>1.1 设计定义</h3><h3 id=\"1-2-设计输入\"><a href=\"#1-2-设计输入\" class=\"headerlink\" title=\"1.2 设计输入\"></a>1.2 设计输入</h3><h3 id=\"1-3-分析和综合\"><a href=\"#1-3-分析和综合\" class=\"headerlink\" title=\"1.3 分析和综合\"></a>1.3 分析和综合</h3><h3 id=\"1-4-功能仿真\"><a href=\"#1-4-功能仿真\" class=\"headerlink\" title=\"1.4 功能仿真\"></a>1.4 功能仿真</h3><h3 id=\"1-5-布局布线\"><a href=\"#1-5-布局布线\" class=\"headerlink\" title=\"1.5 布局布线\"></a>1.5 布局布线</h3><h3 id=\"1-6-时序仿真\"><a href=\"#1-6-时序仿真\" class=\"headerlink\" title=\"1.6 时序仿真\"></a>1.6 时序仿真</h3><h3 id=\"1-7-IO-分配以及文件的生成\"><a href=\"#1-7-IO-分配以及文件的生成\" class=\"headerlink\" title=\"1.7 IO 分配以及文件的生成\"></a>1.7 IO 分配以及文件的生成</h3><h3 id=\"1-8-配置-FPGA\"><a href=\"#1-8-配置-FPGA\" class=\"headerlink\" title=\"1.8 配置 FPGA\"></a>1.8 配置 FPGA</h3><h3 id=\"1-9-在线调试\"><a href=\"#1-9-在线调试\" class=\"headerlink\" title=\"1.9 在线调试\"></a>1.9 在线调试</h3><h2 id=\"2-如何完成一个简单的项目\"><a href=\"#2-如何完成一个简单的项目\" class=\"headerlink\" title=\"2. 如何完成一个简单的项目\"></a>2. 如何完成一个简单的项目</h2><p>了解了上面的开发流程后，现在以一个简单的例子说明具体是如何操作的，同时学习下如何在 Quartus 中创建工程。</p>\n<ul>\n<li><p><strong>设计定义</strong></p>\n<p>一个二选一多路器，包含两个输入 IO，a 和 b，可以是高或低电平，还有一个输入按键，当按键按下时，LED 与 a 端口状态相同，当按键松开时，LED 与 b 端口状态相同。</p>\n</li>\n</ul>\n<p>这就完成了第一步，我们明确了需要做的东西需要实现的功能是什么样的。接下来是第二步，我们需要在 Verilog 文件中定义模块，将我们的设计实现出来。</p>\n<h3 id=\"2-1-创建工程\"><a href=\"#2-1-创建工程\" class=\"headerlink\" title=\"2.1 创建工程\"></a>2.1 创建工程</h3><p>在创建工程之前，先了解下我们的项目目录安排，如下图所示，template 文件夹下包含了四个文件夹，功能分别是：</p>\n<ul>\n<li>doc 用来存放相关的文档；</li>\n<li>prj 用来存放项目相关的文件；</li>\n<li>rtl 用来存放我们设计模块，保存的是 Verilog 文件；</li>\n<li>testbench 存放的是 testbench 的 Verilog 文件，在涉及到时在详细述。</li>\n</ul>\n<p><img src=\"2020-08-07-FPGA-development-process-and-an-project-example/image-20200807223822609.png\" alt=\"image-20200807223822609\"></p>\n<p>了解项目目录安排后，我们就可以创建工程了，每次需要创建工程时，可以把这个 template 拷贝一份然后改为我们需要的名字即可。打开 Quartus 软件，开始界面如下所示，我使用的是 13.0 版本。</p>\n<p><img src=\"2020-08-07-FPGA-development-process-and-an-project-example/image-20200807224428973.png\" alt=\"image-20200807224428973\"></p>\n<p>点击红框处的 Create a New Project 就可以开始创建一个新工程了，点击下一步会出现如下界面，在这个界面有两件事需要做：选择项目目录，填写项目名称。</p>\n<p><img src=\"2020-08-07-FPGA-development-process-and-an-project-example/image-20200807225227001.png\" alt=\"image-20200807225227001\"></p>\n<p>像我们刚才所说的一样，复制 template 目录，重命名为 test，然后选择项目目录为 test 下的 prj 目录，填写项目名称为也为 test，然后点击下一步，这个界面我们可以添加已经有的文件，但我们还没有，直接点击下一步，在这里我们需要选择 FPGA 的型号，这里根据手中的板子上的 FPGA 型号选择即可，关于 FPGA 的命名规则，可以上网搜下。</p>\n<p><img src=\"2020-08-07-FPGA-development-process-and-an-project-example/image-20200807225754347.png\" alt=\"image-20200807225754347\"></p>\n<p>选择完之后点击下一步，在这里我们需要选择 EDA 工具，这里选择 Simulation 工具即可，我这里安装了 ModelSim，所以选择 ModelSim，一般还是建议使用 ModelSim-Altera，说是用 ModelSim 会有一些路径问题，需要配置，对初学者不是很友好，我暂时还没有碰到，因此先这么用着。然后选择 Format 为 Verilog HDL。</p>\n<p><img src=\"2020-08-07-FPGA-development-process-and-an-project-example/image-20200807230147706.png\" alt=\"image-20200807230147706\"></p>\n<p>之后一路点击next即可。我们的项目创建完毕了。</p>\n<h3 id=\"2-2-编写模块\"><a href=\"#2-2-编写模块\" class=\"headerlink\" title=\"2.2 编写模块\"></a>2.2 编写模块</h3><p>接下来编写模块以实现设计定义，先创建 Verilog 脚本：Ctrl + N 新建文件，选择 Verilog HDL。新建文件后，将文件保存到 rtl 目录下，命名为 test.v，之后就可以编写 module 了。在打开的 test.v 文件中输入如下内容：</p>\n<figure class=\"highlight verilog\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">module</span> test(a, b, key_in, led_out);</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">input</span> a; <span class=\"comment\">// 输入端口 a</span></span><br><span class=\"line\">    <span class=\"keyword\">input</span> b; <span class=\"comment\">// 输入端口 b</span></span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">input</span> key_in; <span class=\"comment\">// 按键输入 选择信号</span></span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">output</span> led_out; <span class=\"comment\">// led 控制端口</span></span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">// 当 key_in == 0, led_out = a</span></span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">assign</span> led_out = (key_in == <span class=\"number\">0</span>) ? a : b;</span><br><span class=\"line\">    </span><br><span class=\"line\"><span class=\"keyword\">endmodule</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"2-3-分析与综合\"><a href=\"#2-3-分析与综合\" class=\"headerlink\" title=\"2.3 分析与综合\"></a>2.3 分析与综合</h3><p>这个模块就可以实现我们设计定义中的内容，编写完之后，点击菜单栏中的 Processing 下的 Start 下的 Start Analysis &amp; Synthesis，或者点击工具栏上的 Start Analysis &amp; Synthesis，对文件进行分析和综合，检查文件中是否有错，如果有的话，需要去解决才能进行下一步。</p>\n<p><img src=\"2020-08-07-FPGA-development-process-and-an-project-example/image-20200808202917341.png\" alt=\"image-20200808202917341\"></p>\n<h3 id=\"2-4-前仿真\"><a href=\"#2-4-前仿真\" class=\"headerlink\" title=\"2.4 前仿真\"></a>2.4 前仿真</h3><p>前仿真前，先要配置我们的 testbench。完成之后可以点击 RTL Simulation 进行前仿真。</p>\n<p><img src=\"2020-08-07-FPGA-development-process-and-an-project-example/image-20200809133617627.png\" alt=\"image-20200809133617627\"></p>\n<h3 id=\"2-5-布局布线\"><a href=\"#2-5-布局布线\" class=\"headerlink\" title=\"2.5 布局布线\"></a>2.5 布局布线</h3><p>点击 Start Compilation：</p>\n<p><img src=\"2020-08-07-FPGA-development-process-and-an-project-example/image-20200809133806051.png\" alt=\"image-20200809133806051\"></p>\n<h3 id=\"2-6-后仿真\"><a href=\"#2-6-后仿真\" class=\"headerlink\" title=\"2.6 后仿真\"></a>2.6 后仿真</h3><p>点击 Gate Level Simulation：</p>\n<p><img src=\"2020-08-07-FPGA-development-process-and-an-project-example/image-20200809134109186.png\" alt=\"image-20200809134109186\"></p>\n","tags":[{"name":"FPGA","slug":"FPGA","permalink":"https://jonathan1214.github.io/tags/FPGA/"}]},{"title":"近日杂记","date":"2020-08-06T02:33:39.000Z","path":"2020/08/some-recent-chores/","text":"又过去几天了，每天保持低效率地看书，也总算是看完了『Channel Codes』的前两章，看书时间分布也就是上午两小时下午两小时，晚上一小时了，期间得穿插着打游戏和上网冲浪，这就是放假的状态吗？有点舒服，但是又觉得不该如此，人生怎么能如此颓废。思考罢了，回头又是继续这种生活，好不快乐。","content":"<p>又过去几天了，每天保持低效率地看书，也总算是看完了『Channel   Codes』的前两章，看书时间分布也就是上午两小时下午两小时，晚上一小时了，期间得穿插着打游戏和上网冲浪，这就是放假的状态吗？有点舒服，但是又觉得不该如此，人生怎么能如此颓废。思考罢了，回头又是继续这种生活，好不快乐。</p>\n<a id=\"more\"></a>\n","tags":[{"name":"记录","slug":"记录","permalink":"https://jonathan1214.github.io/tags/记录/"}]},{"title":"结束了，我的大学前三年","date":"2020-07-31T14:41:41.000Z","path":"2020/07/the-end-of-my-first-three-years-of-university/","text":"今天，终于写完了生产实习要求提交的设计报告，给自己这一周来的辛苦来一个结局。辛苦聪聪了，一直在小组内沟通，感谢，还有大家，虽然摸鱼但好歹在线，感谢。至此，我的大学前三年结束了，没有什么高光时刻，平平淡淡地度过了，今天是一个里程碑。","content":"<p>今天，终于写完了生产实习要求提交的设计报告，给自己这一周来的辛苦来一个结局。辛苦聪聪了，一直在小组内沟通，感谢，还有大家，虽然摸鱼但好歹在线，感谢。至此，我的大学前三年结束了，没有什么高光时刻，平平淡淡地度过了，今天是一个里程碑。</p>\n","tags":[{"name":"记录","slug":"记录","permalink":"https://jonathan1214.github.io/tags/记录/"},{"name":"里程碑","slug":"里程碑","permalink":"https://jonathan1214.github.io/tags/里程碑/"}]},{"title":"写在移动通信期末考试后","date":"2020-07-04T12:18:36.000Z","path":"2020/07/written-after-mobile-communications-final-exam/","text":"刚结束了今年的第一门专业课考试，不用感觉就知道考得稀烂，卷面约有 30 分没做完，折合下最终的成绩直接没了 18 分，这下可以考虑打破最低的考试课得分记录了——电路 76 分，我觉得很有希望。 艰苦的 2020 过去一半了，我还呆在家，来不及感慨自己这半年来又是什么都没做，就得不认真地准备专业课考试，我从心里抵触考试，自然就不好好准备，以为也不过如此，拿到足够多的分数即可，但被现实告知，不会这么容易的，拿到想要的东西也得认真对待才行。 刚结束了今年的第一门专业课考试，不用感觉就知道考得稀烂，卷面约有 30 分没做完，折合下最终的成绩直接没了 18 分，这下可以考虑打破最低的考试课得分记录了——电路 76 分，我觉得很有希望。 问题出在了哪里？ 痛苦地承认自己真的不行？未免太过窝囊。好在这才刚刚开始，还有补救的机会，移动通信失去的东西，要在后面的天线原理和卫星通信上找回来，就像以前做的那样。 希望一切好起来吧。","content":"<p>刚结束了今年的第一门专业课考试，不用感觉就知道考得稀烂，卷面约有 30 分没做完，折合下最终的成绩直接没了 18 分，这下可以考虑打破最低的考试课得分记录了——电路 76 分，我觉得很有希望。<br><a id=\"more\"></a></p>\n<p>艰苦的 2020 过去一半了，我还呆在家，来不及感慨自己这半年来又是什么都没做，就得不认真地准备专业课考试，我从心里抵触考试，自然就不好好准备，以为也不过如此，拿到足够多的分数即可，但被现实告知，不会这么容易的，拿到想要的东西也得认真对待才行。</p>\n<p>刚结束了今年的第一门专业课考试，不用感觉就知道考得稀烂，卷面约有 30 分没做完，折合下最终的成绩直接没了 18 分，这下可以考虑打破最低的考试课得分记录了——电路 76 分，我觉得很有希望。</p>\n<p>问题出在了哪里？</p>\n<p>痛苦地承认自己真的不行？未免太过窝囊。好在这才刚刚开始，还有补救的机会，移动通信失去的东西，要在后面的天线原理和卫星通信上找回来，就像以前做的那样。</p>\n<p>希望一切好起来吧。</p>\n","tags":[{"name":"记录","slug":"记录","permalink":"https://jonathan1214.github.io/tags/记录/"}]},{"title":"『Channel Codes』笔记之有限域、向量空间、有限集合和图","date":"2020-06-22T14:46:35.000Z","path":"2020/06/finiteFields-VectorSpaces-FiniteGeometries-Graphs/","text":"我准备写一系列文章来记录阅读《Channel Codes》时留下来的笔记，这是第一篇，对应书中的第二章，介绍了有限域、向量空间、有限集合和图。无论是传统的信道编码还是现代的信道编码，都离不开这些代数和集合数学的概念，这些概念是信道编码的基础。 2.1 集合和二元运算集合(set)就是一些特定对象的合集(collection)，这些对象被称作集合中的元素(element)。如：$X = {x_1, x_2, x_3, x_4, x_5, x_6}$，则 $X$ 是一个集合，它有 6 个元素。关于集合，我们需要知道下面这些： 有限集(finite set)：集合中只有有限个元素； 无限集(infinite set)：集合中的元素是无限个的； 基数(cardinality)：集合 $X$ 中元素的个数就是元素的基数，记作 $| X|$。 子集(subset) 真子集(proper subset) 定义在集合 $S$ 上的二元运算定义了一种规则，它对集合中的一对元素以确定的顺序进行运算，且结果仍然属于该集合。 associative（结合的）：运算满足结合律。 commutative（交换的）：运算满足交换律。 2.2 群代数系统：集合定义在集合上的一些运算。 2.2.1 群的基本概念定义：集合和定义在集合上的一个二元元算称为群，且满足如下条件： 运算满足结合律（associative） 集合有一个单位元（identity element） 对于任何一个元素，在集合中存在一个它的逆，且这个逆是唯一的。 如果一个群是可交换的，那么称其为阿贝尔群。 2.2.2 有限群2.2.3 子群和陪集 陪集的一些性质： No two elements of a coset of H are identical. No two elements from two different cosets of H are identical. Every element of G appears in one and only one coset of H. All distinct cosets of H are disjoint. The union of all the distinct cosets of H forms the group G. 拉格朗日定理： 2.3 域有限域在编码理论中非常重要。 2.3.1 定义和基本概念 从定义在可以看到，域可以分为两个群，每个群各有一个单位元素，因此域的元素个数至少为2，且可以证明：存在只含有两个元素的域。 A field is simply an algebraic system in which we can perform addition, sub- traction, multiplication, and division without leaving the field. 从下面这个定义也可以引入到有限域： 一条证明，解释了师姐讲文章时的疑问： 2.3.2 Finite Fields有限域又叫伽罗华域，在差错控制编码中非常重要。记作 GF(p)，p 为素数。 2.4 Vector Space2.4.1 Basic Definitions and Properties 2.5 Polynomials over Finite Fields2.6 Construction and Properties of Galois Fields构造方法：通过 GF(p) 的 m 阶 primitive polynomials 得到 root a，那么，{0, 1, a, a^2, …, a^(p^m-2)} 构成了 GF(p^m)。 2.6.2 Some Fundamental Properties of Finite Fields 2.7 Finite Geometries","content":"<p>我准备写一系列文章来记录阅读《Channel Codes》时留下来的笔记，这是第一篇，对应书中的第二章，介绍了有限域、向量空间、有限集合和图。无论是传统的信道编码还是现代的信道编码，都离不开这些代数和集合数学的概念，这些概念是信道编码的基础。<br><a id=\"more\"></a></p>\n<h2 id=\"2-1-集合和二元运算\"><a href=\"#2-1-集合和二元运算\" class=\"headerlink\" title=\"2.1 集合和二元运算\"></a>2.1 集合和二元运算</h2><p>集合(set)就是一些特定对象的合集(collection)，这些对象被称作集合中的元素(element)。如：$X = {x_1, x_2, x_3, x_4, x_5, x_6}$，则 $X$ 是一个集合，它有 6 个元素。关于集合，我们需要知道下面这些：</p>\n<ul>\n<li>有限集(finite set)：集合中只有有限个元素；</li>\n<li>无限集(infinite set)：集合中的元素是无限个的；</li>\n<li>基数(cardinality)：集合 $X$ 中元素的个数就是元素的基数，记作 $| X|$。</li>\n<li>子集(subset)</li>\n<li>真子集(proper subset)</li>\n</ul>\n<p>定义在集合 $S$ 上的二元运算定义了一种规则，它对集合中的一对元素以<strong>确定的顺序</strong>进行运算，且结果仍然属于该集合。</p>\n<p>associative（结合的）：运算满足结合律。</p>\n<p>commutative（交换的）：运算满足交换律。</p>\n<h2 id=\"2-2-群\"><a href=\"#2-2-群\" class=\"headerlink\" title=\"2.2 群\"></a>2.2 群</h2><p>代数系统：集合定义在集合上的一些运算。</p>\n<h3 id=\"2-2-1-群的基本概念\"><a href=\"#2-2-1-群的基本概念\" class=\"headerlink\" title=\"2.2.1 群的基本概念\"></a>2.2.1 群的基本概念</h3><p>定义：集合和定义在集合上的一个二元元算称为群，且满足如下条件：</p>\n<ol>\n<li>运算满足结合律（associative）</li>\n<li>集合有一个单位元（identity element）</li>\n<li>对于任何一个元素，在集合中存在一个它的逆，且这个逆是唯一的。</li>\n</ol>\n<p>如果一个群是可交换的，那么称其为阿贝尔群。</p>\n<h3 id=\"2-2-2-有限群\"><a href=\"#2-2-2-有限群\" class=\"headerlink\" title=\"2.2.2 有限群\"></a>2.2.2 有限群</h3><h3 id=\"2-2-3-子群和陪集\"><a href=\"#2-2-3-子群和陪集\" class=\"headerlink\" title=\"2.2.3 子群和陪集\"></a>2.2.3 子群和陪集</h3><p><img src=\"2020-06-22-finiteFields-VectorSpaces-FiniteGeometries-Graphs/image-20200803190531807.png\" alt=\"image-20200803190531807\"></p>\n<p><img src=\"2020-06-22-finiteFields-VectorSpaces-FiniteGeometries-Graphs/image-20200803190547257.png\" alt=\"image-20200803190547257\"></p>\n<p>陪集的一些性质：</p>\n<ol>\n<li>No two elements of a coset of H are identical. </li>\n<li>No two elements from two different cosets of H are identical. </li>\n<li>Every element of G appears in one and only one coset of H.</li>\n<li>All distinct cosets of H are disjoint.</li>\n<li>The union of all the distinct cosets of H forms the group G.</li>\n</ol>\n<p>拉格朗日定理：</p>\n<p><img src=\"2020-06-22-finiteFields-VectorSpaces-FiniteGeometries-Graphs/image-20200803191142440.png\" alt=\"image-20200803191142440\"></p>\n<h2 id=\"2-3-域\"><a href=\"#2-3-域\" class=\"headerlink\" title=\"2.3 域\"></a>2.3 域</h2><p>有限域在编码理论中非常重要。</p>\n<h3 id=\"2-3-1-定义和基本概念\"><a href=\"#2-3-1-定义和基本概念\" class=\"headerlink\" title=\"2.3.1 定义和基本概念\"></a>2.3.1 定义和基本概念</h3><p><img src=\"2020-06-22-finiteFields-VectorSpaces-FiniteGeometries-Graphs/image-20200803193203931.png\" alt=\"image-20200803193203931\"></p>\n<p>从定义在可以看到，域可以分为两个群，每个群各有一个单位元素，因此域的元素个数至少为2，且可以证明：存在只含有两个元素的域。</p>\n<p>A field is simply an algebraic system in which we can perform addition, sub- traction, multiplication, and division without leaving the field.</p>\n<p><img src=\"2020-06-22-finiteFields-VectorSpaces-FiniteGeometries-Graphs/image-20200803193728641.png\" alt=\"image-20200803193728641\"></p>\n<p>从下面这个定义也可以引入到有限域：</p>\n<p><img src=\"2020-06-22-finiteFields-VectorSpaces-FiniteGeometries-Graphs/image-20200803194026394.png\" alt=\"image-20200803194026394\"></p>\n<p>一条证明，解释了师姐讲文章时的疑问：</p>\n<p><img src=\"2020-06-22-finiteFields-VectorSpaces-FiniteGeometries-Graphs/image-20200803194826387.png\" alt=\"image-20200803194826387\"></p>\n<h3 id=\"2-3-2-Finite-Fields\"><a href=\"#2-3-2-Finite-Fields\" class=\"headerlink\" title=\"2.3.2 Finite Fields\"></a>2.3.2 Finite Fields</h3><p>有限域又叫伽罗华域，在差错控制编码中非常重要。记作 GF(p)，p 为素数。</p>\n<p><img src=\"2020-06-22-finiteFields-VectorSpaces-FiniteGeometries-Graphs/image-20200804083806871.png\" alt=\"image-20200804083806871\"></p>\n<p><img src=\"2020-06-22-finiteFields-VectorSpaces-FiniteGeometries-Graphs/image-20200804083859309.png\" alt=\"image-20200804083859309\"></p>\n<p><img src=\"2020-06-22-finiteFields-VectorSpaces-FiniteGeometries-Graphs/image-20200804083922415.png\" alt=\"image-20200804083922415\"></p>\n<h2 id=\"2-4-Vector-Space\"><a href=\"#2-4-Vector-Space\" class=\"headerlink\" title=\"2.4 Vector Space\"></a>2.4 Vector Space</h2><h3 id=\"2-4-1-Basic-Definitions-and-Properties\"><a href=\"#2-4-1-Basic-Definitions-and-Properties\" class=\"headerlink\" title=\"2.4.1 Basic Definitions and Properties\"></a>2.4.1 Basic Definitions and Properties</h3><p><img src=\"2020-06-22-finiteFields-VectorSpaces-FiniteGeometries-Graphs/image-20200804090317809.png\" alt=\"image-20200804090317809\"></p>\n<h2 id=\"2-5-Polynomials-over-Finite-Fields\"><a href=\"#2-5-Polynomials-over-Finite-Fields\" class=\"headerlink\" title=\"2.5 Polynomials over Finite Fields\"></a>2.5 Polynomials over Finite Fields</h2><h2 id=\"2-6-Construction-and-Properties-of-Galois-Fields\"><a href=\"#2-6-Construction-and-Properties-of-Galois-Fields\" class=\"headerlink\" title=\"2.6 Construction and Properties of Galois Fields\"></a>2.6 Construction and Properties of Galois Fields</h2><p>构造方法：通过 GF(p) 的 m 阶 primitive polynomials 得到 root a，那么，{0, 1, a, a^2, …, a^(p^m-2)} 构成了 GF(p^m)。</p>\n<h3 id=\"2-6-2-Some-Fundamental-Properties-of-Finite-Fields\"><a href=\"#2-6-2-Some-Fundamental-Properties-of-Finite-Fields\" class=\"headerlink\" title=\"2.6.2 Some Fundamental Properties of Finite Fields\"></a>2.6.2 Some Fundamental Properties of Finite Fields</h3><p><img src=\"2020-06-22-finiteFields-VectorSpaces-FiniteGeometries-Graphs/image-20200805085904765.png\" alt=\"image-20200805085904765\"></p>\n<p><img src=\"2020-06-22-finiteFields-VectorSpaces-FiniteGeometries-Graphs/image-20200805085939344.png\" alt=\"image-20200805085939344\"></p>\n<p><img src=\"2020-06-22-finiteFields-VectorSpaces-FiniteGeometries-Graphs/image-20200805090049807.png\" alt=\"image-20200805090049807\"></p>\n<p><img src=\"2020-06-22-finiteFields-VectorSpaces-FiniteGeometries-Graphs/image-20200805090202552.png\" alt=\"image-20200805090202552\"></p>\n<p><img src=\"2020-06-22-finiteFields-VectorSpaces-FiniteGeometries-Graphs/image-20200805090223152.png\" alt=\"image-20200805090223152\"></p>\n<p><img src=\"2020-06-22-finiteFields-VectorSpaces-FiniteGeometries-Graphs/image-20200805090332982.png\" alt=\"image-20200805090332982\"></p>\n<p><img src=\"2020-06-22-finiteFields-VectorSpaces-FiniteGeometries-Graphs/image-20200805090359630.png\" alt=\"image-20200805090359630\"></p>\n<p><img src=\"2020-06-22-finiteFields-VectorSpaces-FiniteGeometries-Graphs/image-20200805090428880.png\" alt=\"image-20200805090428880\"></p>\n<p><img src=\"2020-06-22-finiteFields-VectorSpaces-FiniteGeometries-Graphs/image-20200805090506367.png\" alt=\"image-20200805090506367\"></p>\n<p><img src=\"2020-06-22-finiteFields-VectorSpaces-FiniteGeometries-Graphs/image-20200805090522736.png\" alt=\"image-20200805090522736\"></p>\n<p><img src=\"2020-06-22-finiteFields-VectorSpaces-FiniteGeometries-Graphs/image-20200805090540369.png\" alt=\"image-20200805090540369\"></p>\n<p><img src=\"2020-06-22-finiteFields-VectorSpaces-FiniteGeometries-Graphs/image-20200805090616153.png\" alt=\"image-20200805090616153\"></p>\n<h2 id=\"2-7-Finite-Geometries\"><a href=\"#2-7-Finite-Geometries\" class=\"headerlink\" title=\"2.7 Finite Geometries\"></a>2.7 Finite Geometries</h2>","tags":[{"name":"Channel Codes","slug":"Channel-Codes","permalink":"https://jonathan1214.github.io/tags/Channel-Codes/"},{"name":"文献笔记","slug":"文献笔记","permalink":"https://jonathan1214.github.io/tags/文献笔记/"},{"name":"抽象代数","slug":"抽象代数","permalink":"https://jonathan1214.github.io/tags/抽象代数/"}]},{"title":"计算机网络课程报告","date":"2020-06-07T14:25:10.000Z","path":"2020/06/curriculum-report-of-computer-network/","text":"现在初步打算写无线局域网中MAC的接入技术，在知网简单搜索下，发现研究这个的还真不少，如无线局域网中高效MAC层接入机制研究，低时延高可靠无线局域网MAC增强技术研究和工业无线局域网MAC协议确定性机制研究。看起来写完这篇课程报告不是特别烦，基本上我觉得可以照着一篇硕士论文快速完成这篇课程报告，毕竟时间紧急，拿到该拿的分即可。写完后，我会在这里同步完报告的全部内容。 1. 无线局域网的发展历史随着互联网业务的迅速发展，人们对各种在线服务的实时性需求日益强烈。相比蜂窝网，无线局域网网络有着高带宽，灵活以及廉价等诸多优势，目前，无线局域网（Wireless Local Area Network, WLAN）己经在家庭、校园、企业和城市公共场所等多种场景部署。 可以看到无线局域网已经广泛应用于我们的日常生活，这是由于其传输速率高、带宽配置灵活、使用非授权频段以及方便灵活部署等优势。无线局域网的代表协议是IEEE 802.11系列标准，第一个IEEE 802.11 标准于1997年发表，至今已有 23 年历史了[1]。二十年来，802.11取得了很大的发展，很多新技术进入了标准，推动 802.11 协议日趋完善。 1997年，IEEE推出了第一个无线局域网标准——IEEE 802.11，其中定义了介质访问控制（MAC）层和物理层。物理层定义了工作在2.4GHz的ISM频段上的两种扩频作调制方式和一种红外线传输的方式，总数据传输速率设计为2Mbit/s，MAC层采用的CSMA/CA技术。 EEE 802.11a协议[2]在1999年被标准化，它采用的是正交频分复用技术（Orthogonal Frequency Division Multiplexing, OFDM），工作频率为5GHz，使用52个正交频分多路复用子载波，最大原始数据传输率为54Mb/s，达到了现实网络中等吞吐量（20Mb/s）的要求。 同年IEEE 802.11b被正式批准，该标准规定无线局域网工作频段在2.4GHz，由于工作频段更低，与IEEE 802.11a相比，它的工作范围更大，但速率更低，数据传输速率达到11Mbps。该标准是对IEEE 802.11的一个补充，采用点对点模式和基本模式两种运作模式，其数据传输速率可以根据实际情况在11Mbps、5.5Mbps、2Mbps、1Mbps的不同速率间自动切换，802.11b和工作在5GHz频率上的802.11a标准不兼容。由于价格低廉，802.11b产品已经被广泛地投入市场，并在许多实际工作场所运行。 2003年7月IEEE 802.11工作组批准了IEEE 802.11g草案，在2.4GHz频段使用正交频分复用技术，使数据传输速率提高到20Mbit/s以上；可与IEEE 802.11b的Wi-Fi系统互联互通，可共存于同一AP的网络里，从而保障了后向兼容性。 IEEE 802.11 n在2009年标准化，采用了OFDM和4x4多入多出（Multiple-Input Multiple-Output, MIMO）技术[3]，物理层速率可以在两路20MHz信道(共40MHz )中达到600Mbps。 2013推出的IEEE 802.11ac协议利用OFDM和8x8 MIMO技术[4]，在8个20MHz信道(共160MHz)中，物理层速率可达到6.9Gbps，在802.11n基础上有了很大的提升。最新的 802.11ax 标准已经支持160MHz的带宽，8条流空间复用，基于 OFDMA的多址接入技术提高了信道利用率，满足密集部署场景的应用需求[5]。其他更多标准的简略信息如图1-1所示。 我们可以看到，无线局域网标准定义了协议的工作频段、调制编码方式及最高速度的支持。可以看到，无线局域网的工作频段是2.4GHz和5GHz，前者的具体范围是2.4000～2.4835GHz，后者是5.15～5.825GHz，通常设计工作在2.4GHz频段的协议支持的数据传输速率低一些，但覆盖范围大，工作在5GHz频段的协议支持的数据传输塑料布高一些，但覆盖范围小。从调制技术来看，无线局域网的物理层从CCK向OFDM和MIMO-OFDM发展，支持的传输速率越来越大，2Mbps，54Mbps，600Mbps，1Gbps，9.6Gbps，传输速率是越来越大，当然其中消耗了更多的带宽资源。 2. 无线局域网的MAC层2.1 无线局域网的两种网络结构IEEE 802.11定义了无线局域网的两种网络结构，分别是无中心网络（Ad hoc模式）和有中心网络。在Ad hoc模式下，网络中没有中心站点，各站点式平等的，这是一种对等式网络（Peer-to-Peer，P2P），有中心网络的网络结构中有一个中心站点，又称接入点（Access Point，AP），也叫做AP模式。两种结构的示意图如图2-1所示。 目前，AP模式是比较常用的，我们在家中使用的WiFi就是这种模式，而Ad hoc一般在一些专用场合使用，平时比较少见。 2.2 无线局域网的MAC层结构在无线局域网中，无线信道由多个站点共享，它们同处于一个冲突域下，在这种情况下，最需要解决的一个问题就是如何避免站点数据的碰撞，否则站点的数据会发生相互干扰，导致接受站点无法正确接收到信息。这个时候我们就需要一个控制各站点接入无线信道的协议来统一管理，这就是我们的MAC层协议。 MAC层即介质访问控制层，在传输帧时，一个基站首先要获取共享信道的访问，无线局域网的标准定义了两种介质访问控制方式：分布式协调功能（DCF）和集中式协调功能（PCF）。其中DCF功能是必须支持的，而PCF则不一定。MAC的结构如图2-2所示。 DCF机制是IEEE 802.11协议采用的基于竞争的MAC机制，其采用载波监听多址接入/冲突避免（Carrier Sense Multiple Access mechanism with Collision Avoidance，CSMA/CA）和二进制指数退避（Binary Exponential Back-off，BEB）两种基本机制可以为多个站点提供信道接入，各个站点在这种机制下对信道资源进行争用，有可能会发生数据碰撞。 PCF是MAC的可选用功能，在PCF下，各站点不需要争用信道，信道资源由AP统一分配，这种工作模式下，不会发生数据碰撞。但是一般情况下这种方式使用较少，只有在对传输时间要求高的视频、音频会话类应用时，才会启用PCF方式。 2.3 无线局域网的MAC层接入机制当前，IEEE 802.11MAC协议中广泛采用的接入方法是CSMA/CA。CA的意思是冲突避免，无线局域网发送结点监测到无线信道“空闲”时不“立即”发送帧，而是所有准备发送数据帧的主机都执行退避算法，通过“冲突避免”（CA）来减小冲突发生概率，而且无线局域网发送结点需要等待接收结点发送回确认帧，来判断此次发送是否成功。 2.3.1 常用帧间间隔网络中的无线网卡在检测到信道空闲时到真正发送一帧时，或发送一帧之后到发送下一帧时，都需要间隔一个帧间隔（Inter Frame Space，IFS）时间。IEEE 802.11协议规定了4种帧间间隔： （1）短帧间间隔（Short IFS，SIFS）固定值，是最小的帧间间隔，只有在等待一个SIFS后才可能发送ACK帧、CTS帧。 （2）分布协调功能帧间间隔（Distributed coordination IFS，DIFS）DIFS比PIFS长一个时一隙时间。它只能工作在DCF模式，主要用于在每次通信中的第一帧之前。 （3）点协调功能帧间间隔（Point coordination IFS，PIFS)PIFS比SIFS长一个时隙时间(slot time )，又称集中协调功能帧间间隔。它只能工作在PCF模式，用于在开始使用PCF功能时，使站点能够尽快获得发送权。 （4）扩展帧间间隔（Extended coordination IFS，EIFS）EIFS是最长的IFS，主要用于在前一帧出错的情况下，发送站点必须延迟EIFS，而不是正常情况下的DIFS时间后，再发送下一帧 2.3.2 CSMA/CA原理CSMA/CA的设计目标是为了尽可能减少冲突发送概率，简单概括其基本原理就是信道监听，推迟发送和冲突避免。信道监听通过物理层对无线信道进行载波监听，ACK确认，推迟发送采用虚拟载波监听（Virtual Carrier Sense，VCS）与网络分配向量（Network Allocation Vector，NAV）机制，冲突退避采用DIFS和二进制指数退避算法。 CSMA/CA有两种工作模式，基本模式和可选的RTS/CTS预约模式，后者可以解决隐藏主机带来的冲突问题。这里只介绍基本模式，它的信道接入过程如图2-3所示。 NAV起到一个计时器的作用，其数值由发送主机在帧头的“持续时间”字段广播给其他主机，对于其他主机，只有当检测到NAV=0时才认为信道是空闲的。如果检测到信道空闲，那么发送主机需要等待一个DIFS，然后随机退避n个slot time才能发送数据帧，这个时候的数据帧就携带了此次发送站点的NAV信息，提醒其他站点信道繁忙，让其他站点保持静默以免发送碰撞。退避时间由二进制指数退避算法决定，退避时间为$$W = (2^{2+i}-1)\\cdot W_s$$第i次退避时，从 $2^{i+1}-1$ 个slot time中随机选取一个作为退避时间，如果在退避时，检测到NAV不为0，这表示其他站点开始发送帧，此次竞争失败，则冻结当前退避时间，直到NAV=0并等待DIFS后继续从刚才冻结的退避时间开始倒数。从上述的描述我们可以看到，帧立即发送的条件为：NAV=0并且经过DIFS并且退避时间=0。 接收主机（AP模式下即为AP）收到数据帧后，等待SIFS，才能向发送主机发送ACK确认帧，发送主机收到后，一次帧发送才算完成。 从前述对CSMA/CA的分析我们不难发现，这种机制在AP连接的站点数目较少时性能才比较好，因为此时站点退避的时间相同的概率比较小，发生冲突的概率小，但如果AP接入的站点很多，那么碰撞的概率增大，网络的性能变差。针对这种情况，对其进行改进的研究也很多，我们在后面进行介绍。 3. 无线局域网的MAC层接入技术的改进前面谈到，传统的无线局域网MAC接入技术基于CAMA/CA和BEB机制，在这种机制下，如果网络中接入的站点比较多，数据发生碰撞的概率会增大，极端情况下，如果接入的站点特别多，没有站带你能够向AP发送数据，也就是说在密集组网的情况下，传统的MAC层接入技术有许多需要改进的地方。 3.1 初始竞争窗口值的改进在CSMA/CA和BEB协议中，一些参数如初始竞争窗口值对网络的性能有着显著的影响，系统吞吐量对初始竞争窗口值比较敏感，一个合适的竞争窗口选择方案可以极大地提高系统的吞吐量[6]，这不难理解，当网络负载小的时候，窗口也就可以小一些，让用户得以快速接入。 基于此，有很多竞争窗口值优化方案被提出，竞争窗口值其实是与当前的活跃用户关联在一起的，因此活跃用户检测也是有一个需要考虑的问题，可以根据测量得到的碰撞概率对当前活跃用户进行估计[7]，也可以根据观察到的空闲时隙数来对活跃用户数进行估计[8]，估计完用户数后，再对竞争窗口值进行动态调整。 还有利用贪婪策略的CSMA/CA竞争窗口启发式优化方案，使用贪婪搜索算法得到当前系统初始竞争窗口值的，并根据启发式规则使之处于动态最优状态[9]。 3.2 接入方式的改变从本质上来看CSMA/CA机制是一种随机接入的竞争机制，而且是单用户单信道的，这种机制天然就不适合密集用户的场景。因此，有的学者研究了多信道下的MAC协议，以获得更高的吞吐量和更低的时延[10]。 最新的WiFi标准IEEE 802.11ax引入OFDMA技术，不再采用原来的单用户单信道，而是将整个信道划分为多个子信道来允许多个用户同时接入。新的MAC层技术也必须适应这种接入方式，原有的CSMA/CA其实已经不太适用了，因此，人们又提出了多站点随机接入型和接入点集中调度接入型。 4. 总结本文简单介绍了无线局域网的发展历史，介绍了无线局域网的MAC层接入技术，我们发现，随着网络的发展和接入用户数量的快速增长，带宽和接入速率已经不是限制网络的因素，如何让众多用户有效地接入站点成了一个更加值得重视的问题。其实整个问题不止在无线局域网中存在，在蜂窝网络等用户接入网都会存在这样的问题，这种场景下，用户是随机接入的，如何有效地区分用户是一个很关键的问题。 未来，随着接入站点数目的不断增加，有效地接入控制方法是需要的，值得研究。在一些特定场景下，如工业局域网中，不仅要保证站点的接入，还需要保证高可靠性，针对确定性问题做到指标检测过程和负载调整过程，就可实现良好的负载均衡[11]。针对这些特定场景下的优化的研究也有很多。 参考文献[1] Perahia E .IEEE 802.11n Development: History, Process, and Technology[J]. IEEE Communications Magazine, 2008, 46(7):48-55.[2] IEEE. IEEE Standard for Telecommunications and Information Exchange Between Systems一LAN/MAN Specific Requirements一Part 11:Wireless Medium Access Control (MAC) and physical layer (PHY) specifications: High Speed Physical Layer in the 5 GHz band[C]// IEEE Std 80211a. IEEE, 2002.[3] IEEE. IEEE Standard for Information technology–Local and metropolitan area networks– Specific requirements– Part 11:Wireless LAN Medium Access Control (MAC) and Physical Layer (PHY) Specifications Amendment 2: Fast Basic Service Set (BSS) Transition[J]. IEEE Xplore,2008:1-126.[4] IEEE Standard for Information technology– Telecommunications and information exchange between systems Local and metropolitan area networks—Specific requirements–Part 11:Wireless LAN Medium Access Control (MAC) and Physical Layer (PH Y) Specifications–A[C]// IEEE Std 802.11 ac-2013 (Amendment to IEEE Std 802.11-2012, as amended by IEEE Std 802.11 ae-2012, IEEE Std 802.11 aa-2012, and IEEE Std 802.11 ad-2012). 2013.[5] Zhu H , Li M , Chlamtac I , et al. A survey of quality of service in IEEE 802.11 networks.[J]. Wireless Communications IEEE, 2004, 11(4):6-14.[6] Parker B M, Schormans J A, Gilmour S G. Increasing throughput in IEEE 802.11 by optimal selection of backoff parameters[J]. Networks Iet, 2014, 4(1):21-29.[7] Morino Y, Hiraguri T, Yoshino H, et al. A Novel Contention Window Control Scheme Based on a Markov Chain Model in Dense WLAN Environment[C]// International Conference on Artificial Intelligence. 2016.[8] Yu Q, Zhuang Y, Ma L. Dynamic contention window adjustment scheme for improving throughput and fairness in IEEE 802.11 wireless LANs[C]// Global Communications Conference. IEEE, 2013.[9] 林尚娟. 无线局域网中高效MAC层接入机制研究[D].北京邮电大学,2019.[10] Hadded M , Muhlethaler P , Laouiti A , et al. TDMA-based MAC Protocols for Vehicular Ad Hoc Networks: A Survey, Qualitative Analysis and Open Research Issues[J]. IEEE Communications Surveys &amp; Tutorials, 2015, 17(4):1-1.[11] 程煜钧. 工业无线局域网MAC协议确定性机制研究[D].北京交通大学,2019.","content":"<p>现在初步打算写无线局域网中MAC的接入技术，在知网简单搜索下，发现研究这个的还真不少，如<a href=\"https://kns.cnki.net/KCMS/detail/detail.aspx?dbcode=CMFD&amp;dbname=CMFD201902&amp;filename=1019113029.nh&amp;uid=WEEvREcwSlJHSldRa1FhdXNzY2Z2S3F4L2xoUW9La0NoVFhnOE9GdXhpZz0=$9A4hF_YAuvQ5obgVAqNKPCYcEjKensW4ggI8Fm4gTkoUKaID8j8gFw!!&amp;v=MjU0ODllWm9GQ3ZsVUwvSlZGMjZGN0s1SGRIT3BwRWJQSVI4ZVgxTHV4WVM3RGgxVDNxVHJXTTFGckNVUjdxZlk=\" target=\"_blank\" rel=\"noopener\">无线局域网中高效MAC层接入机制研究</a>，<a href=\"https://kns.cnki.net/KCMS/detail/detail.aspx?dbcode=CMFD&amp;dbname=CMFD202001&amp;filename=1020004190.nh&amp;uid=WEEvREcwSlJHSldRa1FhdXNzY2Z2S3F4L2xoUW9La0NoVFhnOE9GdXhpZz0=$9A4hF_YAuvQ5obgVAqNKPCYcEjKensW4ggI8Fm4gTkoUKaID8j8gFw!!&amp;v=MjYzMzBab0ZDdmxWcnpCVkYyNUhyTzRHdERGcjVFYlBJUjhlWDFMdXhZUzdEaDFUM3FUcldNMUZyQ1VSN3FmWWU=\" target=\"_blank\" rel=\"noopener\">低时延高可靠无线局域网MAC增强技术研究</a>和<a href=\"https://kns.cnki.net/KCMS/detail/detail.aspx?dbcode=CDFD&amp;dbname=CDFDLAST2020&amp;filename=1019253781.nh&amp;uid=WEEvREcwSlJHSldRa1FhdXNzY2Z2S3F4L2xoUW9La0NoVFhnOE9GdXhpZz0=$9A4hF_YAuvQ5obgVAqNKPCYcEjKensW4ggI8Fm4gTkoUKaID8j8gFw!!&amp;v=MjA5NDlkYkVycEViUElSOGVYMUx1eFlTN0RoMVQzcVRyV00xRnJDVVI3cWZZZVpvRkN2a1dydlBWRjI2RjdHOUg=\" target=\"_blank\" rel=\"noopener\">工业无线局域网MAC协议确定性机制研究</a>。看起来写完这篇课程报告不是特别烦，基本上我觉得可以照着一篇硕士论文快速完成这篇课程报告，毕竟时间紧急，拿到该拿的分即可。写完后，我会在这里同步完报告的全部内容。<br><a id=\"more\"></a></p>\n<h2 id=\"1-无线局域网的发展历史\"><a href=\"#1-无线局域网的发展历史\" class=\"headerlink\" title=\"1. 无线局域网的发展历史\"></a>1. 无线局域网的发展历史</h2><p>随着互联网业务的迅速发展，人们对各种在线服务的实时性需求日益强烈。相比蜂窝网，无线局域网网络有着高带宽，灵活以及廉价等诸多优势，目前，无线局域网（Wireless Local Area Network, WLAN）己经在家庭、校园、企业和城市公共场所等多种场景部署。</p>\n<p>可以看到无线局域网已经广泛应用于我们的日常生活，这是由于其传输速率高、带宽配置灵活、使用非授权频段以及方便灵活部署等优势。无线局域网的代表协议是IEEE 802.11系列标准，第一个IEEE 802.11 标准于1997年发表，至今已有 23 年历史了[1]。二十年来，802.11取得了很大的发展，很多新技术进入了标准，推动 802.11 协议日趋完善。</p>\n<p>1997年，IEEE推出了第一个无线局域网标准——IEEE 802.11，其中定义了介质访问控制（MAC）层和物理层。物理层定义了工作在2.4GHz的ISM频段上的两种扩频作调制方式和一种红外线传输的方式，总数据传输速率设计为2Mbit/s，MAC层采用的CSMA/CA技术。</p>\n<p>EEE 802.11a协议[2]在1999年被标准化，它采用的是正交频分复用技术（Orthogonal Frequency Division Multiplexing, OFDM），工作频率为5GHz，使用52个正交频分多路复用子载波，最大原始数据传输率为54Mb/s，达到了现实网络中等吞吐量（20Mb/s）的要求。</p>\n<p>同年IEEE 802.11b被正式批准，该标准规定无线局域网工作频段在2.4GHz，由于工作频段更低，与IEEE 802.11a相比，它的工作范围更大，但速率更低，数据传输速率达到11Mbps。该标准是对IEEE 802.11的一个补充，采用点对点模式和基本模式两种运作模式，其数据传输速率可以根据实际情况在11Mbps、5.5Mbps、2Mbps、1Mbps的不同速率间自动切换，802.11b和工作在5GHz频率上的802.11a标准不兼容。由于价格低廉，802.11b产品已经被广泛地投入市场，并在许多实际工作场所运行。</p>\n<p>2003年7月IEEE 802.11工作组批准了IEEE 802.11g草案，在2.4GHz频段使用正交频分复用技术，使数据传输速率提高到20Mbit/s以上；可与IEEE 802.11b的Wi-Fi系统互联互通，可共存于同一AP的网络里，从而保障了后向兼容性。</p>\n<p>IEEE 802.11 n在2009年标准化，采用了OFDM和4x4多入多出（Multiple-Input Multiple-Output, MIMO）技术[3]，物理层速率可以在两路20MHz信道(共40MHz )中达到600Mbps。</p>\n<p>2013推出的IEEE 802.11ac协议利用OFDM和8x8 MIMO技术[4]，在8个20MHz信道(共160MHz)中，物理层速率可达到6.9Gbps，在802.11n基础上有了很大的提升。最新的 802.11ax 标准已经支持160MHz的带宽，8条流空间复用，基于 OFDMA的多址接入技术提高了信道利用率，满足密集部署场景的应用需求[5]。其他更多标准的简略信息如图1-1所示。    </p>\n<img src=\"/2020/06/curriculum-report-of-computer-network/mainIEEE80211Standard.png\" title=\"图1-1 主要的IEEE 802.11标准\">\n<p>我们可以看到，无线局域网标准定义了协议的工作频段、调制编码方式及最高速度的支持。可以看到，无线局域网的工作频段是2.4GHz和5GHz，前者的具体范围是2.4000～2.4835GHz，后者是5.15～5.825GHz，通常设计工作在2.4GHz频段的协议支持的数据传输速率低一些，但覆盖范围大，工作在5GHz频段的协议支持的数据传输塑料布高一些，但覆盖范围小。从调制技术来看，无线局域网的物理层从CCK向OFDM和MIMO-OFDM发展，支持的传输速率越来越大，2Mbps，54Mbps，600Mbps，1Gbps，9.6Gbps，传输速率是越来越大，当然其中消耗了更多的带宽资源。</p>\n<h2 id=\"2-无线局域网的MAC层\"><a href=\"#2-无线局域网的MAC层\" class=\"headerlink\" title=\"2. 无线局域网的MAC层\"></a>2. 无线局域网的MAC层</h2><h3 id=\"2-1-无线局域网的两种网络结构\"><a href=\"#2-1-无线局域网的两种网络结构\" class=\"headerlink\" title=\"2.1 无线局域网的两种网络结构\"></a>2.1 无线局域网的两种网络结构</h3><p>IEEE 802.11定义了无线局域网的两种网络结构，分别是无中心网络（Ad hoc模式）和有中心网络。在Ad hoc模式下，网络中没有中心站点，各站点式平等的，这是一种对等式网络（Peer-to-Peer，P2P），有中心网络的网络结构中有一个中心站点，又称接入点（Access Point，AP），也叫做AP模式。两种结构的示意图如图2-1所示。</p>\n<p>目前，AP模式是比较常用的，我们在家中使用的WiFi就是这种模式，而Ad hoc一般在一些专用场合使用，平时比较少见。</p>\n<img src=\"/2020/06/curriculum-report-of-computer-network/networdPattern.png\" title=\"图2-1 网络模式示意图\">\n<h3 id=\"2-2-无线局域网的MAC层结构\"><a href=\"#2-2-无线局域网的MAC层结构\" class=\"headerlink\" title=\"2.2 无线局域网的MAC层结构\"></a>2.2 无线局域网的MAC层结构</h3><p>在无线局域网中，无线信道由多个站点共享，它们同处于一个冲突域下，在这种情况下，最需要解决的一个问题就是如何避免站点数据的碰撞，否则站点的数据会发生相互干扰，导致接受站点无法正确接收到信息。这个时候我们就需要一个控制各站点接入无线信道的协议来统一管理，这就是我们的MAC层协议。</p>\n<p>MAC层即介质访问控制层，在传输帧时，一个基站首先要获取共享信道的访问，无线局域网的标准定义了两种介质访问控制方式：分布式协调功能（DCF）和集中式协调功能（PCF）。其中DCF功能是必须支持的，而PCF则不一定。MAC的结构如图2-2所示。</p>\n<img src=\"/2020/06/curriculum-report-of-computer-network/WLANMAC.png\" title=\"图2-2 无线局域网 MAC示意图\">\n<p>DCF机制是IEEE 802.11协议采用的基于竞争的MAC机制，其采用载波监听多址接入/冲突避免（Carrier Sense Multiple Access mechanism with Collision Avoidance，CSMA/CA）和二进制指数退避（Binary Exponential Back-off，BEB）两种基本机制可以为多个站点提供信道接入，各个站点在这种机制下对信道资源进行争用，有可能会发生数据碰撞。</p>\n<p>PCF是MAC的可选用功能，在PCF下，各站点不需要争用信道，信道资源由AP统一分配，这种工作模式下，不会发生数据碰撞。但是一般情况下这种方式使用较少，只有在对传输时间要求高的视频、音频会话类应用时，才会启用PCF方式。</p>\n<h3 id=\"2-3-无线局域网的MAC层接入机制\"><a href=\"#2-3-无线局域网的MAC层接入机制\" class=\"headerlink\" title=\"2.3 无线局域网的MAC层接入机制\"></a>2.3 无线局域网的MAC层接入机制</h3><p>当前，IEEE 802.11MAC协议中广泛采用的接入方法是CSMA/CA。CA的意思是冲突避免，无线局域网发送结点监测到无线信道“空闲”时不“立即”发送帧，而是所有准备发送数据帧的主机都执行退避算法，通过“冲突避免”（CA）来减小冲突发生概率，而且无线局域网发送结点需要等待接收结点发送回确认帧，来判断此次发送是否成功。</p>\n<h4 id=\"2-3-1-常用帧间间隔\"><a href=\"#2-3-1-常用帧间间隔\" class=\"headerlink\" title=\"2.3.1 常用帧间间隔\"></a>2.3.1 常用帧间间隔</h4><p>网络中的无线网卡在检测到信道空闲时到真正发送一帧时，或发送一帧之后到发送下一帧时，都需要间隔一个帧间隔（Inter Frame Space，IFS）时间。IEEE 802.11协议规定了4种帧间间隔：</p>\n<p>（1）短帧间间隔（Short IFS，SIFS）<br>固定值，是最小的帧间间隔，只有在等待一个SIFS后才可能发送ACK帧、CTS帧。</p>\n<p>（2）分布协调功能帧间间隔（Distributed coordination IFS，DIFS）<br>DIFS比PIFS长一个时一隙时间。它只能工作在DCF模式，主要用于在每次通信中的第一帧之前。</p>\n<p>（3）点协调功能帧间间隔（Point coordination IFS，PIFS)<br>PIFS比SIFS长一个时隙时间(slot time )，又称集中协调功能帧间间隔。它只能工作在PCF模式，用于在开始使用PCF功能时，使站点能够尽快获得发送权。</p>\n<p>（4）扩展帧间间隔（Extended coordination IFS，EIFS）<br>EIFS是最长的IFS，主要用于在前一帧出错的情况下，发送站点必须延迟EIFS，而不是正常情况下的DIFS时间后，再发送下一帧</p>\n<h4 id=\"2-3-2-CSMA-CA原理\"><a href=\"#2-3-2-CSMA-CA原理\" class=\"headerlink\" title=\"2.3.2 CSMA/CA原理\"></a>2.3.2 CSMA/CA原理</h4><p>CSMA/CA的设计目标是为了尽可能减少冲突发送概率，简单概括其基本原理就是信道监听，推迟发送和冲突避免。信道监听通过物理层对无线信道进行载波监听，ACK确认，推迟发送采用虚拟载波监听（Virtual Carrier Sense，VCS）与网络分配向量（Network Allocation Vector，NAV）机制，冲突退避采用DIFS和二进制指数退避算法。</p>\n<p>CSMA/CA有两种工作模式，基本模式和可选的RTS/CTS预约模式，后者可以解决隐藏主机带来的冲突问题。这里只介绍基本模式，它的信道接入过程如图2-3所示。</p>\n<img src=\"/2020/06/curriculum-report-of-computer-network/channelConnectionProcess.png\" title=\"图2-3 基本模式下的信道接入过程\">\n<p>NAV起到一个计时器的作用，其数值由发送主机在帧头的“持续时间”字段广播给其他主机，对于其他主机，只有当检测到NAV=0时才认为信道是空闲的。如果检测到信道空闲，那么发送主机需要等待一个DIFS，然后随机退避n个slot time才能发送数据帧，这个时候的数据帧就携带了此次发送站点的NAV信息，提醒其他站点信道繁忙，让其他站点保持静默以免发送碰撞。退避时间由二进制指数退避算法决定，退避时间为<br>$$<br>W = (2^{2+i}-1)\\cdot W_s<br>$$<br>第i次退避时，从 $2^{i+1}-1$ 个slot time中随机选取一个作为退避时间，如果在退避时，检测到NAV不为0，这表示其他站点开始发送帧，此次竞争失败，则冻结当前退避时间，直到NAV=0并等待DIFS后继续从刚才冻结的退避时间开始倒数。从上述的描述我们可以看到，帧立即发送的条件为：NAV=0并且经过DIFS并且退避时间=0。</p>\n<p>接收主机（AP模式下即为AP）收到数据帧后，等待SIFS，才能向发送主机发送ACK确认帧，发送主机收到后，一次帧发送才算完成。</p>\n<p>从前述对CSMA/CA的分析我们不难发现，这种机制在AP连接的站点数目较少时性能才比较好，因为此时站点退避的时间相同的概率比较小，发生冲突的概率小，但如果AP接入的站点很多，那么碰撞的概率增大，网络的性能变差。针对这种情况，对其进行改进的研究也很多，我们在后面进行介绍。</p>\n<h2 id=\"3-无线局域网的MAC层接入技术的改进\"><a href=\"#3-无线局域网的MAC层接入技术的改进\" class=\"headerlink\" title=\"3. 无线局域网的MAC层接入技术的改进\"></a>3. 无线局域网的MAC层接入技术的改进</h2><p>前面谈到，传统的无线局域网MAC接入技术基于CAMA/CA和BEB机制，在这种机制下，如果网络中接入的站点比较多，数据发生碰撞的概率会增大，极端情况下，如果接入的站点特别多，没有站带你能够向AP发送数据，也就是说在密集组网的情况下，传统的MAC层接入技术有许多需要改进的地方。</p>\n<h3 id=\"3-1-初始竞争窗口值的改进\"><a href=\"#3-1-初始竞争窗口值的改进\" class=\"headerlink\" title=\"3.1 初始竞争窗口值的改进\"></a>3.1 初始竞争窗口值的改进</h3><p>在CSMA/CA和BEB协议中，一些参数如初始竞争窗口值对网络的性能有着显著的影响，系统吞吐量对初始竞争窗口值比较敏感，一个合适的竞争窗口选择方案可以极大地提高系统的吞吐量[6]，这不难理解，当网络负载小的时候，窗口也就可以小一些，让用户得以快速接入。</p>\n<p>基于此，有很多竞争窗口值优化方案被提出，竞争窗口值其实是与当前的活跃用户关联在一起的，因此活跃用户检测也是有一个需要考虑的问题，可以根据测量得到的碰撞概率对当前活跃用户进行估计[7]，也可以根据观察到的空闲时隙数来对活跃用户数进行估计[8]，估计完用户数后，再对竞争窗口值进行动态调整。</p>\n<p>还有利用贪婪策略的CSMA/CA竞争窗口启发式优化方案，使用贪婪搜索算法得到当前系统初始竞争窗口值的，并根据启发式规则使之处于动态最优状态[9]。</p>\n<h3 id=\"3-2-接入方式的改变\"><a href=\"#3-2-接入方式的改变\" class=\"headerlink\" title=\"3.2 接入方式的改变\"></a>3.2 接入方式的改变</h3><p>从本质上来看CSMA/CA机制是一种随机接入的竞争机制，而且是单用户单信道的，这种机制天然就不适合密集用户的场景。因此，有的学者研究了多信道下的MAC协议，以获得更高的吞吐量和更低的时延[10]。</p>\n<p>最新的WiFi标准IEEE 802.11ax引入OFDMA技术，不再采用原来的单用户单信道，而是将整个信道划分为多个子信道来允许多个用户同时接入。新的MAC层技术也必须适应这种接入方式，原有的CSMA/CA其实已经不太适用了，因此，人们又提出了多站点随机接入型和接入点集中调度接入型。</p>\n<h2 id=\"4-总结\"><a href=\"#4-总结\" class=\"headerlink\" title=\"4. 总结\"></a>4. 总结</h2><p>本文简单介绍了无线局域网的发展历史，介绍了无线局域网的MAC层接入技术，我们发现，随着网络的发展和接入用户数量的快速增长，带宽和接入速率已经不是限制网络的因素，如何让众多用户有效地接入站点成了一个更加值得重视的问题。其实整个问题不止在无线局域网中存在，在蜂窝网络等用户接入网都会存在这样的问题，这种场景下，用户是随机接入的，如何有效地区分用户是一个很关键的问题。</p>\n<p>未来，随着接入站点数目的不断增加，有效地接入控制方法是需要的，值得研究。在一些特定场景下，如工业局域网中，不仅要保证站点的接入，还需要保证高可靠性，针对确定性问题做到指标检测过程和负载调整过程，就可实现良好的负载均衡[11]。针对这些特定场景下的优化的研究也有很多。</p>\n<h2 id=\"参考文献\"><a href=\"#参考文献\" class=\"headerlink\" title=\"参考文献\"></a>参考文献</h2><p>[1]   Perahia E .IEEE 802.11n Development: History, Process, and Technology[J]. IEEE Communications Magazine, 2008, 46(7):48-55.<br>[2]   IEEE. IEEE Standard for Telecommunications and Information Exchange Between Systems一LAN/MAN Specific Requirements一Part 11:Wireless Medium Access Control (MAC) and physical layer (PHY) specifications: High Speed Physical Layer in the 5 GHz band[C]// IEEE Std 80211a. IEEE, 2002.<br>[3]   IEEE. IEEE Standard for Information technology–Local and metropolitan area networks– Specific requirements– Part 11:Wireless LAN Medium Access Control (MAC) and Physical Layer (PHY) Specifications Amendment 2: Fast Basic Service Set (BSS) Transition[J]. IEEE Xplore,2008:1-126.<br>[4]   IEEE Standard for Information technology– Telecommunications and information exchange between systems Local and metropolitan area networks—Specific requirements–Part 11:Wireless LAN Medium Access Control (MAC) and Physical Layer (PH Y) Specifications–A[C]// IEEE Std 802.11 ac-2013 (Amendment to IEEE Std 802.11-2012, as amended by IEEE Std 802.11 ae-2012, IEEE Std 802.11 aa-2012, and IEEE Std 802.11 ad-2012). 2013.<br>[5]   Zhu H , Li M , Chlamtac I , et al. A survey of quality of service in IEEE 802.11 networks.[J]. Wireless Communications IEEE, 2004, 11(4):6-14.<br>[6]   Parker B M, Schormans J A, Gilmour S G. Increasing throughput in IEEE 802.11 by optimal selection of backoff parameters[J]. Networks Iet, 2014, 4(1):21-29.<br>[7]   Morino Y, Hiraguri T, Yoshino H, et al. A Novel Contention Window Control Scheme Based on a Markov Chain Model in Dense WLAN Environment[C]// International Conference on Artificial Intelligence. 2016.<br>[8]   Yu Q, Zhuang Y, Ma L. Dynamic contention window adjustment scheme for improving throughput and fairness in IEEE 802.11 wireless LANs[C]// Global Communications Conference. IEEE, 2013.<br>[9]   林尚娟. 无线局域网中高效MAC层接入机制研究[D].北京邮电大学,2019.<br>[10] Hadded M , Muhlethaler P , Laouiti A , et al. TDMA-based MAC Protocols for Vehicular Ad Hoc Networks: A Survey, Qualitative Analysis and Open Research Issues[J]. IEEE Communications Surveys &amp; Tutorials, 2015, 17(4):1-1.<br>[11] 程煜钧. 工业无线局域网MAC协议确定性机制研究[D].北京交通大学,2019.</p>\n","tags":[{"name":"网络","slug":"网络","permalink":"https://jonathan1214.github.io/tags/网络/"}]},{"title":"A Distance Sensor Demo For Arduino","date":"2020-06-01T09:34:56.000Z","path":"2020/06/distance-sensor-demo-for-arduino/","text":"Distance sensor can be very useful in some conditons, such as obstacles detecting and avoiding. By using arduino, it’s very easy for us to use distance sensor. This demo show us a simple example to use distance sensor. For better display, we will use LCD1602 to show the distance. It’s modified from example in arduino. Supplies Arduino uno R3 HC-SR04 Breadboard LCD1602 Red LED Spotter Two 100 Ohm resistance some DuPont lines Step 1 Design and connect circuitBrowsering internet, it’s easy to find instructions of HC-SR04 and LCD1602. And there are so many libraries for us in arduino. In our circuit, arduino digital pin 2, 3, 4, 5, 11 and 12 are used for LCD1602 while digital pin 7 and 8 are for HC-SR04. LED uses digital pin 13. Finally, following is our circuits. Step2 CodeAs we said before, our program is based on libraries. So it’s simple to write code. Later I will display complete code. Outside the loop, we define a function readUltrasonicDistance used for HC-SR04. Calling this readUltrasonicDistance, we get distance in centimeter. Inside the function setup, we initialize a LCD1604. In the loop, we get distance in centimeter by calling function readUltrasonicDistance. Then we clear LCD screen and print some characters and distance we just got. Finally, we turn on the LED if distance less than 90cm, or turn off the LED if not less than 90cm. Here shows complete code. distanceDemo.cview raw12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849#include &lt;LiquidCrystal.h&gt;// initialize the library with the numbers of the interface pinsLiquidCrystal lcd(12, 11, 5, 4, 3, 2);int cm = 0;long readUltrasonicDistance(int triggerPin, int echoPin){ pinMode(triggerPin, OUTPUT); // Clear the trigger digitalWrite(triggerPin, LOW); delayMicroseconds(2); // Sets the trigger pin to HIGH state for 10 microseconds digitalWrite(triggerPin, HIGH); delayMicroseconds(10); digitalWrite(triggerPin, LOW); pinMode(echoPin, INPUT); // Reads the echo pin, and returns the sound wave travel time in microseconds return pulseIn(echoPin, HIGH);}int LED = 13;void setup(){ Serial.begin(9600); lcd.begin(16, 2); lcd.print(\"DistanceSensor:\"); pinMode(LED,OUTPUT);}void loop(){ // measure the ping time in cm cm = 0.01723 * readUltrasonicDistance(7, 8); // convert to inches by dividing by 2.54 Serial.print(cm); Serial.println(\"cm\"); lcd.clear(); lcd.print(\"DistanceSensor:\"); lcd.setCursor(0, 1); lcd.print(cm); lcd.print(\"cm\"); if (cm &lt; 90) { digitalWrite(LED, HIGH); delay(1000); } else { digitalWrite(LED, LOW); delay(500); // Wait for 100 millisecond(s) }} SummaryIn this post, we show a demo to use distance sensor HC-SR04 and LCD1602. It’s a good example to use the sensor. Also, there are many possible usages.","content":"<p>Distance sensor can be very useful in some conditons, such as obstacles detecting and avoiding. By using arduino, it’s very easy for us to use distance sensor. This demo show us a simple example to use distance sensor. For better display, we will use LCD1602 to show the distance. <strong>It’s modified from example in arduino.</strong><br><a id=\"more\"></a></p>\n<h2 id=\"Supplies\"><a href=\"#Supplies\" class=\"headerlink\" title=\"Supplies\"></a>Supplies</h2><ul>\n<li>Arduino uno R3</li>\n<li>HC-SR04</li>\n<li>Breadboard</li>\n<li>LCD1602</li>\n<li>Red LED</li>\n<li>Spotter</li>\n<li>Two 100 Ohm resistance</li>\n<li>some DuPont lines</li>\n</ul>\n<h2 id=\"Step-1-Design-and-connect-circuit\"><a href=\"#Step-1-Design-and-connect-circuit\" class=\"headerlink\" title=\"Step 1 Design and connect circuit\"></a>Step 1 Design and connect circuit</h2><p>Browsering internet, it’s easy to find instructions of HC-SR04 and LCD1602. And there are so many libraries for us in arduino. In our circuit, arduino digital pin 2, 3, 4, 5, 11 and 12 are used for LCD1602 while digital pin 7 and 8 are for HC-SR04. LED uses digital pin 13. Finally, following is our circuits.</p>\n<img src=\"/2020/06/distance-sensor-demo-for-arduino/distance-sensor-demo.png\" title=\"Final Circuit\">\n<h2 id=\"Step2-Code\"><a href=\"#Step2-Code\" class=\"headerlink\" title=\"Step2 Code\"></a>Step2 Code</h2><p>As we said before, our program is  based on libraries. So it’s simple to write code. Later I will display complete code. </p>\n<p>Outside the loop, we define a function readUltrasonicDistance used for HC-SR04. Calling this readUltrasonicDistance, we get distance in centimeter. Inside the function setup, we initialize a LCD1604. In the loop, we get distance in centimeter by calling function readUltrasonicDistance. Then we clear LCD screen and print some characters and distance we just got. Finally, we turn on the LED if distance less than 90cm, or turn off the LED if not less than 90cm.</p>\n<p>Here shows complete code.</p>\n<figure class=\"highlight c\"><figcaption><span>distanceDemo.c</span><a href=\"/downloads/code/distanceDemo.c\">view raw</a></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;LiquidCrystal.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// initialize the library with the numbers of the interface pins</span></span><br><span class=\"line\"><span class=\"function\">LiquidCrystal <span class=\"title\">lcd</span><span class=\"params\">(<span class=\"number\">12</span>, <span class=\"number\">11</span>, <span class=\"number\">5</span>, <span class=\"number\">4</span>, <span class=\"number\">3</span>, <span class=\"number\">2</span>)</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">int</span> cm = <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">long</span> <span class=\"title\">readUltrasonicDistance</span><span class=\"params\">(<span class=\"keyword\">int</span> triggerPin, <span class=\"keyword\">int</span> echoPin)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>{</span><br><span class=\"line\">  pinMode(triggerPin, OUTPUT);  <span class=\"comment\">// Clear the trigger</span></span><br><span class=\"line\">  digitalWrite(triggerPin, LOW);</span><br><span class=\"line\">  delayMicroseconds(<span class=\"number\">2</span>);</span><br><span class=\"line\">  <span class=\"comment\">// Sets the trigger pin to HIGH state for 10 microseconds</span></span><br><span class=\"line\">  digitalWrite(triggerPin, HIGH);</span><br><span class=\"line\">  delayMicroseconds(<span class=\"number\">10</span>);</span><br><span class=\"line\">  digitalWrite(triggerPin, LOW);</span><br><span class=\"line\">  pinMode(echoPin, INPUT);</span><br><span class=\"line\">  <span class=\"comment\">// Reads the echo pin, and returns the sound wave travel time in microseconds</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> pulseIn(echoPin, HIGH);</span><br><span class=\"line\">}</span><br><span class=\"line\"><span class=\"keyword\">int</span> LED = <span class=\"number\">13</span>;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">setup</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>{</span><br><span class=\"line\">  Serial.begin(<span class=\"number\">9600</span>);</span><br><span class=\"line\">  lcd.begin(<span class=\"number\">16</span>, <span class=\"number\">2</span>);</span><br><span class=\"line\">  lcd.print(<span class=\"string\">\"DistanceSensor:\"</span>);</span><br><span class=\"line\">  pinMode(LED,OUTPUT);</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">loop</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>{</span><br><span class=\"line\">  <span class=\"comment\">// measure the ping time in cm</span></span><br><span class=\"line\">  cm = <span class=\"number\">0.01723</span> * readUltrasonicDistance(<span class=\"number\">7</span>, <span class=\"number\">8</span>);</span><br><span class=\"line\">  <span class=\"comment\">// convert to inches by dividing by 2.54</span></span><br><span class=\"line\">  Serial.print(cm);</span><br><span class=\"line\">  Serial.println(<span class=\"string\">\"cm\"</span>);</span><br><span class=\"line\">  lcd.clear();</span><br><span class=\"line\">  lcd.print(<span class=\"string\">\"DistanceSensor:\"</span>);</span><br><span class=\"line\">  lcd.setCursor(<span class=\"number\">0</span>, <span class=\"number\">1</span>);</span><br><span class=\"line\">  lcd.print(cm);</span><br><span class=\"line\">  lcd.print(<span class=\"string\">\"cm\"</span>);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (cm &lt; <span class=\"number\">90</span>) {</span><br><span class=\"line\">      digitalWrite(LED, HIGH);</span><br><span class=\"line\">      delay(<span class=\"number\">1000</span>);</span><br><span class=\"line\">  } <span class=\"keyword\">else</span> {</span><br><span class=\"line\">      digitalWrite(LED, LOW);</span><br><span class=\"line\">      delay(<span class=\"number\">500</span>); <span class=\"comment\">// Wait for 100 millisecond(s)</span></span><br><span class=\"line\">  }</span><br><span class=\"line\">}</span><br></pre></td></tr></table></figure>\n<h2 id=\"Summary\"><a href=\"#Summary\" class=\"headerlink\" title=\"Summary\"></a>Summary</h2><p>In this post, we show a demo to use distance sensor HC-SR04 and LCD1602. It’s a good example to use the sensor. Also, there are many possible usages.</p>\n","tags":[]},{"title":"支持话音业务的卫星通信链路信道编码设计","date":"2020-05-26T03:18:10.000Z","path":"2020/05/curriculum-design-of-satellite-communications/","text":"又是一篇关于课程内容的文章，这次是卫星通信课设。如题所示，按照要求，我们需要设计一种支持话音业务的卫星通信链路信道编码设计，以达到给定的性能指标，不过稍微想想也能知道，我们现在并不具备这样的能力，我猜测这个课设题的目的是为了让我们熟悉已有的信道编码方式，比较它们的性能并根据需要选择一种方式。先给出题目： 题目三：支持话音业务的卫星通信链路道编码设计 。话音信号的传输速率为 4.8kbps，误码性能为 $1\\times 10^{-3}$，并采用 BPSK 调制方式。设计一种在开阔地区可进行话音通信的信道编码方式。 题目理解五个人开了两次会，讨论出一个大概的对于题目理解的结果。题目不长，有几个关键点需要抓住：信道编码，传输速率，误码性能，BPSK 和开阔地区。我们的分析结果如下： 虽然在开阔地区或许不用考虑多径干扰，但是还是需要考虑卫星通信中的突发错误，因此需要考虑交织技术来对抗突发错误，由话音业务中的时延要求确定交织时延的大小，进而通过传输速率确定交织深度。 最终的比较选择是在误码率 $1\\times 10^{-3}$ 下，我们计算不同的信道编码方式下需要的信噪比即可，这是最主要的方面，同时码率和时延进行分析比较，得出最终的编码方式选择结果。 好在开题时老师指出了我们的一些问题，也给我们指明了方向： 在设计信道编码时，必须要考虑到具体的链路参数，最好用一个实际的卫星和地面段进行分析，信道考虑为莱斯信道是正确的； 信道编码的选择受到很多参数的约束，我们需要在这些参数中间进行折中考虑，如功率效率、误码率、编码效率和带宽。 按照老师的指导，我们分工了，有人负责链路预算，有人复杂写报告，我负责进行 MATLAB 仿真。 仿真折腾了两天，最终仿真了汉明码和卷积码在 AWGN 信道和莱斯信道下的误码性能，还做了下经过交织后的汉明码在莱斯信道下的误码性能，但是效果很差，由于时间紧急，没来得及做交织后的卷积码在莱斯信道下的误码性能分析，实际当中经过交织的卷积码才是用的比较多的。 具体代码在此列出了，放到了 Github 上，新建了一个仓库用来存放所有做过的实验和一些课设的代码，本次课设的代码地址在这里。这里就放几张图吧。 总结仿真而论，本次课设并没有太多可说道的，当然这也不是本次课设的目的，结题答辩时老师告诉我们这次课设不是让我们去计算什么，是为了让我们去尝试在一个系统中设计一些东西，全面考虑问题，做一些折中。深以为然。","content":"<p>又是一篇关于课程内容的文章，这次是卫星通信课设。如题所示，按照要求，我们需要设计一种支持话音业务的卫星通信链路信道编码设计，以达到给定的性能指标，不过稍微想想也能知道，我们现在并不具备这样的能力，我猜测这个课设题的目的是为了让我们熟悉已有的信道编码方式，比较它们的性能并根据需要选择一种方式。先给出题目：</p>\n<blockquote>\n<p>题目三：支持话音业务的卫星通信链路道编码设计 。话音信号的传输速率为 4.8kbps，误码性能为 $1\\times 10^{-3}$，并采用 BPSK 调制方式。设计一种在开阔地区可进行话音通信的信道编码方式。</p>\n</blockquote>\n<a id=\"more\"></a>\n<h2 id=\"题目理解\"><a href=\"#题目理解\" class=\"headerlink\" title=\"题目理解\"></a>题目理解</h2><p>五个人开了两次会，讨论出一个大概的对于题目理解的结果。题目不长，有几个关键点需要抓住：信道编码，传输速率，误码性能，BPSK 和开阔地区。我们的分析结果如下：</p>\n<ol>\n<li>虽然在开阔地区或许不用考虑多径干扰，但是还是需要考虑卫星通信中的突发错误，因此需要考虑交织技术来对抗突发错误，由话音业务中的时延要求确定交织时延的大小，进而通过传输速率确定交织深度。</li>\n<li>最终的比较选择是在误码率 $1\\times 10^{-3}$ 下，我们计算不同的信道编码方式下需要的信噪比即可，这是最主要的方面，同时码率和时延进行分析比较，得出最终的编码方式选择结果。</li>\n</ol>\n<p>好在开题时老师指出了我们的一些问题，也给我们指明了方向：</p>\n<ul>\n<li>在设计信道编码时，必须要考虑到具体的链路参数，最好用一个实际的卫星和地面段进行分析，信道考虑为莱斯信道是正确的；</li>\n<li>信道编码的选择受到很多参数的约束，我们需要在这些参数中间进行折中考虑，如功率效率、误码率、编码效率和带宽。</li>\n</ul>\n<p>按照老师的指导，我们分工了，有人负责链路预算，有人复杂写报告，我负责进行 MATLAB 仿真。</p>\n<h2 id=\"仿真\"><a href=\"#仿真\" class=\"headerlink\" title=\"仿真\"></a>仿真</h2><p>折腾了两天，最终仿真了汉明码和卷积码在 AWGN 信道和莱斯信道下的误码性能，还做了下经过交织后的汉明码在莱斯信道下的误码性能，但是效果很差，由于时间紧急，没来得及做交织后的卷积码在莱斯信道下的误码性能分析，实际当中经过交织的卷积码才是用的比较多的。</p>\n<p>具体代码在此列出了，放到了 Github 上，新建了一个仓库用来存放所有做过的实验和一些课设的代码，本次课设的代码地址在<a href=\"\">这里</a>。这里就放几张图吧。</p>\n<img src=\"/2020/05/curriculum-design-of-satellite-communications/hamming.jpg\" title=\"汉明码性能仿真\">\n<img src=\"/2020/05/curriculum-design-of-satellite-communications/convolutional_213.jpg\" title=\"213卷积码性能仿真\">\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>仿真而论，本次课设并没有太多可说道的，当然这也不是本次课设的目的，结题答辩时老师告诉我们这次课设不是让我们去计算什么，是为了让我们去尝试在一个系统中设计一些东西，全面考虑问题，做一些折中。深以为然。</p>\n","tags":[{"name":"通信","slug":"通信","permalink":"https://jonathan1214.github.io/tags/通信/"}]},{"title":"MPSK 和 MQAM 的误码率仿真","date":"2020-05-21T06:23:28.000Z","path":"2020/05/ber-and-ser-of-PSK-and-QAM/","text":"拖延几日，不觉课程已结课几天了，在此趁着脑中还有些关于课程内容的印象，简单写一篇记录，关于如何使用MATLAB构建一个调制技术的仿真程序。 BPSK首先来看最简单的二进制仿真，以 BPSK 为例，我们来看看如何搭建一个仿真仿真程序，从中得到些一般的仿真设置方法。 在进行仿真之前，先看看我们期待需要得到的是什么——BPSK的误码率 Pe 随信噪比 SNR 的变化曲线，那么这个图像的横坐标就是信噪比，纵坐标就是误码率。这里面还有一个问题需要提前考虑，老师也在上课的时候强调过让我们去思考，即 SNR 和 $\\frac{E_b}{N_0}$ 的关系，我们的结论是 $SNR=2\\frac{E_b}{N_0}$，这里面有一个从带通等效到低通的过程，同时把基带波形的因素也进行一般化，具体的我只是有一个模糊的概念，等我真的理解了，有机会再来补上吧。最终我们要画的就是 Pe 随 $\\frac{E_b}{N_0}$ 的变化曲线。 这里直接给出理论值计算公式，具体推导并不复杂。$$P_e=\\frac{1}{2}erfc(\\frac{E_b}{N_0})$$ 接下来的问题在于我们如何通过 $\\frac{E_b}{N_0}$ 定量描述噪声和信号的大小，在仿真中我们需要实际比较噪声和信号幅度的大小确定最终的判定结果。 先来看一个比较笨的办法，这个办法并不具有一般性，它没有使用到一个特别重要的东西——星座图，后续我会利用星座图给出一个更加简单的方法。考虑如下这个公式：$$SNR = \\frac{P_s}{P_n}=\\frac{E_b/T_s}{N_0\\cdot B}\\times log_2(M)=\\frac{E_b}{N_0}=\\frac{a^2}{2\\sigma^2}$$ 信号幅度a=1，则立即可以得到噪声功率 $$\\sigma^2=\\frac{1}{2E_b/N_0}$$ BPSK 的基带信号是双极性的，用 -1 和 +1 来表示两种不同极性的信号，前面已经得到噪声的功率，那么信号加上噪声幅度就得到接收信号。这就是关键之处，确定信号和噪声的定量关系，已经噪声该如何加到信号上，明白了这个，其余都很简单。最终我们可以得到如下的代码： BPSK.mview raw123456789101112131415161718192021EbN0dB = 0:1:10;EbN0 = 10.^(EbN0dB/10);N = 2*10^6; % 发送比特数即码元数Pb = 0.5*erfc(sqrt(EbN0)); % 理论值ber = zeros(1, length(EbN0dB)); % 仿真误码率 预分配a = sign(randn(1, N)); % 基带信号noise = randn(1, N); % 标准噪声sigma = sqrt(1./EbN0/2); % 噪声功率for n = 1:length(EbN0dB) rk = a + sigma(n)*noise; % 加噪声得到接收信号 dec_a = sign(rk); % 判决 ber(n) = sum(abs(a-dec_a)/2)/length(a);endsemilogy(EbN0dB, Pb, 'LineWidth', 1);hold on;semilogy(EbN0dB, ber, 'rd');legend('理论结果', '仿真结果')xlabel('\\itE_b/N_0\\rm(dB)'); ylabel('Pb');title('BPSK误码率仿真')grid on 得到的结果如下所示： 第二种方法更具有一般性，理解了它，其他调制方式也是一样的可以实现。这需要星座图的帮助，通过星座图，我们可以得到最小欧式距离和平均比特能量的关系。在 BPSK 中，有$$d_{min}=\\sqrt{4E_b}$$ 同时，$\\frac{d_{min}}{2}$ 也正是信号的幅度，令 $d_{min}=2$，则信号的幅度为 $a=1$，由 $\\frac{E_b}{N_0}$ 和 $d_{min}$ 与 $E_b$ 的关系，我们可以得到$$N_0=\\frac{E_b}{E_b/N_0}=\\frac{d_{min}^2}{4}\\cdot\\frac{1}{E_b/N_0}$$ 那么噪声功率就是$\\sigma^2=\\frac{N_0}{2}$。然后按照第一种方法的思路去编写仿真程序即可，非常简单。再来说说它的通用性，使用星座图仿真 AWGN 信道下的调制方式，我们首先需要确定最小欧式距离和平均比特能量的关系，然后得到噪声功率即可，这样就可以得到信号和噪声的定量关系，进行仿真即可。 QPSK利用上面提到的具有一般性的方式，我们需要使用星座图，QPSK有如下两种星座图形式： 以第一种左边的星座图为例，说明仿真过程。对于 MPSK 调制，最小欧式距离为：$$d_{min}=2\\sqrt{(log_2M\\times sin^2\\frac{\\pi}{M})\\varepsilon_b}$$在 QPSK 中，M=4，则 $d_{min}=2\\sqrt{\\varepsilon_b}$。注意到这和之前的 BPSK 不一样，我们可以将 QPSK 看作两路正交的相位调制叠加。仿真中我们令 $d_{min}=2$，则$\\varepsilon =1$，进而可以得到两路信号的幅度都是1，同时还可以确定噪声功率为 $\\sigma^2 = \\frac{1}{2SNR}$。按照上面的仿真思路我们很容易可以写出代码，最终得到的图形如下所示。 16QAM 和 16PSK同理，对16QAM和16PSK也是一样的道理，只不过星座点映射在代码实现上会稍稍复杂一点。分析 16QAM 可以将它看作两路正交的 4PAM 信号的叠加，其余分析方法和上面完全相同。16PSK 就更加简单了，不多说，直接给出代码和最终的波形图，如下所示。 QAMandPSK.mview raw123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125clear all;close all;clc;EbN0dB = 0:1:15;EbN0 = 10.^(EbN0dB/10);M = 16; % 16 QAMN = 64; % 64 QAM%% 16QAM 64QAM theoryPe_16_help = 2*(1-1/sqrt(M))*qfunc(sqrt(3*log2(M)*EbN0/(M-1)));Pe_16 = 1- (1 - Pe_16_help).^2;Pb_16 = Pe_16 / 4;Pe_64_help = 2*(1-1/sqrt(N))*qfunc(sqrt(3*log2(N)*EbN0/(N-1)));Pe_64 = 1- (1 - Pe_64_help).^2;%% 16PSK theoryPe_theory_PSK = 2*qfunc(sin(pi/M)*sqrt(2*log2(M)*EbN0));%% theory plotsemilogy(EbN0dB, Pe_16, 'LineWidth', 1)hold on% semilogy(EbN0dB, Pe_64)% hold onsemilogy(EbN0dB, Pe_theory_PSK, 'k', 'LineWidth', 1)hold onsemilogy(EbN0dB, Pb_16, 'c', 'LineWidth', 1)hold onsemilogy(EbN0dB, Pe_theory_PSK / 4, 'g', 'LineWidth', 1)grid onxlabel('\\it{E_b/N_0} \\rm(dB)')ylabel('P_b and P_e')% 16QAM 仿真% 格雷码映射表gray_code_table = [0 0 0 0; % 0 1 0 0 0; % 1 1 1 0 0; % 2 0 1 0 0; % 3 0 1 1 0; % 4 1 1 1 0; % 5 1 0 1 0; % 6 0 0 1 0; % 7 0 0 1 1; % 8 1 0 1 1; % 9 1 1 1 1; % 10 0 1 1 1; % 11 0 1 0 1; % 12 1 1 0 1; % 13 1 0 0 1; % 14 0 0 0 1;];% 15% 星座点位置表 16QAMstar_table_1 = [-1*(-3:2:3) (-3:2:3) -1*(-3:2:3) (-3:2:3)];star_table_2 = [ones(1, 4)*3 ones(1, 4) -1*ones(1,4) -3*ones(1,4)];star_table = [star_table_1' star_table_2'];star_table_T = star_table';table_used = reshape(star_table_T, 1, M*2);% 星座点位置表 16PSKphase = 0:2*pi/M:(2*pi-2*pi/M);PSK16StarTable = [cos(phase); sin(phase)];PSK_table_used = reshape(PSK16StarTable, M*2, 1);% 基带信号N = 4*10^4; % bit数base = (sign(randn(1, N)) + 1) / 2;mid_modul = reshape(base, [4 N/4]);mid_modul = mid_modul';% 映射到星座点上 QAM 和 QPSKmodulSignalPosi = zeros(N/4, 2);PSK_modulSignalPosi = zeros(2, N/4);for symbol = 1:N/4 dude = gray2int(mid_modul(symbol, :)) + 1; modulSignalPosi(symbol, :) = star_table(dude, :); PSK_modulSignalPosi(:, symbol) = PSK16StarTable(:, dude);end% 噪声sigma = sqrt(4*(M-1)/6/log2(M)./EbN0/2);PSK_sigma = sqrt(1/log2(M)./EbN0/2);% 过信道 解调 求信噪比be = zeros(1, length(EbN0dB));se = zeros(1, length(EbN0dB));PSK_be = zeros(1, length(EbN0dB));PSK_se = zeros(1, length(EbN0dB));for index = 1:length(EbN0dB) % 加噪声 reciPosi = modulSignalPosi + sigma(index) * randn(N/4, 2); % 最小距离解调 QAM distanceMid = repmat(reciPosi, [1 M]) - repmat(table_used, N/4, 1); distanceMid = distanceMid.^2; distance = distanceMid(:, 1:2:(M*2-1)) + distanceMid(:, 2:2:(M*2)); distance = distance'; % decodePosi 即为解调结果对应gray_code_table的位置 [~, decodePosi] = min(distance); % 解调结果映射到基带 QAM toBaseGray = gray_code_table(decodePosi, :); toBaseSignal = reshape(toBaseGray', 1, N); be(index) = sum(abs(base-toBaseSignal)); se_posi = double(mid_modul ~= toBaseGray); se(index) = sum(sign(sum(se_posi, 2))); % PSK PSK_reciPosi = PSK_modulSignalPosi + PSK_sigma(index) * randn(2, N/4); PSK_distanceMid = repmat(PSK_reciPosi, [M 1]) - repmat(PSK_table_used, [1 N/4]); PSK_distanceMid = PSK_distanceMid.^2; PSK_distance = PSK_distanceMid(1:2:(M*2-1), :) + PSK_distanceMid(2:2:(M*2), :); [~, PSK_decodePosi] = min(PSK_distance); PSK_toBaseGray = gray_code_table(PSK_decodePosi, :); PSK_toBaseSignal = reshape(PSK_toBaseGray', 1, N); PSK_be(index) = sum(abs(base-PSK_toBaseSignal)); PSK_se_posi = double(mid_modul ~= PSK_toBaseGray); PSK_se(index) = sum(sign(sum(PSK_se_posi, 2)));endsemilogy(EbN0dB, se/N*4, 'v', 'MarkerEdgeColor', 'r')hold onsemilogy(EbN0dB, be/N, '*', 'MarkerEdgeColor', 'r')hold onsemilogy(EbN0dB, PSK_se/N*4, '^', 'MarkerEdgeColor', 'm')hold onsemilogy(EbN0dB, PSK_be/N, '*', 'MarkerEdgeColor', 'm')legend('16QAM理论误码率', '16PSK理论误码率', '16QAM理论误比特率', '16PSK理论误比特率', ... '16QAM仿真误码率', '16QAM仿真误比特率', '16PSK仿真误码率', '16PSK仿真误比特率')title('16QAM and 16PSK')","content":"<p>拖延几日，不觉课程已结课几天了，在此趁着脑中还有些关于课程内容的印象，简单写一篇记录，关于如何使用MATLAB构建一个调制技术的仿真程序。<br><a id=\"more\"></a></p>\n<h2 id=\"BPSK\"><a href=\"#BPSK\" class=\"headerlink\" title=\"BPSK\"></a>BPSK</h2><p>首先来看最简单的二进制仿真，以 BPSK 为例，我们来看看如何搭建一个仿真仿真程序，从中得到些一般的仿真设置方法。</p>\n<p>在进行仿真之前，先看看我们期待需要得到的是什么——BPSK的误码率 Pe 随信噪比 SNR 的变化曲线，那么这个图像的横坐标就是信噪比，纵坐标就是误码率。这里面还有一个问题需要提前考虑，老师也在上课的时候强调过让我们去思考，即 SNR 和 $\\frac{E_b}{N_0}$ 的关系，我们的结论是 $SNR=2\\frac{E_b}{N_0}$，这里面有一个<strong>从带通等效到低通的过程，同时把基带波形的因素也进行一般化</strong>，具体的我只是有一个模糊的概念，等我真的理解了，有机会再来补上吧。最终我们要画的就是 Pe 随 $\\frac{E_b}{N_0}$ 的变化曲线。</p>\n<p>这里直接给出理论值计算公式，具体推导并不复杂。<br>$$<br>P_e=\\frac{1}{2}erfc(\\frac{E_b}{N_0})<br>$$</p>\n<p>接下来的问题在于我们如何通过 $\\frac{E_b}{N_0}$ 定量描述噪声和信号的大小，在仿真中我们需要实际比较噪声和信号幅度的大小确定最终的判定结果。</p>\n<p>先来看一个比较笨的办法，这个办法并不具有一般性，它没有使用到一个特别重要的东西——<strong>星座图</strong>，后续我会利用星座图给出一个更加简单的方法。考虑如下这个公式：<br>$$<br>SNR = \\frac{P_s}{P_n}=\\frac{E_b/T_s}{N_0\\cdot B}\\times log_2(M)=\\frac{E_b}{N_0}=\\frac{a^2}{2\\sigma^2}<br>$$</p>\n<p>信号幅度a=1，则立即可以得到噪声功率</p>\n<p>$$<br>\\sigma^2=\\frac{1}{2E_b/N_0}<br>$$</p>\n<p>BPSK 的基带信号是双极性的，用 -1 和 +1 来表示两种不同极性的信号，前面已经得到噪声的功率，那么信号加上噪声幅度就得到接收信号。这就是关键之处，确定信号和噪声的定量关系，已经噪声该如何加到信号上，明白了这个，其余都很简单。最终我们可以得到如下的代码：</p>\n<figure class=\"highlight matlab\"><figcaption><span>BPSK.m</span><a href=\"/downloads/code/BPSK.m\">view raw</a></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">EbN0dB = <span class=\"number\">0</span>:<span class=\"number\">1</span>:<span class=\"number\">10</span>;</span><br><span class=\"line\">EbN0 = <span class=\"number\">10.</span>^(EbN0dB/<span class=\"number\">10</span>);</span><br><span class=\"line\">N = <span class=\"number\">2</span>*<span class=\"number\">10</span>^<span class=\"number\">6</span>;                     <span class=\"comment\">% 发送比特数即码元数</span></span><br><span class=\"line\">Pb = <span class=\"number\">0.5</span>*<span class=\"built_in\">erfc</span>(<span class=\"built_in\">sqrt</span>(EbN0));      <span class=\"comment\">% 理论值</span></span><br><span class=\"line\">ber = <span class=\"built_in\">zeros</span>(<span class=\"number\">1</span>, <span class=\"built_in\">length</span>(EbN0dB)); <span class=\"comment\">% 仿真误码率 预分配</span></span><br><span class=\"line\">a = <span class=\"built_in\">sign</span>(<span class=\"built_in\">randn</span>(<span class=\"number\">1</span>, N));          <span class=\"comment\">% 基带信号</span></span><br><span class=\"line\">noise = <span class=\"built_in\">randn</span>(<span class=\"number\">1</span>, N);            <span class=\"comment\">% 标准噪声</span></span><br><span class=\"line\">sigma = <span class=\"built_in\">sqrt</span>(<span class=\"number\">1.</span>/EbN0/<span class=\"number\">2</span>);        <span class=\"comment\">% 噪声功率</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> n = <span class=\"number\">1</span>:<span class=\"built_in\">length</span>(EbN0dB)</span><br><span class=\"line\">    rk = a + sigma(n)*noise;    <span class=\"comment\">% 加噪声得到接收信号</span></span><br><span class=\"line\">    dec_a = <span class=\"built_in\">sign</span>(rk);           <span class=\"comment\">% 判决</span></span><br><span class=\"line\">    ber(n) = sum(<span class=\"built_in\">abs</span>(a-dec_a)/<span class=\"number\">2</span>)/<span class=\"built_in\">length</span>(a);</span><br><span class=\"line\"><span class=\"keyword\">end</span></span><br><span class=\"line\"></span><br><span class=\"line\">semilogy(EbN0dB, Pb, <span class=\"string\">'LineWidth'</span>, <span class=\"number\">1</span>);</span><br><span class=\"line\">hold on;</span><br><span class=\"line\">semilogy(EbN0dB, ber, <span class=\"string\">'rd'</span>);</span><br><span class=\"line\">legend(<span class=\"string\">'理论结果'</span>, <span class=\"string\">'仿真结果'</span>)</span><br><span class=\"line\">xlabel(<span class=\"string\">'\\itE_b/N_0\\rm(dB)'</span>); ylabel(<span class=\"string\">'Pb'</span>);</span><br><span class=\"line\">title(<span class=\"string\">'BPSK误码率仿真'</span>)</span><br><span class=\"line\">grid on</span><br></pre></td></tr></table></figure>\n<p>得到的结果如下所示：</p>\n<img src=\"/2020/05/ber-and-ser-of-PSK-and-QAM/BPSK.png\" title=\"BPSK 仿真结果\">\n<p>第二种方法更具有一般性，理解了它，其他调制方式也是一样的可以实现。这需要星座图的帮助，通过星座图，我们可以得到最小欧式距离和平均比特能量的关系。在 BPSK 中，有<br>$$<br>d_{min}=\\sqrt{4E_b}<br>$$</p>\n<p>同时，$\\frac{d_{min}}{2}$ 也正是信号的幅度，令 $d_{min}=2$，则信号的幅度为 $a=1$，由 $\\frac{E_b}{N_0}$ 和 $d_{min}$ 与 $E_b$ 的关系，我们可以得到<br>$$<br>N_0=\\frac{E_b}{E_b/N_0}=\\frac{d_{min}^2}{4}\\cdot\\frac{1}{E_b/N_0}<br>$$</p>\n<p>那么噪声功率就是$\\sigma^2=\\frac{N_0}{2}$。然后按照第一种方法的思路去编写仿真程序即可，非常简单。再来说说它的通用性，使用星座图仿真 AWGN 信道下的调制方式，我们首先需要确定最小欧式距离和平均比特能量的关系，然后得到噪声功率即可，这样就可以得到信号和噪声的定量关系，进行仿真即可。</p>\n<h2 id=\"QPSK\"><a href=\"#QPSK\" class=\"headerlink\" title=\"QPSK\"></a>QPSK</h2><p>利用上面提到的具有一般性的方式，我们需要使用星座图，QPSK有如下两种星座图形式：</p>\n<img src=\"/2020/05/ber-and-ser-of-PSK-and-QAM/QPSKConstellation.png\" title=\"QPSK 的两种星座图\">\n<p>以第一种左边的星座图为例，说明仿真过程。对于 MPSK 调制，最小欧式距离为：<br>$$<br>d_{min}=2\\sqrt{(log_2M\\times sin^2\\frac{\\pi}{M})\\varepsilon_b}<br>$$<br>在 QPSK 中，M=4，则 $d_{min}=2\\sqrt{\\varepsilon_b}$。注意到这和之前的 BPSK 不一样，我们可以将 QPSK 看作两路正交的相位调制叠加。仿真中我们令 $d_{min}=2$，则$\\varepsilon =1$，进而可以得到两路信号的幅度都是1，同时还可以确定噪声功率为 $\\sigma^2 = \\frac{1}{2SNR}$。按照上面的仿真思路我们很容易可以写出代码，最终得到的图形如下所示。</p>\n<h2 id=\"16QAM-和-16PSK\"><a href=\"#16QAM-和-16PSK\" class=\"headerlink\" title=\"16QAM 和 16PSK\"></a>16QAM 和 16PSK</h2><p>同理，对16QAM和16PSK也是一样的道理，只不过星座点映射在代码实现上会稍稍复杂一点。分析 16QAM 可以将它看作两路正交的 4PAM 信号的叠加，其余分析方法和上面完全相同。16PSK 就更加简单了，不多说，直接给出代码和最终的波形图，如下所示。</p>\n<img src=\"/2020/05/ber-and-ser-of-PSK-and-QAM/QAMandPSK.jpg\" title=\"16QAM和16PSK仿真结果\">\n<figure class=\"highlight matlab\"><figcaption><span>QAMandPSK.m</span><a href=\"/downloads/code/QAMandPSK.m\">view raw</a></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">clear all;</span><br><span class=\"line\">close all;</span><br><span class=\"line\">clc;</span><br><span class=\"line\"></span><br><span class=\"line\">EbN0dB = <span class=\"number\">0</span>:<span class=\"number\">1</span>:<span class=\"number\">15</span>;</span><br><span class=\"line\">EbN0 = <span class=\"number\">10.</span>^(EbN0dB/<span class=\"number\">10</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">M = <span class=\"number\">16</span>; <span class=\"comment\">% 16 QAM</span></span><br><span class=\"line\">N = <span class=\"number\">64</span>; <span class=\"comment\">% 64 QAM</span></span><br><span class=\"line\"><span class=\"comment\">%% 16QAM 64QAM theory</span></span><br><span class=\"line\">Pe_16_help = <span class=\"number\">2</span>*(<span class=\"number\">1</span><span class=\"number\">-1</span>/<span class=\"built_in\">sqrt</span>(M))*qfunc(<span class=\"built_in\">sqrt</span>(<span class=\"number\">3</span>*<span class=\"built_in\">log2</span>(M)*EbN0/(M<span class=\"number\">-1</span>)));</span><br><span class=\"line\">Pe_16 = <span class=\"number\">1</span>- (<span class=\"number\">1</span> - Pe_16_help).^<span class=\"number\">2</span>;</span><br><span class=\"line\">Pb_16 = Pe_16 / <span class=\"number\">4</span>;</span><br><span class=\"line\">Pe_64_help = <span class=\"number\">2</span>*(<span class=\"number\">1</span><span class=\"number\">-1</span>/<span class=\"built_in\">sqrt</span>(N))*qfunc(<span class=\"built_in\">sqrt</span>(<span class=\"number\">3</span>*<span class=\"built_in\">log2</span>(N)*EbN0/(N<span class=\"number\">-1</span>)));</span><br><span class=\"line\">Pe_64 = <span class=\"number\">1</span>- (<span class=\"number\">1</span> - Pe_64_help).^<span class=\"number\">2</span>;</span><br><span class=\"line\"><span class=\"comment\">%% 16PSK theory</span></span><br><span class=\"line\">Pe_theory_PSK = <span class=\"number\">2</span>*qfunc(<span class=\"built_in\">sin</span>(<span class=\"built_in\">pi</span>/M)*<span class=\"built_in\">sqrt</span>(<span class=\"number\">2</span>*<span class=\"built_in\">log2</span>(M)*EbN0));</span><br><span class=\"line\"><span class=\"comment\">%% theory plot</span></span><br><span class=\"line\">semilogy(EbN0dB, Pe_16, <span class=\"string\">'LineWidth'</span>, <span class=\"number\">1</span>)</span><br><span class=\"line\">hold on</span><br><span class=\"line\"><span class=\"comment\">% semilogy(EbN0dB, Pe_64)</span></span><br><span class=\"line\"><span class=\"comment\">% hold on</span></span><br><span class=\"line\">semilogy(EbN0dB, Pe_theory_PSK, <span class=\"string\">'k'</span>, <span class=\"string\">'LineWidth'</span>, <span class=\"number\">1</span>)</span><br><span class=\"line\">hold on</span><br><span class=\"line\">semilogy(EbN0dB, Pb_16, <span class=\"string\">'c'</span>, <span class=\"string\">'LineWidth'</span>, <span class=\"number\">1</span>)</span><br><span class=\"line\">hold on</span><br><span class=\"line\">semilogy(EbN0dB, Pe_theory_PSK / <span class=\"number\">4</span>, <span class=\"string\">'g'</span>, <span class=\"string\">'LineWidth'</span>, <span class=\"number\">1</span>)</span><br><span class=\"line\">grid on</span><br><span class=\"line\"></span><br><span class=\"line\">xlabel(<span class=\"string\">'\\it{E_b/N_0} \\rm(dB)'</span>)</span><br><span class=\"line\">ylabel(<span class=\"string\">'P_b and P_e'</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">% 16QAM 仿真</span></span><br><span class=\"line\"><span class=\"comment\">% 格雷码映射表</span></span><br><span class=\"line\">gray_code_table = [<span class=\"number\">0</span> <span class=\"number\">0</span> <span class=\"number\">0</span> <span class=\"number\">0</span>; % <span class=\"number\">0</span></span><br><span class=\"line\">                  <span class=\"number\">1</span> <span class=\"number\">0</span> <span class=\"number\">0</span> <span class=\"number\">0</span>;  % <span class=\"number\">1</span></span><br><span class=\"line\">                  <span class=\"number\">1</span> <span class=\"number\">1</span> <span class=\"number\">0</span> <span class=\"number\">0</span>;  % <span class=\"number\">2</span></span><br><span class=\"line\">                  <span class=\"number\">0</span> <span class=\"number\">1</span> <span class=\"number\">0</span> <span class=\"number\">0</span>;  % <span class=\"number\">3</span></span><br><span class=\"line\">                  <span class=\"number\">0</span> <span class=\"number\">1</span> <span class=\"number\">1</span> <span class=\"number\">0</span>;  % <span class=\"number\">4</span></span><br><span class=\"line\">                  <span class=\"number\">1</span> <span class=\"number\">1</span> <span class=\"number\">1</span> <span class=\"number\">0</span>;  % <span class=\"number\">5</span></span><br><span class=\"line\">                  <span class=\"number\">1</span> <span class=\"number\">0</span> <span class=\"number\">1</span> <span class=\"number\">0</span>;  % <span class=\"number\">6</span></span><br><span class=\"line\">                  <span class=\"number\">0</span> <span class=\"number\">0</span> <span class=\"number\">1</span> <span class=\"number\">0</span>;  % <span class=\"number\">7</span></span><br><span class=\"line\">                  <span class=\"number\">0</span> <span class=\"number\">0</span> <span class=\"number\">1</span> <span class=\"number\">1</span>;  % <span class=\"number\">8</span></span><br><span class=\"line\">                  <span class=\"number\">1</span> <span class=\"number\">0</span> <span class=\"number\">1</span> <span class=\"number\">1</span>;  % <span class=\"number\">9</span></span><br><span class=\"line\">                  <span class=\"number\">1</span> <span class=\"number\">1</span> <span class=\"number\">1</span> <span class=\"number\">1</span>;  % <span class=\"number\">10</span></span><br><span class=\"line\">                  <span class=\"number\">0</span> <span class=\"number\">1</span> <span class=\"number\">1</span> <span class=\"number\">1</span>;  % <span class=\"number\">11</span></span><br><span class=\"line\">                  <span class=\"number\">0</span> <span class=\"number\">1</span> <span class=\"number\">0</span> <span class=\"number\">1</span>;  % <span class=\"number\">12</span></span><br><span class=\"line\">                  <span class=\"number\">1</span> <span class=\"number\">1</span> <span class=\"number\">0</span> <span class=\"number\">1</span>;  % <span class=\"number\">13</span></span><br><span class=\"line\">                  <span class=\"number\">1</span> <span class=\"number\">0</span> <span class=\"number\">0</span> <span class=\"number\">1</span>;  % <span class=\"number\">14</span></span><br><span class=\"line\">                  <span class=\"number\">0</span> <span class=\"number\">0</span> <span class=\"number\">0</span> <span class=\"number\">1</span>;];<span class=\"comment\">% 15</span></span><br><span class=\"line\"><span class=\"comment\">% 星座点位置表 16QAM</span></span><br><span class=\"line\">star_table_1 = [<span class=\"number\">-1</span>*(<span class=\"number\">-3</span>:<span class=\"number\">2</span>:<span class=\"number\">3</span>) (<span class=\"number\">-3</span>:<span class=\"number\">2</span>:<span class=\"number\">3</span>) <span class=\"number\">-1</span>*(<span class=\"number\">-3</span>:<span class=\"number\">2</span>:<span class=\"number\">3</span>) (<span class=\"number\">-3</span>:<span class=\"number\">2</span>:<span class=\"number\">3</span>)];</span><br><span class=\"line\">star_table_2 = [ones(<span class=\"number\">1</span>, <span class=\"number\">4</span>)*<span class=\"number\">3</span> ones(<span class=\"number\">1</span>, <span class=\"number\">4</span>) <span class=\"number\">-1</span>*ones(<span class=\"number\">1</span>,<span class=\"number\">4</span>) <span class=\"number\">-3</span>*ones(<span class=\"number\">1</span>,<span class=\"number\">4</span>)];</span><br><span class=\"line\">star_table = [star_table_1<span class=\"string\">' star_table_2'</span>];</span><br><span class=\"line\">star_table_T = star_table';</span><br><span class=\"line\">table_used = <span class=\"built_in\">reshape</span>(star_table_T, <span class=\"number\">1</span>, M*<span class=\"number\">2</span>);</span><br><span class=\"line\"><span class=\"comment\">% 星座点位置表 16PSK</span></span><br><span class=\"line\">phase = <span class=\"number\">0</span>:<span class=\"number\">2</span>*<span class=\"built_in\">pi</span>/M:(<span class=\"number\">2</span>*<span class=\"built_in\">pi</span><span class=\"number\">-2</span>*<span class=\"built_in\">pi</span>/M);</span><br><span class=\"line\">PSK16StarTable = [cos(phase);</span><br><span class=\"line\">                  sin(phase)];</span><br><span class=\"line\">PSK_table_used = <span class=\"built_in\">reshape</span>(PSK16StarTable, M*<span class=\"number\">2</span>, <span class=\"number\">1</span>);</span><br><span class=\"line\"><span class=\"comment\">% 基带信号</span></span><br><span class=\"line\">N = <span class=\"number\">4</span>*<span class=\"number\">10</span>^<span class=\"number\">4</span>; <span class=\"comment\">% bit数</span></span><br><span class=\"line\">base = (<span class=\"built_in\">sign</span>(<span class=\"built_in\">randn</span>(<span class=\"number\">1</span>, N)) + <span class=\"number\">1</span>) / <span class=\"number\">2</span>;</span><br><span class=\"line\">mid_modul = <span class=\"built_in\">reshape</span>(base, [<span class=\"number\">4</span> N/<span class=\"number\">4</span>]);</span><br><span class=\"line\">mid_modul = mid_modul';</span><br><span class=\"line\"><span class=\"comment\">% 映射到星座点上 QAM 和 QPSK</span></span><br><span class=\"line\">modulSignalPosi = <span class=\"built_in\">zeros</span>(N/<span class=\"number\">4</span>, <span class=\"number\">2</span>);</span><br><span class=\"line\">PSK_modulSignalPosi = <span class=\"built_in\">zeros</span>(<span class=\"number\">2</span>, N/<span class=\"number\">4</span>);</span><br><span class=\"line\"><span class=\"keyword\">for</span> symbol = <span class=\"number\">1</span>:N/<span class=\"number\">4</span></span><br><span class=\"line\">    dude = gray2int(mid_modul(symbol, :)) + <span class=\"number\">1</span>;</span><br><span class=\"line\">    modulSignalPosi(symbol, :) = star_table(dude, :);</span><br><span class=\"line\">    PSK_modulSignalPosi(:, symbol) = PSK16StarTable(:, dude);</span><br><span class=\"line\"><span class=\"keyword\">end</span></span><br><span class=\"line\"><span class=\"comment\">% 噪声</span></span><br><span class=\"line\">sigma = <span class=\"built_in\">sqrt</span>(<span class=\"number\">4</span>*(M<span class=\"number\">-1</span>)/<span class=\"number\">6</span>/<span class=\"built_in\">log2</span>(M)./EbN0/<span class=\"number\">2</span>);</span><br><span class=\"line\">PSK_sigma = <span class=\"built_in\">sqrt</span>(<span class=\"number\">1</span>/<span class=\"built_in\">log2</span>(M)./EbN0/<span class=\"number\">2</span>);</span><br><span class=\"line\"><span class=\"comment\">% 过信道 解调 求信噪比</span></span><br><span class=\"line\">be = <span class=\"built_in\">zeros</span>(<span class=\"number\">1</span>, <span class=\"built_in\">length</span>(EbN0dB));</span><br><span class=\"line\">se = <span class=\"built_in\">zeros</span>(<span class=\"number\">1</span>, <span class=\"built_in\">length</span>(EbN0dB));</span><br><span class=\"line\">PSK_be = <span class=\"built_in\">zeros</span>(<span class=\"number\">1</span>, <span class=\"built_in\">length</span>(EbN0dB));</span><br><span class=\"line\">PSK_se = <span class=\"built_in\">zeros</span>(<span class=\"number\">1</span>, <span class=\"built_in\">length</span>(EbN0dB));</span><br><span class=\"line\"><span class=\"keyword\">for</span> index = <span class=\"number\">1</span>:<span class=\"built_in\">length</span>(EbN0dB)</span><br><span class=\"line\">    <span class=\"comment\">% 加噪声</span></span><br><span class=\"line\">    reciPosi = modulSignalPosi + sigma(index) * <span class=\"built_in\">randn</span>(N/<span class=\"number\">4</span>, <span class=\"number\">2</span>);</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">% 最小距离解调 QAM</span></span><br><span class=\"line\">    distanceMid = <span class=\"built_in\">repmat</span>(reciPosi, [<span class=\"number\">1</span> M]) - <span class=\"built_in\">repmat</span>(table_used, N/<span class=\"number\">4</span>, <span class=\"number\">1</span>);</span><br><span class=\"line\">    distanceMid = distanceMid.^<span class=\"number\">2</span>;</span><br><span class=\"line\">    distance = distanceMid(:, <span class=\"number\">1</span>:<span class=\"number\">2</span>:(M*<span class=\"number\">2</span><span class=\"number\">-1</span>)) + distanceMid(:, <span class=\"number\">2</span>:<span class=\"number\">2</span>:(M*<span class=\"number\">2</span>));</span><br><span class=\"line\">    distance = distance';</span><br><span class=\"line\">    <span class=\"comment\">% decodePosi 即为解调结果对应gray_code_table的位置</span></span><br><span class=\"line\">    [~, decodePosi] = min(distance);</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">% 解调结果映射到基带 QAM</span></span><br><span class=\"line\">    toBaseGray = gray_code_table(decodePosi, :);</span><br><span class=\"line\">    toBaseSignal = <span class=\"built_in\">reshape</span>(toBaseGray', <span class=\"number\">1</span>, N);</span><br><span class=\"line\">    be(index) = sum(<span class=\"built_in\">abs</span>(base-toBaseSignal));</span><br><span class=\"line\">    se_posi = double(mid_modul ~= toBaseGray);</span><br><span class=\"line\">    se(index) = sum(<span class=\"built_in\">sign</span>(sum(se_posi, <span class=\"number\">2</span>)));</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">% PSK</span></span><br><span class=\"line\">    PSK_reciPosi = PSK_modulSignalPosi + PSK_sigma(index) * <span class=\"built_in\">randn</span>(<span class=\"number\">2</span>, N/<span class=\"number\">4</span>);</span><br><span class=\"line\">    </span><br><span class=\"line\">    PSK_distanceMid = <span class=\"built_in\">repmat</span>(PSK_reciPosi, [M <span class=\"number\">1</span>]) - <span class=\"built_in\">repmat</span>(PSK_table_used, [<span class=\"number\">1</span> N/<span class=\"number\">4</span>]);</span><br><span class=\"line\">    PSK_distanceMid = PSK_distanceMid.^<span class=\"number\">2</span>;</span><br><span class=\"line\">    PSK_distance = PSK_distanceMid(<span class=\"number\">1</span>:<span class=\"number\">2</span>:(M*<span class=\"number\">2</span><span class=\"number\">-1</span>), :) + PSK_distanceMid(<span class=\"number\">2</span>:<span class=\"number\">2</span>:(M*<span class=\"number\">2</span>), :);</span><br><span class=\"line\">    [~, PSK_decodePosi] = min(PSK_distance);</span><br><span class=\"line\">    </span><br><span class=\"line\">    PSK_toBaseGray = gray_code_table(PSK_decodePosi, :);</span><br><span class=\"line\">    PSK_toBaseSignal = <span class=\"built_in\">reshape</span>(PSK_toBaseGray', <span class=\"number\">1</span>, N);</span><br><span class=\"line\">    PSK_be(index) = sum(<span class=\"built_in\">abs</span>(base-PSK_toBaseSignal));</span><br><span class=\"line\">    PSK_se_posi = double(mid_modul ~= PSK_toBaseGray);</span><br><span class=\"line\">    PSK_se(index) = sum(<span class=\"built_in\">sign</span>(sum(PSK_se_posi, <span class=\"number\">2</span>)));</span><br><span class=\"line\"><span class=\"keyword\">end</span></span><br><span class=\"line\">semilogy(EbN0dB, se/N*<span class=\"number\">4</span>, <span class=\"string\">'v'</span>, <span class=\"string\">'MarkerEdgeColor'</span>, <span class=\"string\">'r'</span>)</span><br><span class=\"line\">hold on</span><br><span class=\"line\">semilogy(EbN0dB, be/N, <span class=\"string\">'*'</span>, <span class=\"string\">'MarkerEdgeColor'</span>, <span class=\"string\">'r'</span>)</span><br><span class=\"line\">hold on</span><br><span class=\"line\">semilogy(EbN0dB, PSK_se/N*<span class=\"number\">4</span>, <span class=\"string\">'^'</span>, <span class=\"string\">'MarkerEdgeColor'</span>, <span class=\"string\">'m'</span>)</span><br><span class=\"line\">hold on</span><br><span class=\"line\">semilogy(EbN0dB, PSK_be/N, <span class=\"string\">'*'</span>, <span class=\"string\">'MarkerEdgeColor'</span>, <span class=\"string\">'m'</span>)</span><br><span class=\"line\">legend(<span class=\"string\">'16QAM理论误码率'</span>, <span class=\"string\">'16PSK理论误码率'</span>, <span class=\"string\">'16QAM理论误比特率'</span>,  <span class=\"string\">'16PSK理论误比特率'</span>, ...</span><br><span class=\"line\">    <span class=\"string\">'16QAM仿真误码率'</span>, <span class=\"string\">'16QAM仿真误比特率'</span>, <span class=\"string\">'16PSK仿真误码率'</span>, <span class=\"string\">'16PSK仿真误比特率'</span>)</span><br><span class=\"line\">title(<span class=\"string\">'16QAM and 16PSK'</span>)</span><br></pre></td></tr></table></figure>","tags":[{"name":"MATLAB","slug":"MATLAB","permalink":"https://jonathan1214.github.io/tags/MATLAB/"},{"name":"通信","slug":"通信","permalink":"https://jonathan1214.github.io/tags/通信/"}]},{"title":"LeetCode | 61 旋转链表","date":"2020-05-09T08:09:36.000Z","path":"2020/05/rotate-LinkedList-rightly/","text":"题目给定一个链表，旋转链表，将链表每个节点向右移动 k 个位置，其中 k 是非负数。 示例 输入：1-&gt;2-&gt;3-&gt;4-&gt;5，k=2 输出：4-&gt;5-&gt;1-&gt;2-&gt;3 题解题目名字叫旋转链表，其实就是循环移动。最简单的思路是：遍历链表找到尾节点的前一节点，然后把尾节点从头插入链表，对这个过程执行 k 次即可。这样做算法的时间复杂度为 O(kn)。考虑到是循环移动，我们可以对算法进行改进。 首先考虑 k 小于链表长度的情况，链表循环向右移动 k 次，不就相当于把链表练成环，然后尾节点位置向左移动 k 次吗？下面这个图展示了这个过程。 对于 k 大于链表长度的情况，先构成环，沿着环一直移动就行。这种方法的问题在于我们需要逆向移动单链表的指针，即每次需要找到单链表前驱的前驱，这是很难做到的，但我们可以先行将单链表进行逆序，然后移动指针，确定最终的头尾节点后再把链表逆序回来即可。 更进一步的，在环中逆序移动指针 k 次，就相当于顺序移动指针 n-k 次，其中 n 是链表的长度。基于这种想法，我们再加以改进，得到下面的解法。 先把指针 p 从头向后移动到尾，直到循环移动的次数 k==0。在此过程中，如果 p 指向了空节点，说明到了链表尾部，k 大于链表的长度，这时候我们可以利用循环的特点，对链表的长度减一值进行取模运算，得到的值是我们需要再移动到位置。然后按照上述的方法进行指针移动即可。最终代码如下所示。 LeetCodeSolution61.cview raw1234567891011121314151617181920212223242526272829303132333435ListNode *rotateRight(ListNode *head, int k){ if (head == NULL || k &lt;= 0) return head; ListNode *pre, *last, *p; ListNode tmpNode; tmpNode.next = head; last = &amp;tmpNode; p = head; int ak = k; while (k &gt; 0){ // 滑动指针来代替循环 if (p == NULL) { int tmp = ak - k; pre = &amp;tmpNode; p = head; k = ak % tmp; if (k == 0) break; } pre = p; p = p-&gt;next; k--; } while (p != NULL) { last = last-&gt;next; pre = p; p = p-&gt;next; } if (last != &amp;tmpNode) { pre-&gt;next = head; tmpNode.next = last-&gt;next; last-&gt;next = NULL; } return tmpNode.next;}","content":"<h2 id=\"题目\"><a href=\"#题目\" class=\"headerlink\" title=\"题目\"></a>题目</h2><p>给定一个链表，旋转链表，将链表每个节点向右移动 k 个位置，其中 k 是非负数。</p>\n<h3 id=\"示例\"><a href=\"#示例\" class=\"headerlink\" title=\"示例\"></a>示例</h3><ul>\n<li>输入：<code>1-&gt;2-&gt;3-&gt;4-&gt;5</code>，<code>k=2</code></li>\n<li>输出：<code>4-&gt;5-&gt;1-&gt;2-&gt;3</code></li>\n</ul>\n<a id=\"more\"></a>\n<h2 id=\"题解\"><a href=\"#题解\" class=\"headerlink\" title=\"题解\"></a>题解</h2><p>题目名字叫旋转链表，其实就是循环移动。最简单的思路是：遍历链表找到尾节点的前一节点，然后把尾节点从头插入链表，对这个过程执行 k 次即可。这样做算法的时间复杂度为 <code>O(kn)</code>。考虑到是循环移动，我们可以对算法进行改进。</p>\n<p>首先考虑 <code>k</code> 小于链表长度的情况，链表循环向右移动 <code>k</code> 次，不就相当于把链表练成环，然后尾节点位置向左移动 <code>k</code> 次吗？下面这个图展示了这个过程。</p>\n<img src=\"/2020/05/rotate-LinkedList-rightly/illustration.png\" title=\"循环移动\">\n<p>对于 <code>k</code> 大于链表长度的情况，先构成环，沿着环一直移动就行。这种方法的问题在于我们需要逆向移动单链表的指针，即每次需要找到单链表前驱的前驱，这是很难做到的，但我们可以先行将单链表进行逆序，然后移动指针，确定最终的头尾节点后再把链表逆序回来即可。</p>\n<p>更进一步的，在环中逆序移动指针 <code>k</code> 次，就相当于顺序移动指针 <code>n-k</code> 次，其中 <code>n</code> 是链表的长度。基于这种想法，我们再加以改进，得到下面的解法。</p>\n<p>先把指针 <code>p</code> 从头向后移动到尾，直到循环移动的次数 <code>k==0</code>。在此过程中，如果 <code>p</code> 指向了空节点，说明到了链表尾部，<code>k</code> 大于链表的长度，这时候我们可以利用循环的特点，对链表的长度减一值进行取模运算，得到的值是我们需要再移动到位置。然后按照上述的方法进行指针移动即可。最终代码如下所示。</p>\n<figure class=\"highlight c\"><figcaption><span>LeetCodeSolution61.c</span><a href=\"/downloads/code/LeetCodeSolution61.c\">view raw</a></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\">ListNode *<span class=\"title\">rotateRight</span><span class=\"params\">(ListNode *head, <span class=\"keyword\">int</span> k)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>{</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (head == <span class=\"literal\">NULL</span> || k &lt;= <span class=\"number\">0</span>)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> head;</span><br><span class=\"line\">    ListNode *pre, *last, *p;</span><br><span class=\"line\">    ListNode tmpNode;</span><br><span class=\"line\">    tmpNode.next = head;</span><br><span class=\"line\">    last = &amp;tmpNode;</span><br><span class=\"line\">    p = head;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> ak = k;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (k &gt; <span class=\"number\">0</span>){</span><br><span class=\"line\">        <span class=\"comment\">// 滑动指针来代替循环</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (p == <span class=\"literal\">NULL</span>) {</span><br><span class=\"line\">            <span class=\"keyword\">int</span> tmp = ak - k;</span><br><span class=\"line\">            pre = &amp;tmpNode;</span><br><span class=\"line\">            p = head;</span><br><span class=\"line\">            k = ak % tmp;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (k == <span class=\"number\">0</span>) <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        }</span><br><span class=\"line\">        pre = p;</span><br><span class=\"line\">        p = p-&gt;next;</span><br><span class=\"line\">        k--;</span><br><span class=\"line\">    }</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (p != <span class=\"literal\">NULL</span>) {</span><br><span class=\"line\">        last = last-&gt;next;</span><br><span class=\"line\">        pre = p;</span><br><span class=\"line\">        p = p-&gt;next;</span><br><span class=\"line\">    }</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (last != &amp;tmpNode) {</span><br><span class=\"line\">        pre-&gt;next = head;</span><br><span class=\"line\">        tmpNode.next = last-&gt;next;</span><br><span class=\"line\">        last-&gt;next = <span class=\"literal\">NULL</span>;</span><br><span class=\"line\">    }</span><br><span class=\"line\">    <span class=\"keyword\">return</span> tmpNode.next;</span><br><span class=\"line\">}</span><br></pre></td></tr></table></figure>\n","tags":[{"name":"算法","slug":"算法","permalink":"https://jonathan1214.github.io/tags/算法/"},{"name":"LeetCode","slug":"LeetCode","permalink":"https://jonathan1214.github.io/tags/LeetCode/"}]},{"title":"LeetCode | 2 两数相加","date":"2020-05-08T05:33:25.000Z","path":"2020/05/add-two-numbers/","text":"题目给定两个非空链表表示两个非负整数，位数按照逆序方式存储，它们的每个节点只存储单个数字。将两数相加并返回一个新的链表。 可以假设除了数字 0 之外，这两个数字都不会以 0 开头。 示例 输入：(2-&gt;4-&gt;3) + (5-&gt;6-&gt;4) 输出：7-&gt;0-&gt;8 原因：342 + 465 = 807 题解这是一道链表题，我们对单链表的节点定义如下： 1234typedef struct NODE&#123; int val; struct NODE *next;&#125; ListNode; 链表是逆序表示数字的，这对我们执行加法操作非常有利，因为在进行加法运算时，我们习惯从低位开始执行，并向高位进行进位。事实上如果它是顺序表示数字的话，我们也该想到将它进行逆序。 正确完成算法的关键在于把进位考虑进去，而且需要注意到在单链表中执行插入操作时，最快的插入位置是从表头插入，但是这样插入我们得到的结果是顺序的，之后再反转单链表即可。 以示例中的例子为例，来看看算法的执行过程。初始化进位值 carry 和待保留值 tmp，两个指针 p1 和 p2 分别指向两个链表的头部，对应的值为 2 和 5；2 + 5 = 7，故 tmp = 7，carry = 0，将 7 插入结果链表得到 7；指针分别向后移动；4 + 6 = 10，故 tmp = 0，carry = 1，将结果 0 插入链表得到 0-&gt;7；指针分别向后移动；3+4+carry=8，故 tmp=8，carry=0，将结果插入链表得到 8-&gt;0-&gt;7；然后对结果链表进行反转得到最终的结果 7-&gt;0-&gt;8。 上述的是一个典型的执行过程，实际上还有一些其他情况需要考虑，如输入两个链表的长度并不一样，计算完时 carry 不为 0。对于前者，我们在上述环节之外在添加两个处理过程即可，如第 17 行和 26 行所示。对于后者，我们只需在反转链表前加一个判断，当进位值不为 0 时，在结果链表的头部插入一个节点即可，如 36 行所示。 最终我们得到的代码如下所示，算法的时间复杂度为 O(m+n)。 LeetCodeSolution2.cview raw123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354ListNode *addTwoNumbers(ListNode *num1, ListNode *num2){ ListNode *theSum, *p = NULL; int tmp = 0; // 保存值 int carry = 0; // 进位 while (num1 &amp;&amp; num2) { tmp = (num1-&gt;val + num2-&gt;val + carry) % 10; carry = (num1-&gt;val + num2-&gt;val + carry) / 10; theSum = (ListNode *)malloc(sizeof(ListNode)); theSum-&gt;val = tmp; theSum-&gt;next = p; p = theSum; num1 = num1-&gt;next; num2 = num2-&gt;next; } // 链表长度不同 while (num1) { tmp = (num1-&gt;val + carry) % 10; carry = (num1-&gt;val + carry) / 10; theSum = (ListNode *)malloc(sizeof(ListNode)); theSum-&gt;val = tmp; theSum-&gt;next = p; p = theSum; num1 = num1-&gt;next; } while (num2) { tmp = (num2-&gt;val + carry) % 10; carry = (num2-&gt;val + carry) / 10; theSum = (ListNode *)malloc(sizeof(ListNode)); theSum-&gt;val = tmp; theSum-&gt;next = p; p = theSum; num2 = num2-&gt;next; } // 最后进位值不为 0 if (carry) { theSum = (ListNode *)malloc(sizeof(ListNode)); theSum-&gt;val = carry; theSum-&gt;next = p; } theSum = reverseLinkedList(theSum);}// 反转链表ListNode *reverseLinkedList(ListNode *head){ ListNode *p = NULL, *q; while (head) { q = head-&gt;next; head-&gt;next = p; p = head; head = q; } return p;}","content":"<h2 id=\"题目\"><a href=\"#题目\" class=\"headerlink\" title=\"题目\"></a>题目</h2><p>给定两个非空链表表示两个非负整数，位数按照逆序方式存储，它们的每个节点只存储单个数字。将两数相加并返回一个新的链表。</p>\n<p>可以假设除了数字 0  之外，这两个数字都不会以 0 开头。</p>\n<h3 id=\"示例\"><a href=\"#示例\" class=\"headerlink\" title=\"示例\"></a>示例</h3><ul>\n<li>输入：(2-&gt;4-&gt;3) + (5-&gt;6-&gt;4)</li>\n<li>输出：7-&gt;0-&gt;8</li>\n<li>原因：342 + 465 = 807<a id=\"more\"></a></li>\n</ul>\n<h2 id=\"题解\"><a href=\"#题解\" class=\"headerlink\" title=\"题解\"></a>题解</h2><p>这是一道链表题，我们对单链表的节点定义如下：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">NODE</span>&#123;</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> val;</span><br><span class=\"line\">    <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">NODE</span> *<span class=\"title\">next</span>;</span></span><br><span class=\"line\">&#125; ListNode;</span><br></pre></td></tr></table></figure>\n<p>链表是逆序表示数字的，这对我们执行加法操作非常有利，因为在进行加法运算时，我们习惯从低位开始执行，并向高位进行进位。事实上如果<span style=\"color:red\">它是顺序表示数字的话，我们也该想到将它进行逆序</span>。</p>\n<p>正确完成算法的关键在于把进位考虑进去，而且需要注意到在单链表中执行插入操作时，最快的插入位置是从表头插入，但是这样插入我们得到的结果是顺序的，之后再反转单链表即可。</p>\n<p>以<a href=\"#示例\">示例</a>中的例子为例，来看看算法的执行过程。初始化进位值 <code>carry</code> 和待保留值 <code>tmp</code>，两个指针 <code>p1</code> 和 <code>p2</code> 分别指向两个链表的头部，对应的值为 2 和 5；<code>2 + 5 = 7</code>，故 <code>tmp = 7</code>，<code>carry = 0</code>，将 7 插入结果链表得到 <code>7</code>；指针分别向后移动；<code>4 + 6 = 10</code>，故 <code>tmp = 0</code>，<code>carry = 1</code>，将结果 0 插入链表得到 <code>0-&gt;7</code>；指针分别向后移动；<code>3+4+carry=8</code>，故 <code>tmp=8</code>，<code>carry=0</code>，将结果插入链表得到 <code>8-&gt;0-&gt;7</code>；然后对结果链表进行反转得到最终的结果 <code>7-&gt;0-&gt;8</code>。</p>\n<p>上述的是一个典型的执行过程，实际上还有一些其他情况需要考虑，如输入两个链表的长度并不一样，计算完时 <code>carry</code> 不为 0。对于前者，我们在上述环节之外在添加两个处理过程即可，如第 17 行和 26 行所示。对于后者，我们只需在反转链表前加一个判断，当进位值不为 0 时，在结果链表的头部插入一个节点即可，如 36 行所示。</p>\n<p>最终我们得到的代码如下所示，算法的时间复杂度为 <code>O(m+n)</code>。</p>\n<figure class=\"highlight c\"><figcaption><span>LeetCodeSolution2.c</span><a href=\"/downloads/code/LeetCodeSolution2.c\">view raw</a></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\">ListNode *<span class=\"title\">addTwoNumbers</span><span class=\"params\">(ListNode *num1, ListNode *num2)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>{</span><br><span class=\"line\">    ListNode *theSum, *p = <span class=\"literal\">NULL</span>;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> tmp = <span class=\"number\">0</span>;   <span class=\"comment\">// 保存值</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> carry = <span class=\"number\">0</span>; <span class=\"comment\">// 进位</span></span><br><span class=\"line\">    <span class=\"keyword\">while</span> (num1 &amp;&amp; num2) {</span><br><span class=\"line\">        tmp = (num1-&gt;val + num2-&gt;val + carry) % <span class=\"number\">10</span>;</span><br><span class=\"line\">        carry = (num1-&gt;val + num2-&gt;val + carry) / <span class=\"number\">10</span>;</span><br><span class=\"line\">        theSum = (ListNode *)<span class=\"built_in\">malloc</span>(<span class=\"keyword\">sizeof</span>(ListNode));</span><br><span class=\"line\">        theSum-&gt;val = tmp;</span><br><span class=\"line\">        theSum-&gt;next = p;</span><br><span class=\"line\">        p = theSum;</span><br><span class=\"line\">        num1 = num1-&gt;next;</span><br><span class=\"line\">        num2 = num2-&gt;next;</span><br><span class=\"line\">    }</span><br><span class=\"line\">    <span class=\"comment\">// 链表长度不同</span></span><br><span class=\"line\">    <span class=\"keyword\">while</span> (num1) {</span><br><span class=\"line\">        tmp = (num1-&gt;val + carry) % <span class=\"number\">10</span>;</span><br><span class=\"line\">        carry = (num1-&gt;val + carry) / <span class=\"number\">10</span>;</span><br><span class=\"line\">        theSum = (ListNode *)<span class=\"built_in\">malloc</span>(<span class=\"keyword\">sizeof</span>(ListNode));</span><br><span class=\"line\">        theSum-&gt;val = tmp;</span><br><span class=\"line\">        theSum-&gt;next = p;</span><br><span class=\"line\">        p = theSum;</span><br><span class=\"line\">        num1 = num1-&gt;next;</span><br><span class=\"line\">    }</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (num2) {</span><br><span class=\"line\">        tmp = (num2-&gt;val + carry) % <span class=\"number\">10</span>;</span><br><span class=\"line\">        carry = (num2-&gt;val + carry) / <span class=\"number\">10</span>;</span><br><span class=\"line\">        theSum = (ListNode *)<span class=\"built_in\">malloc</span>(<span class=\"keyword\">sizeof</span>(ListNode));</span><br><span class=\"line\">        theSum-&gt;val = tmp;</span><br><span class=\"line\">        theSum-&gt;next = p;</span><br><span class=\"line\">        p = theSum;</span><br><span class=\"line\">        num2 = num2-&gt;next;</span><br><span class=\"line\">    }</span><br><span class=\"line\">    <span class=\"comment\">// 最后进位值不为 0</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (carry) {</span><br><span class=\"line\">        theSum = (ListNode *)<span class=\"built_in\">malloc</span>(<span class=\"keyword\">sizeof</span>(ListNode));</span><br><span class=\"line\">        theSum-&gt;val = carry;</span><br><span class=\"line\">        theSum-&gt;next = p;</span><br><span class=\"line\">    }</span><br><span class=\"line\">    theSum = reverseLinkedList(theSum);</span><br><span class=\"line\">}</span><br><span class=\"line\"><span class=\"comment\">// 反转链表</span></span><br><span class=\"line\"><span class=\"function\">ListNode *<span class=\"title\">reverseLinkedList</span><span class=\"params\">(ListNode *head)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>{</span><br><span class=\"line\">    ListNode *p = <span class=\"literal\">NULL</span>, *q;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (head) {</span><br><span class=\"line\">        q = head-&gt;next;</span><br><span class=\"line\">        head-&gt;next = p;</span><br><span class=\"line\">        p = head;</span><br><span class=\"line\">        head = q;</span><br><span class=\"line\">    }</span><br><span class=\"line\">    <span class=\"keyword\">return</span> p;</span><br><span class=\"line\">}</span><br></pre></td></tr></table></figure>","tags":[{"name":"算法","slug":"算法","permalink":"https://jonathan1214.github.io/tags/算法/"},{"name":"链表","slug":"链表","permalink":"https://jonathan1214.github.io/tags/链表/"},{"name":"LeetCode","slug":"LeetCode","permalink":"https://jonathan1214.github.io/tags/LeetCode/"}]},{"title":"LeetCode | 11 盛最多水的容器","date":"2020-05-07T06:36:57.000Z","path":"2020/05/max-area/","text":"题目给定 n 个非负整数 a1, a2, ..., an，每个数代表坐标中的一个点 (i, ai)。画 n 条垂直线，使得垂直线 i 的两个端点分别为 (i, ai) 和 (i, 0)。找出其中的两条线，使得它们与 x 轴共同构成的容器可以容纳最多的水。 注意：不能倾斜容器，n 至少是 2。 题解如果使用暴力算法，那么时间复杂度为 $O(n^2)$。如果使用双指针法，那么时间复杂度降为 $O(n)$。如下所示。 初始化两个指针 first 和 last 分别指向数组头和尾； 当 last 指向的值较小时，计算一个面积，并决定是否保留，然后 last-- ； 当 first 指向的值较小时，计算一个面积，并决定是否保留，然后 first++； 从第 2 步重新执行，直到 first == last，返回最大值。 1234567891011121314151617int maxArea(int *height, int heightSize)&#123; int res = 0, aux = 0; int first = 0, last = heightSize - 1; while (first &lt; last) &#123; if (height[first] &lt; height[last]) &#123; aux = height[first] * (last - first); res = aux &gt; res ? aux : res; first++; &#125; else &#123; aux = height[last] * (last - first); res = aux &gt; res ? aux : res; last--; &#125; &#125; return res;&#125; 我们还可以对上面的算法进行一些改进。在上面的算法中，我们每次将指针挪动一个位置（向左或向右），然后计算面积并进行比较。这个面积的计算是否每次都有必要呢？其实并不必要，每次挪动指针后，所求区域的长度都会减小，只有区域的宽度增加我们才有重新计算面积的必要，即指针新指向的值大于它原来指向的值，我们才需要再次计算面积。基于此，我们可以对算法进行改进，如下所示。 LeetCodeSolution11.cview raw12345678910111213141516171819int maxArea(int *height, int heightSize){ int res = 0, aux = 0; int first = 0, last = heightSize - 1; while (first &lt; last) { aux = (last - first) * (height[first] &lt; height[last] ? height[first] : height[last]); res = aux &gt; res ? aux : res; if (height[first] &lt; height[last]) while (++first &lt; max &amp;&amp; height[min] &lt;= height[min-1]) // 新指针指向的值不大于原来的值 继续减小指针即可 continue; else while (--last &gt; first &amp;&amp; height[last] &lt;= height[last+1]) // 新指针指向的值不大于原来的值 继续减小指针即可 continue; } return res;}","content":"<h2 id=\"题目\"><a href=\"#题目\" class=\"headerlink\" title=\"题目\"></a>题目</h2><p>给定 <code>n</code> 个非负整数 <code>a1, a2, ..., an</code>，每个数代表坐标中的一个点 <code>(i, ai)</code>。画 <code>n</code> 条垂直线，使得垂直线 <code>i</code> 的两个端点分别为 <code>(i, ai)</code> 和 <code>(i, 0)</code>。找出其中的两条线，使得它们与 <code>x</code> 轴共同构成的容器可以容纳最多的水。</p>\n<p>注意：不能倾斜容器，<code>n</code> 至少是 2。<br><a id=\"more\"></a></p>\n<h2 id=\"题解\"><a href=\"#题解\" class=\"headerlink\" title=\"题解\"></a>题解</h2><p>如果使用暴力算法，那么时间复杂度为 $O(n^2)$。如果使用双指针法，那么时间复杂度降为 $O(n)$。如下所示。</p>\n<ol>\n<li>初始化两个指针 <code>first</code> 和 <code>last</code> 分别指向数组头和尾；</li>\n<li>当 <code>last</code> 指向的值较小时，计算一个面积，并决定是否保留，然后 <code>last--</code> ；</li>\n<li>当 <code>first</code> 指向的值较小时，计算一个面积，并决定是否保留，然后 <code>first++</code>；</li>\n<li>从第 2 步重新执行，直到 <code>first == last</code>，返回最大值。</li>\n</ol>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">maxArea</span><span class=\"params\">(<span class=\"keyword\">int</span> *height, <span class=\"keyword\">int</span> heightSize)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> res = <span class=\"number\">0</span>, aux = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> first = <span class=\"number\">0</span>, last = heightSize - <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (first &lt; last) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (height[first] &lt; height[last]) &#123;</span><br><span class=\"line\">            aux = height[first] * (last - first);</span><br><span class=\"line\">            res = aux &gt; res ? aux : res;</span><br><span class=\"line\">            first++;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            aux = height[last] * (last - first);</span><br><span class=\"line\">            res = aux &gt; res ? aux : res;</span><br><span class=\"line\">            last--;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> res;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>我们还可以对上面的算法进行一些改进。在上面的算法中，我们每次将指针挪动一个位置（向左或向右），然后计算面积并进行比较。这个面积的计算是否每次都有必要呢？其实并不必要，每次挪动指针后，所求区域的长度都会减小，只有<strong>区域的宽度增加我们才有重新计算面积的必要</strong>，即指针新指向的值大于它原来指向的值，我们才需要再次计算面积。基于此，我们可以对算法进行改进，如下所示。</p>\n<figure class=\"highlight c\"><figcaption><span>LeetCodeSolution11.c</span><a href=\"/downloads/code/LeetCodeSolution11.c\">view raw</a></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">maxArea</span><span class=\"params\">(<span class=\"keyword\">int</span> *height, <span class=\"keyword\">int</span> heightSize)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>{</span><br><span class=\"line\">    <span class=\"keyword\">int</span> res = <span class=\"number\">0</span>, aux = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> first = <span class=\"number\">0</span>, last = heightSize - <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (first &lt; last) {</span><br><span class=\"line\">        aux = (last - first) * </span><br><span class=\"line\">            (height[first] &lt; height[last] ? height[first] : height[last]);</span><br><span class=\"line\">        res = aux &gt; res ? aux : res;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (height[first] &lt; height[last])</span><br><span class=\"line\">            <span class=\"keyword\">while</span> (++first &lt; max &amp;&amp; height[min] &lt;= height[min<span class=\"number\">-1</span>])</span><br><span class=\"line\">                <span class=\"comment\">// 新指针指向的值不大于原来的值 继续减小指针即可</span></span><br><span class=\"line\">                <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">        <span class=\"keyword\">else</span></span><br><span class=\"line\">            <span class=\"keyword\">while</span> (--last &gt; first &amp;&amp; height[last] &lt;= height[last+<span class=\"number\">1</span>])</span><br><span class=\"line\">                <span class=\"comment\">// 新指针指向的值不大于原来的值 继续减小指针即可</span></span><br><span class=\"line\">                <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">    }</span><br><span class=\"line\">    <span class=\"keyword\">return</span> res;</span><br><span class=\"line\">}</span><br></pre></td></tr></table></figure>","tags":[{"name":"算法","slug":"算法","permalink":"https://jonathan1214.github.io/tags/算法/"},{"name":"LeetCode","slug":"LeetCode","permalink":"https://jonathan1214.github.io/tags/LeetCode/"}]},{"title":"LeetCode | 4 两个排序数组的中位数","date":"2020-05-06T10:01:40.000Z","path":"2020/05/find-median-sorted-arrays/","text":"题目给定两个大小为 m 和 n 的有序数组 nums1 和 nums2。找出这两个有序数组的中位数。要求算法的时间复杂度为O(log(m+n))。 示例 nums1 = [1, 3]，nums2 = [2]，中位数是 2.0； nums1 = [1, 2]，nums2 = [3, 4]，中位数是 2.5； 题解整体上是一个分而治之的思想，将问题分解，使用递归可以很方便的完成。这个问题是『寻找两个有序数组中的第 k 大元素』问题的特殊形式，我们直接实现寻址第 k 大元素的函数 find_kth() 即可，然后在 findMedianSortedArrays() 中调用它即可。 我们使用递归方式实现 find_kth()，对于递归算法，我们要注意递归终止条件。首先要确保第一个参数数组的长度是较短的， 较短数组 a 的长度（未搜索区域长度）变为 0，返回 b 中第 k 个元素； 待寻找的序数 k = 1，返回a 和 b 的第一个元素中的较小者。 然后我们需要确定每个数组的搜索长度。对于较小数组 a，搜索长度为数组长和 k/2 的较大者，余下的长度则为数组 b 待搜索的长度。 代码如下： LeetCodeSolution4.cview raw123456789101112131415161718192021222324252627282930313233// 辅助函数 选择两个有序数组中第 k 大的数int find_kth(int *a, int alen, int *b, int blen, int k){ // 确保 alen &lt; blen if (alen &gt; blen) return find_kth(b, blen, a, alen, k); if (alen == 0) return b[k-1]; if (k == 1) return a[0] &lt; b[0] ? a[0] : b[0]; int ia = alen &gt; k/2 ? k/2 : alen; int ib = k - ia; if (b[ib-1] &gt; a[ia-1]) return find_kth(a+ia, alen-ia, b, blen, k-ia); else if (b[ib-1] &lt; a[ia-1]) return find_kth(a, alen, b+ib, blen-ib, k-ib); else // 注意这种情况 return a[ia-1];}// 找出两个有序数组中的中位数double findMedianSortedArrays(int *nums1, int nums1Size, int *nums2, int nums2Size){ int mid = nums2Size + (nums1Size - nums2Size) / 2; // if ((nums1Size &amp; 0x1) ^ (nums2Size &amp; 0x1)) // 和为奇数 if ((nums1Size+nums2Size) &amp; 0x1) return find_kth(nums1, nums1Size, nums2, nums2Size, mid+1); else // 和为偶数 return (find_kth(nums1, nums1Size, nums2, nums2Size, mid) + find_kth(nums1, nums1Size, nums2, nums2Size, mid+1)) / 2.0;}","content":"<h2 id=\"题目\"><a href=\"#题目\" class=\"headerlink\" title=\"题目\"></a>题目</h2><p>给定两个大小为 <code>m</code> 和 <code>n</code> 的有序数组 <code>nums1</code> 和 <code>nums2</code>。找出这两个有序数组的中位数。要求算法的时间复杂度为<code>O(log(m+n))</code>。</p>\n<h3 id=\"示例\"><a href=\"#示例\" class=\"headerlink\" title=\"示例\"></a>示例</h3><ul>\n<li><code>nums1 = [1, 3]</code>，<code>nums2 = [2]</code>，中位数是 2.0；</li>\n<li><code>nums1 = [1, 2]</code>，<code>nums2 = [3, 4]</code>，中位数是 2.5；<a id=\"more\"></a>\n</li>\n</ul>\n<h2 id=\"题解\"><a href=\"#题解\" class=\"headerlink\" title=\"题解\"></a>题解</h2><p>整体上是一个分而治之的思想，将问题分解，使用递归可以很方便的完成。这个问题是『寻找两个有序数组中的第 k 大元素』问题的特殊形式，我们直接实现寻址第 k 大元素的函数  <code>find_kth()</code> 即可，然后在 <code>findMedianSortedArrays()</code> 中调用它即可。</p>\n<p>我们使用递归方式实现 <code>find_kth()</code>，对于递归算法，我们要注意递归终止条件。首先要确保第一个参数数组的长度是较短的，</p>\n<ul>\n<li>较短数组 <code>a</code> 的长度（未搜索区域长度）变为 0，返回 <code>b</code> 中第 <code>k</code> 个元素；</li>\n<li>待寻找的序数 <code>k = 1</code>，返回<code>a</code> 和 <code>b</code> 的第一个元素中的较小者。</li>\n</ul>\n<p>然后我们需要确定每个数组的搜索长度。对于较小数组 <code>a</code>，搜索长度为数组长和 <code>k/2</code> 的较大者，余下的长度则为数组 <code>b</code> 待搜索的长度。</p>\n<p>代码如下：</p>\n<figure class=\"highlight c\"><figcaption><span>LeetCodeSolution4.c</span><a href=\"/downloads/code/LeetCodeSolution4.c\">view raw</a></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 辅助函数 选择两个有序数组中第 k 大的数</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">find_kth</span><span class=\"params\">(<span class=\"keyword\">int</span> *a, <span class=\"keyword\">int</span> alen, <span class=\"keyword\">int</span> *b, <span class=\"keyword\">int</span> blen, <span class=\"keyword\">int</span> k)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>{</span><br><span class=\"line\">    <span class=\"comment\">// 确保 alen &lt; blen</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (alen &gt; blen)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> find_kth(b, blen, a, alen, k);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (alen == <span class=\"number\">0</span>)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> b[k<span class=\"number\">-1</span>];</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (k == <span class=\"number\">1</span>)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> a[<span class=\"number\">0</span>] &lt; b[<span class=\"number\">0</span>] ? a[<span class=\"number\">0</span>] : b[<span class=\"number\">0</span>];</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">int</span> ia = alen &gt; k/<span class=\"number\">2</span> ? k/<span class=\"number\">2</span> : alen;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> ib = k - ia;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (b[ib<span class=\"number\">-1</span>] &gt; a[ia<span class=\"number\">-1</span>])</span><br><span class=\"line\">        <span class=\"keyword\">return</span> find_kth(a+ia, alen-ia, b, blen, k-ia);</span><br><span class=\"line\">    <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (b[ib<span class=\"number\">-1</span>] &lt; a[ia<span class=\"number\">-1</span>])</span><br><span class=\"line\">        <span class=\"keyword\">return</span> find_kth(a, alen, b+ib, blen-ib, k-ib);</span><br><span class=\"line\">    <span class=\"keyword\">else</span> <span class=\"comment\">// 注意这种情况</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> a[ia<span class=\"number\">-1</span>];</span><br><span class=\"line\">}</span><br><span class=\"line\"><span class=\"comment\">// 找出两个有序数组中的中位数</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">double</span> <span class=\"title\">findMedianSortedArrays</span><span class=\"params\">(<span class=\"keyword\">int</span> *nums1, <span class=\"keyword\">int</span> nums1Size,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">                        <span class=\"keyword\">int</span> *nums2, <span class=\"keyword\">int</span> nums2Size)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>{</span><br><span class=\"line\">    <span class=\"keyword\">int</span> mid = nums2Size + (nums1Size - nums2Size) / <span class=\"number\">2</span>;</span><br><span class=\"line\">    <span class=\"comment\">// if ((nums1Size &amp; 0x1) ^ (nums2Size &amp; 0x1)) // 和为奇数</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> ((nums1Size+nums2Size) &amp; <span class=\"number\">0x1</span>)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> find_kth(nums1, nums1Size, nums2, nums2Size, mid+<span class=\"number\">1</span>);</span><br><span class=\"line\">    <span class=\"keyword\">else</span>    <span class=\"comment\">// 和为偶数</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> (find_kth(nums1, nums1Size, nums2, nums2Size, mid)</span><br><span class=\"line\">                    + find_kth(nums1, nums1Size, nums2, nums2Size, mid+<span class=\"number\">1</span>)) / <span class=\"number\">2.0</span>;</span><br><span class=\"line\">}</span><br></pre></td></tr></table></figure>","tags":[{"name":"算法","slug":"算法","permalink":"https://jonathan1214.github.io/tags/算法/"},{"name":"LeetCode","slug":"LeetCode","permalink":"https://jonathan1214.github.io/tags/LeetCode/"}]},{"title":"LeetCode | 24 两两交换链表中的节点","date":"2020-05-05T12:25:38.000Z","path":"2020/05/swap-pairs-in-LinkdedList/","text":"题目给定一个单链表，两两交换其中相邻的节点，并返回交换后的链表。 示例给定 1-&gt;2-&gt;3-&gt;4，返回 2-&gt;1-&gt;4-&gt;3。 说明： 算法只能使用常数的额外空间； 不能只是单纯的交换节点内部的值，而是需要实际的进行节点交换。 题解这个题目非常并不难，简单叙述下思路如下： 链表为空或只有一个节点时时直接返回头节点； p1 指向第一个节点，p2 指向第二个节点，进行交换；交换之后 p2 成为头节点，更新头节点；p1 指向第二个节点； 现在 p1 成为第二个 pair 的头节点； 当 p1-&gt;next和 p1-&gt;next-&gt;next 不为空时执行： 交换 p1-&gt;next和 p1-&gt;next-&gt;next p1 = p1-&gt;next-&gt;next 代码如下： LeetCodeSolution24.cview raw1234567891011121314151617181920212223242526272829303132// 链表节点定义typedef struct ListNode{ int val; struct ListNode *next;} ListNode;ListNode *swapPairs(ListNode *head){ if (head == NULL || head-&gt;next == NULL) return head; ListNode *p1, *p2; p1 = head; p2 = p1-&gt;next; // 第一次交换 p1-&gt;next = p2-&gt;next; p2-&gt;next = p1; head = p2; // 其他 while (p1-&gt;next &amp;&amp; p1-&gt;next-&gt;next) { exch(p1, p1-&gt;next); p1 = p1-&gt;next-&gt;next; } return head;}void exch(ListNode *p1, ListNode *p2){ p1-&gt;next = p2-&gt;next; p2-&gt;next = p2-&gt;next-&gt;next; p1-&gt;next-&gt;next = p2;}","content":"<h2 id=\"题目\"><a href=\"#题目\" class=\"headerlink\" title=\"题目\"></a>题目</h2><p>给定一个单链表，两两交换其中相邻的节点，并返回交换后的链表。</p>\n<h3 id=\"示例\"><a href=\"#示例\" class=\"headerlink\" title=\"示例\"></a>示例</h3><p>给定 <code>1-&gt;2-&gt;3-&gt;4</code>，返回 <code>2-&gt;1-&gt;4-&gt;3</code>。<a id=\"more\"></a></p>\n<p>说明：</p>\n<ul>\n<li>算法只能使用常数的额外空间；</li>\n<li>不能只是单纯的交换节点内部的值，而是需要实际的进行节点交换。</li>\n</ul>\n<h2 id=\"题解\"><a href=\"#题解\" class=\"headerlink\" title=\"题解\"></a>题解</h2><p>这个题目非常并不难，简单叙述下思路如下：</p>\n<ol>\n<li>链表为空或只有一个节点时时直接返回头节点；</li>\n<li><code>p1</code> 指向第一个节点，<code>p2</code> 指向第二个节点，进行交换；交换之后 <code>p2</code> 成为头节点，更新头节点；<code>p1</code> 指向第二个节点；</li>\n<li>现在 <code>p1</code> 成为第二个 <code>pair</code> 的头节点；</li>\n<li>当 <code>p1-&gt;next</code>和 <code>p1-&gt;next-&gt;next</code> 不为空时执行：<ul>\n<li>交换 <code>p1-&gt;next</code>和 <code>p1-&gt;next-&gt;next</code></li>\n<li><code>p1 = p1-&gt;next-&gt;next</code></li>\n</ul>\n</li>\n</ol>\n<p>代码如下：</p>\n<figure class=\"highlight c\"><figcaption><span>LeetCodeSolution24.c</span><a href=\"/downloads/code/LeetCodeSolution24.c\">view raw</a></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 链表节点定义</span></span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">ListNode</span>{</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> val;</span><br><span class=\"line\">    <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">ListNode</span> *<span class=\"title\">next</span>;</span></span><br><span class=\"line\">} ListNode;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\">ListNode *<span class=\"title\">swapPairs</span><span class=\"params\">(ListNode *head)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>{</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (head == <span class=\"literal\">NULL</span> || head-&gt;next == <span class=\"literal\">NULL</span>)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> head;</span><br><span class=\"line\">    ListNode *p1, *p2;</span><br><span class=\"line\">    p1 = head;</span><br><span class=\"line\">    p2 = p1-&gt;next;</span><br><span class=\"line\">    <span class=\"comment\">// 第一次交换</span></span><br><span class=\"line\">    p1-&gt;next = p2-&gt;next;</span><br><span class=\"line\">    p2-&gt;next = p1;</span><br><span class=\"line\">    head = p2;</span><br><span class=\"line\">    <span class=\"comment\">// 其他</span></span><br><span class=\"line\">    <span class=\"keyword\">while</span> (p1-&gt;next &amp;&amp; p1-&gt;next-&gt;next)</span><br><span class=\"line\">    {</span><br><span class=\"line\">        exch(p1, p1-&gt;next);</span><br><span class=\"line\">        p1 = p1-&gt;next-&gt;next;</span><br><span class=\"line\">    }</span><br><span class=\"line\">    <span class=\"keyword\">return</span> head;</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">exch</span><span class=\"params\">(ListNode *p1, ListNode *p2)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>{</span><br><span class=\"line\">    p1-&gt;next = p2-&gt;next;</span><br><span class=\"line\">    p2-&gt;next = p2-&gt;next-&gt;next;</span><br><span class=\"line\">    p1-&gt;next-&gt;next = p2;</span><br><span class=\"line\">}</span><br></pre></td></tr></table></figure>","tags":[{"name":"算法","slug":"算法","permalink":"https://jonathan1214.github.io/tags/算法/"},{"name":"C/C++","slug":"C-C","permalink":"https://jonathan1214.github.io/tags/C-C/"},{"name":"链表","slug":"链表","permalink":"https://jonathan1214.github.io/tags/链表/"},{"name":"LeetCode","slug":"LeetCode","permalink":"https://jonathan1214.github.io/tags/LeetCode/"}]},{"title":"LeetCode | 19 删除链表的倒数第N个节点","date":"2020-05-04T10:27:01.000Z","path":"2020/05/delete-numN-node-at-reverse-order-in-list/","text":"题目给定一个链表，删除链表的倒数第 n 个节点，并返回链表的头结点。 示例给定一个链表：1-&gt;2&gt;3-&gt;4-&gt;5，和 n=2。当删除倒数第二个节点后，链表变为 1-&gt;2&gt;3-&gt;5。 说明给定的 n 保证是有效的。 解题这个题使用双指针即可很快解决： 初始化两个指针 p1 和 p2 均指向链表的头部 p2 不动，p1 指针向后滑动 n 个位置 p1 和 p2 一起向后滑动，当 p1 指向节点的下一个节点为空时，p2 指向的节点即为待删除节点的前一个节点，执行删除操作。 返回头指针 使用 C 语言实现如下： LeetCodeSolution19.cview raw12345678910111213141516171819202122232425// 链表节点定义typedef struct ListNode { int val; struct ListNode *next;} ListNode;ListNode *delete(ListNode *head, int n) { if (head == NULL) return; ListNode *p1 = head, *p2 = head; // 滑动指针 p1 for (; n &gt; 0; n--) p1 = p1-&gt;next; // 同时滑动 p1 和 p2 直到 p1 指向最后一个节点 while (p1-&gt;next != NULL) { p1 = p1-&gt;next; p2 = p2-&gt;next; } // 删除节点 ListNode *tmp = p2-&gt;next; p2-&gt;next = tmp-&gt;next; if (tmp == head) head = tmp-&gt;next; free(tmp); // 释放 return head;}","content":"<h2 id=\"题目\"><a href=\"#题目\" class=\"headerlink\" title=\"题目\"></a>题目</h2><p>给定一个链表，删除链表的倒数第 n 个节点，并返回链表的头结点。<br><a id=\"more\"></a></p>\n<h3 id=\"示例\"><a href=\"#示例\" class=\"headerlink\" title=\"示例\"></a>示例</h3><p>给定一个链表：<code>1-&gt;2&gt;3-&gt;4-&gt;5</code>，和 <code>n=2</code>。当删除倒数第二个节点后，链表变为 <code>1-&gt;2&gt;3-&gt;5</code>。</p>\n<h3 id=\"说明\"><a href=\"#说明\" class=\"headerlink\" title=\"说明\"></a>说明</h3><p>给定的 <code>n</code> 保证是有效的。</p>\n<h2 id=\"解题\"><a href=\"#解题\" class=\"headerlink\" title=\"解题\"></a>解题</h2><p>这个题使用双指针即可很快解决：</p>\n<ol>\n<li>初始化两个指针 <code>p1</code> 和 <code>p2</code> 均指向链表的头部</li>\n<li><code>p2</code> 不动，<code>p1</code> 指针向后滑动 <code>n</code> 个位置</li>\n<li><code>p1</code> 和 <code>p2</code> 一起向后滑动，当 <code>p1</code> 指向节点的下一个节点为空时，<code>p2</code> 指向的节点即为待删除节点的前一个节点，执行删除操作。</li>\n<li>返回头指针</li>\n</ol>\n<img src=\"/2020/05/delete-numN-node-at-reverse-order-in-list/illustration.png\" title=\"算法执行图示\">\n<p>使用 C 语言实现如下：</p>\n<figure class=\"highlight c\"><figcaption><span>LeetCodeSolution19.c</span><a href=\"/downloads/code/LeetCodeSolution19.c\">view raw</a></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 链表节点定义</span></span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">ListNode</span> {</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> val;</span><br><span class=\"line\">    <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">ListNode</span> *<span class=\"title\">next</span>;</span></span><br><span class=\"line\">} ListNode;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\">ListNode *<span class=\"title\">delete</span><span class=\"params\">(ListNode *head, <span class=\"keyword\">int</span> n)</span> </span>{</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (head == <span class=\"literal\">NULL</span>) <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    ListNode *p1 = head, *p2 = head;</span><br><span class=\"line\">    <span class=\"comment\">// 滑动指针 p1</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (; n &gt; <span class=\"number\">0</span>; n--)</span><br><span class=\"line\">        p1 = p1-&gt;next;</span><br><span class=\"line\">    <span class=\"comment\">// 同时滑动 p1 和 p2 直到 p1 指向最后一个节点</span></span><br><span class=\"line\">    <span class=\"keyword\">while</span> (p1-&gt;next != <span class=\"literal\">NULL</span>) {</span><br><span class=\"line\">        p1 = p1-&gt;next;</span><br><span class=\"line\">        p2 = p2-&gt;next;</span><br><span class=\"line\">    }</span><br><span class=\"line\">    <span class=\"comment\">// 删除节点</span></span><br><span class=\"line\">    ListNode *tmp = p2-&gt;next;</span><br><span class=\"line\">    p2-&gt;next = tmp-&gt;next;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (tmp == head)</span><br><span class=\"line\">        head = tmp-&gt;next;</span><br><span class=\"line\">    <span class=\"built_in\">free</span>(tmp); <span class=\"comment\">// 释放</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> head;</span><br><span class=\"line\">}</span><br></pre></td></tr></table></figure>","tags":[{"name":"算法","slug":"算法","permalink":"https://jonathan1214.github.io/tags/算法/"},{"name":"链表","slug":"链表","permalink":"https://jonathan1214.github.io/tags/链表/"},{"name":"LeetCode","slug":"LeetCode","permalink":"https://jonathan1214.github.io/tags/LeetCode/"}]},{"title":"呓语——一次申请的记录","date":"2020-04-22T13:58:15.000Z","path":"2020/04/a-whisper-story-of-an-application/","text":" Hey, password is required here.","content":"<div class=\"hbe hbe-container\" id=\"hexo-blog-encrypt\" data-wpm=\"Oh, this is an invalid password. Check and try again, please.\" data-whm=\"OOPS, these decrypted content may changed, but you can still have a look.\">\n  <script id=\"hbeData\" type=\"hbeData\" data-hmacdigest=\"a9bbf0250cfa04c32e8f00d586e9713aa8c897809ec2f89216336d302ef32382\"></script>\n  <div class=\"hbe hbe-content\">\n    <div class=\"hbe hbe-input hbe-input-default\">\n      <input class=\"hbe hbe-input-field hbe-input-field-default\" type=\"password\" id=\"hbePass\">\n      <label class=\"hbe hbe-input-label hbe-input-label-default\" for=\"hbePass\">\n        <span class=\"hbe hbe-input-label-content hbe-input-label-content-default\">Hey, password is required here.</span>\n      </label>\n    </div>\n  </div>\n</div>\n<script data-pjax src=\"/lib/hbe.js\"></script><link href=\"/css/hbe.style.css\" rel=\"stylesheet\" type=\"text/css\">","tags":[{"name":"记录","slug":"记录","permalink":"https://jonathan1214.github.io/tags/记录/"}]},{"title":"Notes of Satellite Communications","date":"2020-04-18T10:29:25.000Z","path":"2020/04/stallite-communications-notes/","text":"卫星通信课的笔记，持续更新。 1. Overview of Satellite Systems1.1. Frequency Allocations频率资源非常紧张，国际上由 ITU ( International TelecommunicationUnion ) 同一管理分配。在卫星通信中，为了更好地对频率资源进行管理，将世界分成三个区域。 Region 1: Europe, Africa, what was formerly the Soviet Union, and Mongolia Region 2: North and South America and Greenland Region 3: Asia (excluding region 1 areas), Australia, and the southwest Pacific 在区域内，全频带可使用。这些频率资源基本上是用于提供下面这些服务，当然它们也可以细分出很多内容，如 Mobile satellite services 中包含了 land mobile，maritime mobile 和 aeronautical mobile。 Fixed satellite service (FSS) Broadcasting satellite service (BSS) Mobile satellite services Navigational satellite services Meteorological satellite services 下表展示了常用的频带和它们的名称，这些都是常识。 还有一种 ITU 的频段划分方式，不在卫星通信中使用： 2. Orbits and Launching Methods","content":"<p>卫星通信课的笔记，持续更新。<br><a id=\"more\"></a></p>\n<h2 id=\"1-Overview-of-Satellite-Systems\"><a href=\"#1-Overview-of-Satellite-Systems\" class=\"headerlink\" title=\"1. Overview of Satellite Systems\"></a>1. Overview of Satellite Systems</h2><h3 id=\"1-1-Frequency-Allocations\"><a href=\"#1-1-Frequency-Allocations\" class=\"headerlink\" title=\"1.1. Frequency Allocations\"></a>1.1. Frequency Allocations</h3><p>频率资源非常紧张，国际上由 ITU ( International Telecommunication<br>Union ) 同一管理分配。在卫星通信中，为了更好地对频率资源进行管理，将世界分成三个区域。</p>\n<ul>\n<li>Region 1: Europe, Africa, what was formerly the Soviet Union, and Mongolia</li>\n<li>Region 2: North and South America and Greenland</li>\n<li>Region 3: Asia (excluding region 1 areas), Australia, and the southwest Pacific</li>\n</ul>\n<p>在区域内，全频带可使用。这些频率资源基本上是用于提供下面这些服务，当然它们也可以细分出很多内容，如 Mobile satellite services 中包含了 land mobile，maritime mobile 和 aeronautical mobile。</p>\n<ul>\n<li>Fixed satellite service (FSS)</li>\n<li>Broadcasting satellite service (BSS)</li>\n<li>Mobile satellite services</li>\n<li>Navigational satellite services</li>\n<li>Meteorological satellite services</li>\n</ul>\n<p>下表展示了常用的频带和它们的名称，这些都是常识。</p>\n<img src=\"/2020/04/stallite-communications-notes/frequency_band_designations.png\" title=\"Frequency Band Designations\">\n<p>还有一种 ITU 的频段划分方式，不在卫星通信中使用：</p>\n<img src=\"/2020/04/stallite-communications-notes/itu_frequency_band_designations.png\" title=\"ITU Frequency Band Designations\">\n<h2 id=\"2-Orbits-and-Launching-Methods\"><a href=\"#2-Orbits-and-Launching-Methods\" class=\"headerlink\" title=\"2. Orbits and Launching Methods\"></a>2. Orbits and Launching Methods</h2>","tags":[{"name":"notes","slug":"notes","permalink":"https://jonathan1214.github.io/tags/notes/"}]},{"title":"无线自组织网络路由协议","date":"2020-04-15T12:12:20.000Z","path":"2020/04/adhoc-routing-protocol/","text":"路，径之大者。由，从也。 路由，即建立、选择与遵循路径。在网络中，路由就是分组从源节点到目的节点时，决定端到端路径的网络范围的进程。路由工作在 OSI 参考模型的第三层——网络层，它解决了信息传递时的路径选择问题。 1. 路由协议引论路由回答了从出发点到达终点如何走的问题，以及如何走消耗的资源最少。 1.1. 传统路由在详细介绍 Ad-Hoc 中的路由协议之前，我们需要了解下传统路由，需要注意的是它与 Ad-Hoc 中的有所不同，这是由于 Ad-Hoc 的特点与传统网络有很大区别。在传统路由中，主机与路由器是分开的，主机需要通过路由器连接到网络中，路由工作由路由器实现。具体来看传统路由的建立过程如下： 发送端发出指令经路由器转发到达接收端； 路由器收到数据包后，解析目的节点，随后根据路由表寻找下一跳路由器节点； 一旦连接主机的路由器无法工作，将导致链路中段。 1.2. Ad-Hoc 网络中的路由Ad-Hoc 网络有其自身无中心等特点，导致其路由有如下特点： 网络中的终端兼有主机和路由两种功能，网络拓扑改变仍然额可以组网； 每个终端都存有自己的路由表； 网络中的单个链路中断或终端的变化不会对整体造成影响； Ad-Hoc 网络路由也面临着一些问题： 动态变化的网络拓扑，这将导致网络中路由表的频繁更新，常规的路由协议无法处理这种情况； 单向信道的存在，这点与常规路由路由协议需要处理的问题大不相同，它会造成认知的单向性、路由的单向性和信息不可达； 传输带宽有限； 无线移动终端的局限性。 1.3. 路由的分类在深入了解路由协议之前，下面先来对路由协议进行分类。我们需要关注的是分类的原则而不是分类的结果，关注这些原则对我们的理解大有好处，也许现在我们不太理解为何如此划分，当对它有一定的了解之后，回过头再来看就会理解的。 按照路由协议依据 基于链路状态的路由协议 基于距离矢量的路由协议 按照路由建立的方式 先应式路由协议 按需路由协议 按照网络逻辑结构 平面结构的路由协议 分层结构的路由协议 按照路由协议适用的网络规模 中、小规模自组网的路由协议 大规模网络的路由协议 其他类型 主要是专门用途的路由协议，如基于地理信息的路由协议 LAR 和 GPSR 等。 按照这种划分，我们在这里只介绍按照第一种划分方式（按照路由协议依据）和第二种划分方式（按照路由建立的方式）下的一些典型的路由协议。 2. 链路状态与距离矢量路由协议2.1. 链路状态路由协议该协议下，基于链路状态，汇总区域内所有的路由器的链路状态信息。根据状态信息生成网络拓扑结构，每一个路由器再根据拓扑结构计算出路由。对链路状态路由协议，我们通过一个典型的协议来研究，它就是 OSPF（开放式最短路径优先）协议。 OSPF 协议是一种典型的链路状态路由协议，基于 IP，采用 Dijkstra 算法 计算节点间的最短路径，它将链路状态广播数据包传送给区域内的所有路由器，区域内路由器共同维护同一张完整的网络图，保存在数据库中，每条记录都代表网络的一条从当前节点到其他节点的最短路径。 OSPF 工作分为如下三个过程：邻居表的建立，拓扑表的建立，计算路由。 邻居表的建立一台新加入 OSPF 区域的路由器首先要和邻居表建立邻接关系。 加入进来后，它会主动向其他路由广播 hello 分组，介绍自己 发送第一个 hello 完毕后，它会在四个 hello 的时间内等待应答，这被称为路由器的 初始状态。 网络中的其他路由器收到它发来的 hello 后，将它的信息加入到数据库中，并回应 hello 分组。 新路由器看到自己的 ID 出现在其他路由器应答的 hello 中时，就建立了邻接关系，将自己的状态改为双向。 拓扑表的建立此阶段依次涉及如下四个状态，经过这四个阶段后，此OSPF区域的所有路由器的数据拓扑图都达到了同步。 exstart state：其中一台路由器成为主路由器，两个邻居根据接口的IP地址的大小来确定主/从关系，主路由器负责发起通信。 exchange state：OSPF让每一个路由器和相邻路由器交换己有的链路状态摘要信息（邻接节点间发送 DBD，Database Description）。接收之后，与自己的拓扑表进行比较。找出自己所需要的信息。 loading state：经过与相邻路由器交换摘要信息后，新路由器需要更详细的信息（邻接节点间发送 LSR，Link State Request）。经过一系列的分组交换，全网同步的链路数据库就建立了。 full state：收到邻居发送的链路状态信息并更新和同步拓扑数据库后邻居便处于完全邻接状态。 计算路由在前一阶段，各个节点都有了全网的拓扑信息。在此阶段，每个路由器按照产生的全区域数据拓扑图（保存在它们的 LSDB 中），再运行 Dijkstra 算法，产生到目标网段的路由条目。 关于 Dijkstra 算法，这里不介绍了，详细可参考 Dijkstra算法。 2.2. 距离矢量路由协议该协议下具有如下特点，路由器直接传送各自的路由表信息。网络中的路由器从自己的邻居路由器得到路由信息，并将这些路由信息连同自己的本地路由信息发送给其他邻居，这样一级级的传递下去以达到全网同步。每个路由器并不了解整个网络拓扑。 距离矢量路由协议和链路状态协议的设计思想都被引用在 Ad-Hoc 等很多网络中。距离矢量（distance vector, DV）路由算法是动态路由算法，在该算法下，每个路由器维护一张矢量表，表中列出了当前已知的到每个目标的最当距离，以及所使用的线路。通过邻居之间相互交换信息，路由器不断更新它们内部的表。 路由度量：路由度量采用距离，距离表示本节点到达目的地址所需要的费用。这个距离可以是跳数，或队列长度，或时延； 网络信息发布：周期性的向相邻节点进行广播，发布的内容直接来源于本节点的路由表。经过相互的交换，每个节点可获得网络所有节点的距离信息； 路由选择：基于所获得的距离信息，以最短距离为标准，选择到信宿的下一跳节点； 路由表：每个节点维护一个路由表，表项包括信宿地址、到信宿的下一跳、到信宿节点的费用等； Ad-Hoc 网络中距离通过跳数体现，矢量就表现为下一跳的节点是谁。路由器之间广播自己的路由表中的信息，更具体将 Next 和 Metric 广播出去，广播的同时自己的位置天然携带了。接收到信息的其他路由器根据需要更新自己的路由表。从下图中的例子展示了细节。 看起来很好，不过这种算法却没有在 Ad-Hoc 直接被使用，因为它会带来路由环路问题。下面这个例子展示了这个问题。 在维护路由表信息的时候，如果在拓扑发生改变后，网络收敛缓慢产生了不协调或者矛盾的路由选择条目，就会发生路由环路的问题。这种条件下，路由器对无法到达的网络路由不予理睬，导致用户的数据包不停在网络上循环发送，最终造成网络资源的严重浪费。 通过一定的调整对 DV 算法进行改进，我们可以解决路由环路问题，一般而言，有如下常见解决方案： 定义最大跳数：设置最大跳数为 16，超过 16 的，网络视为不可达； 水平分割：路由器从某个接口学到的路由，不会从该接口再发回给邻居路由器； 触发更新：当路由信息发生变化时，立即向邻居设备发送触发更新报文； 路由毒化：在路由信息在路由表中失效时，先将度量值变为无穷大，再向邻居路由发送相关路由更新信息。 3. 主动路由协议该协议下，无论是否有通信需求，每个节点周期性广播并交换路由信息，维护一张包含到其他节点的路由信息的路由表，也被称为前摄式路由协议。这种协议下，节点主动发送路由更新包，故也叫作主动路由协议，包括RIP协议、DSDV协议、OSPF协议等。 这是一种传统的分布式最短路径路由协议，不难发现它有如下特点：每个节点维护到网络中所有节点的路由，所有路由都已经存在且随时可用，路由请求的延迟低，但路由开销高。 我们以 DSDV（Destination Sequenced Distance Vector，目的序列距离矢量）路由协议为例，来看看主动路由协议的细节。 3.1. DSDV 工作原理DSDV 是一种基于 Bellman-ford 算法的距离矢量路由协议，采用序列号机制来区分路由的新旧程度，防止可能发生的路由环路。 路由信息格式每个节点维护一张距离-矢量表，表中列出所有可达的目的节点及到达该目的节点的跳数，同时每条路由条目包含目的节点产生的序列号，用来区分新旧路由。我们先来看看 DSDV 协议下的路由表格式，将其与 DV 协议对比，注意其改进之处。 Destination Next Hop Metric Seq.No Install Time A A 0 S550_A 001000 B B 1 S102_B 001200 C B 3 S588_C 001200 D B 4 S312_D 001200 各列的含义如下： Destination：目的节点地址； Next Hop：下一跳节点地址； Metric：从该节点到目的节点的路由的跳数； Seq.No：目的节点序列号，是偶数，由目的端产生，防止出现路由环路，并确保路由信息是最新的，记作 SNNN_Dest； Install Time：记录路由建立的时间，用于删除过期的路由。 如上所示为路由条目信息，注意到在更新路由条目时，遵循两个原则：序列号新和度量值小。将更新信息和节点的路由表对比，选择序列号值大的路由信息，这样就能保证到达目的节点的路由信息是最新的。当序列号值相等时，选择度量值最佳（例如最小跳数）的路由信息。 信息公告各节点周期性的向邻居节点通告其当前的路由表，而不是采用洪泛法。这意味着各节点对收到的其他节点的信息进行处理以后再进行广播通告，大大减少了通过的信息量。后面我们还会讲到洪泛法，注意区分。 为了进一步减少路由信息的传输开销，DSDV 中使用了两类更新报文。第一种是完全转存，将路由表项中的所有信息进行通告。第二种是递增更新，仅通告更新信息。 举几个例子来说明如何公告： 广播更新的路由表：当节点的路由表更新后，它会同时更新以自己为 Dest 的路由条目的序号。它向周围广播的路由表时，会包括自己的已更新的序列号信息。 新节点的加入：新节点 D 加入网络后，会进行广播，接收到的信息的节点 C 会更新自己的路由表，然后向周围的节点广播更新的路由表。值得注意的是，C 在更新路由表时不止增加 D 的路由条目，同时会更新以自己为 Dest 的路由条目的 Seq.No。 链路断：如果在相当长的一段时间内不能收到相邻节点的广播消息，可推断出链路断。DSDV 下，断的链路度量值等于无穷。下一跳经过该链路的路由表项的度量值表为无穷，并分配一个新的序列号，且为奇数。出现无穷项时，立即触发递增更新报文发送，将链路断裂信息通告到全网。举个例子，节点 C 检测到链路断裂，序列号增加 1，然后其邻居更新路由表。注意若 B 在 C 发送更新报文前，发送了断裂链路的更新报文，那么由于其序列号小 1，不会触发 C 进行更新，也就避免了路由环路。 DSDV 的优缺点DSDV 协议基于 DV 算法，简单易实现，因只需和邻居节点交换路由信息，需要的存储空间小。而且我们可以看到，DSDV 解决了路由环路问题，且能对拓扑变化作出快速反应。再次强调，它是一种先验式（表驱动）路由。总结其优缺点如下。 优点 简单 无路由环路问题 无路由发现延迟 缺点 所有节点都必须公告路由，因此不支持休眠 收敛慢（距离矢量路由的特性） 开销大，大部分的路由信息从不使用 可扩展性是一个主要问题 4. 按需路由协议介绍完主动路由协议，我们再来看看按需路由协议。 当需要一条从源节点到目的节点的路径进行数据发送时才查找路由。节点并不保存整个网络的及时准确的路由信息。当源节点要向目的节点发送报文时，源节点在网络中发起路由查找过程，找到相应的路由后，才开始发送报文。也被称为后验式。 4.1. 动态 DSR 协议DSR 是最早采用按需路由思想的协议，它采用了源路由的路由机制，在每一个分组的头部都携带整条路由的信息，路由器按照该路由纪录来转发分组。 DSR 协议使用源路由，采用 Cache（缓冲器）存放路由信息，且中间节点不必存储转发分组所需的路由信息，网络开销较少，却因此存在陈旧路由。 4.1.1. 路由发现当一个节点欲发送数据到目的节点时，它首先查询路由缓冲器是否有到目的节点的路由。如果有，则按此路由发送数据；如果没有，源节点就开始启动路由发现程序。路由发现过程中使用洪泛路由（Flooding Routing）。 当节点 S 需要向节点 D 发送数据，但不知到节点 D 的路由于是节点 S 就开始路由发现过程。源节点 S 洪泛『路由请求』分组 Route Request(RREQ)，每个请求分组通过序列号和源节点 S 标识唯一确定。 路由请求源节点向邻居节点广播路由请求（RREQ）消息，RREQ 的格式及含义如下所示。 其中，Sid 为源节点 ID 号，Did 为目的节点 ID 号，Route record 是路由记录，记录了从源节点到目的节点所经过的节点序列，Request ID 为路由请求序列号，由源节点设置。 当一个节点收到 RREQ 时，如果该节点满足： 不是目的节点D； 请求分组头部的源路由序列中不包含该节点； 没有接收过同样的路由请求分组； 且路由表中没有目的节点D的路由信息。 那么节点将自己的地址附加到『路由请求』分组头部的 Route record 中，并将该分组转发给所有相邻节点。 重复检测上面提到的第 2、3 点其实就是对 RREQ 重复的检测，这种检测是为了避免路由环路问题。我们再次重复一下这个 RREQ 重复的检测：如果（1）节点接收到的RREQ消息中的 &lt;源节点地址、请求 ID&gt; 存在于本节点的序列对列表中，或者（2）如果节点接收到的RREQ消息中的路由记录中包含本节点的地址，那么我们认为这个 RREQ 是重复的，将它丢弃。 路由应答当 RREQ 分组最终传递到目的节点 D 时，D 会往回发送 RREP 分组，分组的格式如下： 其中，Did 表示目的节点 ID 或者说是请求路由分组的源节点 ID，Date Route 表示启动路由请求的源节点发送的数据分组要经过的路由（节点序列），而 Reply Route 是路由应答分组 RREP 所要经过的路由（节点序列，不难发现将 Date Route 反向即可）。 获得新路由的方式节点在转发 RREQ 时也会获得到源节点的，如 E 转发来自 C 的 RREQ（A-B-C），它就会获得到 A 的路由（E-C-B-A）。 节点也会监听相邻节点发送的分组（包括 RREQ，RREP，数据分组），查看需要的路由信息。 节点转发 RREP 时，获得到目的节点的路径上的所有节点的路由。 节点转发数据分组时，获得从本节点到源节点的路由。 路由缓存当源节点 S 接到 RREP 分组后，就将 RREP 分组中从源节点 S 到目的节点 D 的路由信息进行缓存；当源节点 S 向目的节点 D 发送数据分组时，此路由信息就包含在每个分组的头部。所有的中间节点利用源路由信息进行分组转发。 4.1.2. 路由维护路由缓存的优化当中间节点的缓存中包含到目的节点的路由时，就由这个中间节点发送 RREP 给源节点，这将缩短路由寻址时间。 但是，这种优化也会带来问题。 错误路由缓存网络拓扑的变化使得缓存的路由失效。影响和感染其它节点，使用该路由缓存的路由将不可用；当节点根据路由缓存回应 RREP 时，其它监听到此 RREP 的节点会更改自己缓存的路由，从而感染错误路由缓存。对于这种问题，我们可以设置缓存路由的有效期，过期删除。 RREP 风暴当某个节点广播某个目的节点的 RREQ 时，当其邻居节点的路由缓存中都有到该目的节点的路由时，每个邻居节点都试图以自己缓存的路由响应，由此造成 RREP 风暴。RREP风暴将浪费网络带宽，并且加剧局部网络冲突。 为解决这个问题，让所有欲发送 RREP 的节点，先延时 D，再发送。D=H*(h-1+r)，其中 H 是每条链路的传播延时，h 是自己返回的路径长度即到目的节点的跳数，r 是 0 或者 1。可以看到，D 与节点到目的节点的跳数成正比，使得到目的节点的最短路径的 RREP 最先发送。同时，所有的节点都设置成混杂模式，监听是否存在比自己更短的到目的节点的路径，如果有，就不发送本节点的 RREP。 路由故障分组 RERR如果中间节点发现路由表中显示的下一跳节点链路层不可到达，向源节点发送一个RERR。源节点从路由缓冲条目中删除所有不可到达的链路（这条路径的中间节点也利用这个信息更新路由缓冲器） 。源节点将重新启动新的路由发现过程。RERR 的格式如下： 其中 Node1 表示链路出错的一端节点 ID 号，Node2 是链路出错的另一端节点 ID 号，Did 表示目的节点 ID 或遇到链路出错的数据分组的源节点 ID ，Rerr route 是路由出错分组所要经过的路由（节点序号）。 下图展示了一个例子，从中我们可以看出 RERR 是如何工作的。 4.1.3. DSR 总结从上面的描述中，我们不难发现 DSR 协议的特点，这里再对其进行一个总结，它具有如下优点： 采用源路由机制、避免了路由环路； 它是一种按需路由协议，只有当两个节点间进行通信时，才会缓存路由纪录； 因此相对主动路由来说，减小了路由维护的开销； 通过采用路由缓存技术，减少路由请求信息对信道的占用。 虽然 DSR 存在一定的缺陷，但是也有一些解决办法，一并列出来。 随着路经跳数的增加，分组头长度线性增加、开销大； 路由请求分组 RREQ 采用洪泛发向全网扩散，导致网络负荷大； 来自邻居节点的 RREQ 分组在某个节点可能会发生碰撞，解决办法是：在发送 RREQ 分组时引入随机时延； 当源节点发送路由请求分组 RREQ 时，可能会收到多个节点缓存的到达目的节点的路由信息，引起竞争。解决办法：若某节点听到其它节点发出的 RREQ 分组中路由信息含有较少跳数，此节点停止发送。 当源节点发送路由请求分组 RREQ 时，可能会收到多个节点缓存的到达目的节点的路由信息，但有些路由信息可能是过时的。解决办法：引入定时器、链路断的情况应进行全网洪泛。 4.2. AODV 协议AODV，Ad Hoc on demand distance vector，按需距离矢量路由协议。 AODV 在 DSR 的基础上进行了一些改进，在 AODV 中，参与通信过程的节点需要维护路由表，那些不再路径上的节点不保存路由信息，数据分组不需要包含从源到目的节点的路由信息，即采用逐跳转发分组方式。 AODV路由协议是为Ad hoc网络节点设计的，它提供对动态链路状况的快速自适应、处理开销和存储开销低、路由开销低、确定到达 Ad Hoc 网络内目的节点的单目标传输路由。 AODV 有四种基本的报文：RREQ（路由请求帧），RREP（路由应答帧），RERR（路由错误帧），HELLO（活跃路由链路监测帧）。 4.2.1 AODV 路由表路由请求发送 RREQ 过程建立反向路由表，转发 RREP 时建立正向路由表，路由维护时更新路由表。路由表主要构成如下： 目的节点地址 n_dst：用于标志使用此路由的最终目的节点，决定了数据分组转 发方向。 目的节点序列号 rt_seqno：反映此路由的新鲜度，一般序列号越大路由越新鲜， 这是保证开环的重要措施，在路由发现和路由应答更新路由时需要进行序列号的 比较。 路由状态标志 rt_flags(有效、无效、正在修复等)：反映此路由目前的状态，主要 用于告知数据分组经过此节点的时候处理方式。 网络接口 rt_interface：移动节点访问信道的接口 跳数 rt_hops：到达目的节点所需要的跳数。 下一跳rt_nexthop：：数据分组经过本节点之后，数据分组将被直接转发的中继节点，通常下一跳节点应该出现在当前节点的邻节点列表中。 前驱节点列表 rt_pcliSt：使用这条路由的所有直接前驱节点列表。 路由生命期 rt_expire：路由有效的生命期，在数据分组转发使用当前路由时会更新路由的有效生命期，当较长时间不使用此路由时，此路由的有效期将会过期，在路由管理时将会使路由失效。 网络中的每个节点维护自身的序列号，它表征了路由的新旧。节点在发生路由请求时，会先增加自己的序列号，再发送，发送的 RREQ 中会携带自己的序列号。目的节点只接受最新的序列号，这样一来就可以避免路由环路问题。 4.2.2. 路由建立简单概括成以下几个过程： 源节点广播路由请求帧 RREQ； 中间节点转发 RREQ，转发过程类似 DSR 协议； 当目标节点接到 RREQ 分组时，它回应 RREP 分组，RREP 沿着方向路径传输。 源节点 S 打算向目的节点 D 发送一个数据包，在路由表中未查找到能到达D的路由，向其邻居广播 RREQ 分组用于路由发现。为避免节点重复接收处理 RREQ 消息，用源节点和路由请求编号的组合唯一标识一个 RREQ 请求。 接收到RREQ的节点作如下处理：中间节点更新各自到源节点S的路由表，记录并维护指向源节点的反向路由；设置到源节点路由表的『过时定时器』。 如果收到 RREQ 的节点不是目的节点，更新 RREQ 分组（将 RREQ中 的信宿序列号设为节点收到的该信宿 D 相关的最大序列号，跳计数加1），并转发更新后的 RREQ 分组。如果在『路由发现定时』内已收到一个具有相同标识的RREQ分组，则抛弃该分组，不作任何处理。 如果满足如下条件之一，则节点产生 RREP，并单播发送到源节点 S，否则继续广播 RREQ，且表项的序列号大于 RREQ 中的信宿序列号。 该节点就是目的节点D，； 节点的路由表中有到目的节点D的活动表项。 转发 RREP 的中间节点创建『前向路由表』并更新，记录转发路由的下游节点、跳数、生存时间、目的序列号等内容；将跳计数加 1，并根据先前记录的反向路由将 RREP 报文转发给上游节点。上游节点收到RREP后按照相同规则更新路由表并转发 RREP，直至源节点 S。 4.2.3. 路由维护AODV的路由也同样存在过期问题，因此参与通信的节点，需要维护路由表。通过设一个定时器，当超过设定时间时，则认为路由表中的反向路径信息无效。 AODV链路状态检测机制，活跃路径节点以HELLO_INTERVAL为周期发送HELLO，用来保持联系，当在设定的时间内，如果没有来自路由表中的前向路径的HELLO，则认为前向路径信息失效（即使路由信息是可用的）。 与活动路由无关的节点移动，并不影响信源到信宿的寻径。 如果信源节点移动导致路由不可用，则由信源重新发起路由发现的过程。 当由于信宿节点或活动路由的中间节点移动等原因导致链路中断链路的『上游节点』主动发送一个 RERR，该 RERR 的信宿序列号大于其所储存的信宿序列号，并传播到所有的邻居，邻居节点会继续转发 RERR 分组。其他节点收到RERR分组后，更新路由表（将包含e的链路设为无效），并继续转发RERR分组。该过程不断重复，直至所有的相关节点被通告到。 中间节点收到发送到目的节点的数据包时，如果发现到达目的节点的路由失效，该中间节点可以缓存该数据包，并发起到目的节点的路由请求，等待路由重新建立后再据需发送数据包。 4.2.4. AODV 总结优点：传统的距离向量路由机制；支持中间节点应答，能使源节点迅速获得路由，有效减少了广播数，但存在过时路由问题；节点只存储需要的路由，减少了内存的需要和不必要的复制；快速响应路径上的断链，避免路由环路；具有网络的可扩充性； 缺点是路由建立时延较大。 5. 主动路由协议与按需路由协议 主动路由协议是按路由发现和建立路由方式的角度分类下的一种路由协议，也叫表驱动路由协议，与之相对的是按需路由协议，前面介绍的两种路由协议 OSPF、DSDV 均属于主动路由协议。 主动路由协议的特点： 传统的分布式最短路径路由协议，基于链路状态或者距离向量，所有节点连续更新『可达』信息； 每个节点维护到网络中所有节点的路由； 所有路由都已经存在并且随时可用； 路由请求的延迟低； 路由开销高。 按需路由特点： 在源端需要时候通过路由发现过程来确定路由控制信息采用洪泛（flooding）方式，路由请求延迟高，路由开销低； 两种实现技术：源路由（报文头携带完整的路由信息）和逐跳路由（类似现有的Internet路由）。 由于他们建立的方式不同，在应对不同的场合他们会有不同的效率表现。主动协议因全程维护所有的路由而具备低延迟；按需协议因只在需要时才发现所需路由而导致高延迟。主动协议因连续更新路由可能导致高开销；按需协议因只在需要时才维护路由而具备低开销。 具体选择哪种类型的路由取决于业务负载和节点的移动模式（是否频繁移动）。","content":"<blockquote>\n<p>路，径之大者。<br>由，从也。</p>\n</blockquote>\n<p>路由，即建立、选择与遵循路径。在网络中，路由就是分组从源节点到目的节点时，决定端到端路径的网络范围的进程。路由工作在 OSI 参考模型的第三层——网络层，它解决了信息传递时的路径选择问题。<br><a id=\"more\"></a></p>\n<h2 id=\"1-路由协议引论\"><a href=\"#1-路由协议引论\" class=\"headerlink\" title=\"1. 路由协议引论\"></a>1. 路由协议引论</h2><p>路由回答了从出发点到达终点如何走的问题，以及如何走消耗的资源最少。</p>\n<h3 id=\"1-1-传统路由\"><a href=\"#1-1-传统路由\" class=\"headerlink\" title=\"1.1. 传统路由\"></a>1.1. 传统路由</h3><p>在详细介绍 Ad-Hoc 中的路由协议之前，我们需要了解下传统路由，需要注意的是它与 Ad-Hoc 中的有所不同，这是由于 Ad-Hoc 的特点与传统网络有很大区别。在传统路由中，主机与路由器是分开的，主机需要通过路由器连接到网络中，路由工作由路由器实现。具体来看传统路由的建立过程如下：</p>\n<ul>\n<li>发送端发出指令经路由器转发到达接收端；</li>\n<li>路由器收到数据包后，解析目的节点，随后根据路由表寻找下一跳路由器节点；</li>\n<li>一旦连接主机的路由器无法工作，将导致链路中段。</li>\n</ul>\n<h3 id=\"1-2-Ad-Hoc-网络中的路由\"><a href=\"#1-2-Ad-Hoc-网络中的路由\" class=\"headerlink\" title=\"1.2. Ad-Hoc 网络中的路由\"></a>1.2. Ad-Hoc 网络中的路由</h3><p>Ad-Hoc 网络有其自身无中心等特点，导致其路由有如下特点：</p>\n<ul>\n<li>网络中的终端兼有主机和路由两种功能，网络拓扑改变仍然额可以组网；</li>\n<li>每个终端都存有自己的路由表；</li>\n<li>网络中的单个链路中断或终端的变化不会对整体造成影响；</li>\n</ul>\n<p>Ad-Hoc 网络路由也面临着一些问题：</p>\n<ul>\n<li>动态变化的网络拓扑，这将导致网络中路由表的频繁更新，常规的路由协议无法处理这种情况；</li>\n<li>单向信道的存在，这点与常规路由路由协议需要处理的问题大不相同，它会造成认知的单向性、路由的单向性和信息不可达；</li>\n<li>传输带宽有限；</li>\n<li>无线移动终端的局限性。</li>\n</ul>\n<h3 id=\"1-3-路由的分类\"><a href=\"#1-3-路由的分类\" class=\"headerlink\" title=\"1.3. 路由的分类\"></a>1.3. 路由的分类</h3><p>在深入了解路由协议之前，下面先来对路由协议进行分类。我们需要关注的是分类的原则而不是分类的结果，关注这些原则对我们的理解大有好处，也许现在我们不太理解为何如此划分，当对它有一定的了解之后，回过头再来看就会理解的。</p>\n<ul>\n<li>按照路由协议依据<ul>\n<li>基于链路状态的路由协议</li>\n<li>基于距离矢量的路由协议</li>\n</ul>\n</li>\n<li>按照路由建立的方式<ul>\n<li>先应式路由协议</li>\n<li>按需路由协议</li>\n</ul>\n</li>\n<li>按照网络逻辑结构<ul>\n<li>平面结构的路由协议</li>\n<li>分层结构的路由协议</li>\n</ul>\n</li>\n<li>按照路由协议适用的网络规模<ul>\n<li>中、小规模自组网的路由协议</li>\n<li>大规模网络的路由协议</li>\n</ul>\n</li>\n<li>其他类型<ul>\n<li>主要是专门用途的路由协议，如基于地理信息的路由协议 LAR 和 GPSR 等。</li>\n</ul>\n</li>\n</ul>\n<img src=\"/2020/04/adhoc-routing-protocol/common_routing_protocol.png\" title=\"常用路由协议名称\">\n<img src=\"/2020/04/adhoc-routing-protocol/common_routing_protocol2.png\" title=\"常用路由协议归类\">\n<p>按照这种划分，我们在这里只介绍按照第一种划分方式（按照路由协议依据）和第二种划分方式（按照路由建立的方式）下的一些典型的路由协议。</p>\n<h2 id=\"2-链路状态与距离矢量路由协议\"><a href=\"#2-链路状态与距离矢量路由协议\" class=\"headerlink\" title=\"2. 链路状态与距离矢量路由协议\"></a>2. 链路状态与距离矢量路由协议</h2><h3 id=\"2-1-链路状态路由协议\"><a href=\"#2-1-链路状态路由协议\" class=\"headerlink\" title=\"2.1. 链路状态路由协议\"></a>2.1. 链路状态路由协议</h3><p>该协议下，基于链路状态，汇总区域内所有的路由器的链路状态信息。根据状态信息生成网络拓扑结构，每一个路由器再根据拓扑结构计算出路由。<br>对链路状态路由协议，我们通过一个典型的协议来研究，它就是 OSPF（开放式最短路径优先）协议。</p>\n<p>OSPF 协议是一种典型的链路状态路由协议，<strong>基于 IP</strong>，采用 <strong>Dijkstra 算法</strong> 计算节点间的最短路径，它将链路状态广播数据包传送给区域内的所有路由器，区域内路由器共同维护同一张完整的网络图，保存在数据库中，每条记录都代表网络的一条从当前节点到其他节点的最短路径。</p>\n<p>OSPF 工作分为如下三个过程：邻居表的建立，拓扑表的建立，计算路由。</p>\n<h4 id=\"邻居表的建立\"><a href=\"#邻居表的建立\" class=\"headerlink\" title=\"邻居表的建立\"></a>邻居表的建立</h4><p>一台新加入 OSPF 区域的路由器首先要和邻居表建立邻接关系。</p>\n<ol>\n<li>加入进来后，它会主动向其他路由广播 hello 分组，介绍自己</li>\n<li>发送第一个 hello 完毕后，它会在四个 hello 的时间内等待应答，这被称为路由器的 <strong>初始状态</strong>。</li>\n<li>网络中的其他路由器收到它发来的 hello 后，将它的信息加入到数据库中，并回应 hello 分组。</li>\n<li>新路由器看到自己的 ID 出现在其他路由器应答的 hello 中时，就建立了邻接关系，将自己的状态改为双向。</li>\n</ol>\n<img src=\"/2020/04/adhoc-routing-protocol/OSPF_build_adjacent_table.png\" title=\"OSPF 下邻接表建立\">\n<h4 id=\"拓扑表的建立\"><a href=\"#拓扑表的建立\" class=\"headerlink\" title=\"拓扑表的建立\"></a>拓扑表的建立</h4><p>此阶段依次涉及如下四个状态，经过这四个阶段后，此OSPF区域的所有路由器的数据拓扑图都达到了同步。</p>\n<ol>\n<li>exstart state：其中一台路由器成为主路由器，两个邻居根据接口的IP地址的大小来确定主/从关系，主路由器负责发起通信。</li>\n<li>exchange state：OSPF让每一个路由器和相邻路由器交换己有的链路状态摘要信息（邻接节点间发送 DBD，Database Description）。接收之后，与自己的拓扑表进行比较。找出自己所需要的信息。</li>\n<li>loading state：经过与相邻路由器交换摘要信息后，新路由器需要更详细的信息（邻接节点间发送 LSR，Link State Request）。经过一系列的分组交换，全网同步的链路数据库就建立了。</li>\n<li>full state：收到邻居发送的链路状态信息并更新和同步拓扑数据库后邻居便处于完全邻接状态。</li>\n</ol>\n<h4 id=\"计算路由\"><a href=\"#计算路由\" class=\"headerlink\" title=\"计算路由\"></a>计算路由</h4><p>在前一阶段，各个节点都有了全网的拓扑信息。在此阶段，每个路由器按照产生的全区域数据拓扑图（保存在它们的 LSDB 中），再运行 Dijkstra 算法，产生到目标网段的路由条目。</p>\n<p>关于 Dijkstra 算法，这里不介绍了，详细可参考 <a href=\"https://blog.csdn.net/qq_35644234/article/details/60870719\" target=\"_blank\" rel=\"noopener\">Dijkstra算法</a>。</p>\n<h3 id=\"2-2-距离矢量路由协议\"><a href=\"#2-2-距离矢量路由协议\" class=\"headerlink\" title=\"2.2. 距离矢量路由协议\"></a>2.2. 距离矢量路由协议</h3><p>该协议下具有如下特点，路由器直接传送各自的路由表信息。网络中的路由器从自己的邻居路由器得到路由信息，并将这些路由信息连同自己的本地路由信息发送给其他邻居，这样一级级的传递下去以达到全网同步。每个路由器并不了解整个网络拓扑。</p>\n<p>距离矢量路由协议和链路状态协议的设计思想都被引用在 Ad-Hoc 等很多网络中。距离矢量（distance vector, DV）路由算法是动态路由算法，在该算法下，每个路由器维护一张矢量表，表中列出了当前已知的到每个目标的最当距离，以及所使用的线路。通过邻居之间相互交换信息，路由器不断更新它们内部的表。</p>\n<ul>\n<li>路由度量：路由度量采用距离，距离表示本节点到达目的地址所需要的费用。这个距离可以是跳数，或队列长度，或时延；</li>\n<li>网络信息发布：周期性的向相邻节点进行广播，发布的内容直接来源于本节点的路由表。经过相互的交换，每个节点可获得网络所有节点的距离信息；</li>\n<li>路由选择：基于所获得的距离信息，以最短距离为标准，选择到信宿的下一跳节点；</li>\n<li>路由表：每个节点维护一个路由表，表项包括信宿地址、到信宿的下一跳、到信宿节点的费用等；</li>\n</ul>\n<p>Ad-Hoc 网络中距离通过跳数体现，矢量就表现为下一跳的节点是谁。路由器之间广播自己的路由表中的信息，更具体将 Next 和 Metric 广播出去，广播的同时自己的位置天然携带了。接收到信息的其他路由器根据需要更新自己的路由表。从下图中的例子展示了细节。</p>\n<img src=\"/2020/04/adhoc-routing-protocol/dv_phase1_init.png\" title=\"DV 算法初始化\">\n<img src=\"/2020/04/adhoc-routing-protocol/dv_phase2_update_route.png\" title=\"DV 算法路由更新\">\n<p>看起来很好，不过这种算法却没有在 Ad-Hoc 直接被使用，因为它会带来路由环路问题。下面这个例子展示了这个问题。</p>\n<img src=\"/2020/04/adhoc-routing-protocol/dv_route_loop1.png\">\n<img src=\"/2020/04/adhoc-routing-protocol/dv_route_loop2.png\" title=\"路由环路问题示例\">\n<p>在维护路由表信息的时候，如果在<span style=\"color:red\">拓扑发生改变</span>后，网络收敛缓慢产生了不协调或者<span style=\"color:red\">矛盾的路由选择条目</span>，就会发生路由环路的问题。这种条件下，路由器对无法到达的网络路由不予理睬，导致用户的数据包不停在网络上<span style=\"color:red\">循环发送</span>，最终造成网络资源的严重浪费。</p>\n<p>通过一定的调整对 DV 算法进行改进，我们可以解决路由环路问题，一般而言，有如下常见解决方案：</p>\n<ul>\n<li>定义最大跳数：设置最大跳数为 16，超过 16 的，网络视为不可达；</li>\n<li>水平分割：路由器从某个接口学到的路由，不会从该接口再发回给邻居路由器；</li>\n<li>触发更新：当路由信息发生变化时，立即向邻居设备发送触发更新报文；</li>\n<li>路由毒化：在路由信息在路由表中失效时，先将度量值变为无穷大，再向邻居路由发送相关路由更新信息。</li>\n</ul>\n<h2 id=\"3-主动路由协议\"><a href=\"#3-主动路由协议\" class=\"headerlink\" title=\"3. 主动路由协议\"></a>3. 主动路由协议</h2><p>该协议下，无论是否有通信需求，每个节点周期性广播并交换路由信息，维护一张包含到其他节点的路由信息的路由表，也被称为前摄式路由协议。这种协议下，节点主动发送路由更新包，故也叫作<span style=\"color:red\">主动路由协议</span>，包括<span style=\"color:red\">RIP协议、DSDV协议、OSPF协议</span>等。</p>\n<p>这是一种传统的分布式最短路径路由协议，不难发现它有如下特点：每个节点维护到网络中所有节点的路由，所有路由都已经存在且随时可用，路由请求的延迟低，但路由开销高。</p>\n<p>我们以 DSDV（Destination Sequenced Distance Vector，目的序列距离矢量）路由协议为例，来看看主动路由协议的细节。</p>\n<h3 id=\"3-1-DSDV-工作原理\"><a href=\"#3-1-DSDV-工作原理\" class=\"headerlink\" title=\"3.1. DSDV 工作原理\"></a>3.1. DSDV 工作原理</h3><p>DSDV 是一种基于 Bellman-ford 算法的<span style=\"color:red\">距离矢量路由协议</span>，采用<span style=\"color:red\">序列号</span>机制来区分路由的新旧程度，防止可能发生的路由环路。</p>\n<h4 id=\"路由信息格式\"><a href=\"#路由信息格式\" class=\"headerlink\" title=\"路由信息格式\"></a>路由信息格式</h4><p>每个节点维护一张<span style=\"color:red\">距离-矢量表</span>，表中列出所有可达的目的节点及到达该目的节点的跳数，同时每条路由条目包含目的节点产生的序列号，用来区分新旧路由。我们先来看看 DSDV 协议下的路由表格式，将其与 DV 协议对比，注意其改进之处。</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">Destination</th>\n<th style=\"text-align:center\">Next Hop</th>\n<th style=\"text-align:center\">Metric</th>\n<th style=\"text-align:center\">Seq.No</th>\n<th style=\"text-align:center\">Install Time</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">A</td>\n<td style=\"text-align:center\">A</td>\n<td style=\"text-align:center\">0</td>\n<td style=\"text-align:center\">S550_A</td>\n<td style=\"text-align:center\">001000</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">B</td>\n<td style=\"text-align:center\">B</td>\n<td style=\"text-align:center\">1</td>\n<td style=\"text-align:center\">S102_B</td>\n<td style=\"text-align:center\">001200</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">C</td>\n<td style=\"text-align:center\">B</td>\n<td style=\"text-align:center\">3</td>\n<td style=\"text-align:center\">S588_C</td>\n<td style=\"text-align:center\">001200</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">D</td>\n<td style=\"text-align:center\">B</td>\n<td style=\"text-align:center\">4</td>\n<td style=\"text-align:center\">S312_D</td>\n<td style=\"text-align:center\">001200</td>\n</tr>\n</tbody>\n</table>\n<p>各列的含义如下：</p>\n<ul>\n<li>Destination：目的节点地址；</li>\n<li>Next Hop：下一跳节点地址；</li>\n<li>Metric：从该节点到目的节点的路由的跳数；</li>\n<li>Seq.No：目的节点序列号，是<span style=\"color:red\">偶数</span>，由目的端产生，防止出现路由环路，并确保路由信息是最新的，记作 SNNN_Dest；</li>\n<li>Install Time：记录路由建立的时间，用于删除过期的路由。</li>\n</ul>\n<p>如上所示为路由条目信息，注意到在更新路由条目时，遵循两个<span style=\"color:red\">原则</span>：<span style=\"color:red\">序列号新和度量值小</span>。将更新信息和节点的路由表对比，选择<span style=\"color:red\">序列号值大的路由信息</span>，这样就能保证到达目的节点的路由信息是最新的。当序列号值相等时，选择<span style=\"color:red\">度量值最佳</span>（例如最小跳数）的路由信息。</p>\n<h4 id=\"信息公告\"><a href=\"#信息公告\" class=\"headerlink\" title=\"信息公告\"></a>信息公告</h4><p>各节点周期性的向邻居节点通告其当前的路由表，而不是采用洪泛法。这意味着各节点对收到的其他节点的信息进行处理以后再进行广播通告，大大减少了通过的信息量。后面我们还会讲到洪泛法，注意区分。</p>\n<p>为了进一步减少路由信息的传输开销，DSDV 中使用了两类更新报文。第一种是<span style=\"color:red\">完全转存</span>，将路由表项中的所有信息进行通告。第二种是<span style=\"color:red\">递增更新</span>，仅通告更新信息。</p>\n<p>举几个例子来说明如何公告：</p>\n<ol>\n<li>广播更新的路由表：当节点的路由表更新后，它会同时更新以自己为 Dest 的路由条目的序号。它向周围广播的路由表时，会包括自己的已更新的序列号信息。</li>\n<li>新节点的加入：新节点 D 加入网络后，会进行广播，接收到的信息的节点  C 会更新自己的路由表，然后向周围的节点广播更新的路由表。值得注意的是，C 在更新路由表时不止增加 D 的路由条目，同时会更新以自己为 Dest 的路由条目的 Seq.No。</li>\n<li>链路断：如果在相当长的一段时间内不能收到相邻节点的广播消息，可推断出链路断。DSDV 下，断的链路度量值<span style=\"color:red\">等于无穷</span>。下一跳经过该链路的路由表项的度量值表为无穷，并分配一个新的序列号，且为<span style=\"color:red\">奇数</span>。出现无穷项时，立即触发<span style=\"color:red\">递增更新</span>报文发送，将链路断裂信息通告到全网。<br>举个例子，节点 C 检测到链路断裂，序列号增加 1，然后其邻居更新路由表。注意若 B 在 C 发送更新报文前，发送了断裂链路的更新报文，那么由于其序列号小 1，不会触发 C 进行更新，也就<span style=\"color:red\">避免了路由环路</span>。</li>\n</ol>\n<h4 id=\"DSDV-的优缺点\"><a href=\"#DSDV-的优缺点\" class=\"headerlink\" title=\"DSDV 的优缺点\"></a>DSDV 的优缺点</h4><p>DSDV 协议基于 DV 算法，简单易实现，因只需和邻居节点交换路由信息，需要的存储空间小。而且我们可以看到，DSDV 解决了路由环路问题，且能对拓扑变化作出快速反应。再次强调，它是一种<span style=\"color:red\">先验式（表驱动）路由</span>。总结其优缺点如下。</p>\n<h4 id=\"优点\"><a href=\"#优点\" class=\"headerlink\" title=\"优点\"></a>优点</h4><ul>\n<li>简单</li>\n<li>无路由环路问题</li>\n<li>无路由发现延迟</li>\n</ul>\n<h4 id=\"缺点\"><a href=\"#缺点\" class=\"headerlink\" title=\"缺点\"></a>缺点</h4><ul>\n<li>所有节点都必须公告路由，因此不支持休眠</li>\n<li>收敛慢（距离矢量路由的特性）</li>\n<li>开销大，大部分的路由信息从不使用</li>\n<li>可扩展性是一个主要问题</li>\n</ul>\n<h2 id=\"4-按需路由协议\"><a href=\"#4-按需路由协议\" class=\"headerlink\" title=\"4. 按需路由协议\"></a>4. 按需路由协议</h2><p>介绍完主动路由协议，我们再来看看按需路由协议。</p>\n<p>当需要一条从源节点到目的节点的路径进行数据发送时才查找路由。节点并不保存整个网络的及时准确的路由信息。当源节点要向目的节点发送报文时，源节点在网络中发起路由查找过程，找到相应的路由后，才开始发送报文。也被称为后验式。</p>\n<h3 id=\"4-1-动态-DSR-协议\"><a href=\"#4-1-动态-DSR-协议\" class=\"headerlink\" title=\"4.1. 动态 DSR 协议\"></a>4.1. 动态 DSR 协议</h3><p>DSR 是最早采用<span style=\"color:red\">按需路由</span>思想的协议，它采用了<span style=\"color:red\">源路由</span>的路由机制，在每一个分组的头部都携带整条路由的信息，路由器按照该路由纪录来转发分组。</p>\n<p>DSR 协议使用源路由，采用 Cache（缓冲器）存放路由信息，且中间节点不必存储转发分组所需的路由信息，网络开销较少，却因此存在陈旧路由。</p>\n<h4 id=\"4-1-1-路由发现\"><a href=\"#4-1-1-路由发现\" class=\"headerlink\" title=\"4.1.1. 路由发现\"></a>4.1.1. 路由发现</h4><p>当一个节点欲发送数据到目的节点时，它首先查询路由缓冲器是否有到目的节点的路由。如果有，则按此路由发送数据；如果没有，源节点就开始启动路由发现程序。路由发现过程中使用<span style=\"color:red\">洪泛路由</span>（Flooding Routing）。</p>\n<p>当节点 S 需要向节点 D 发送数据，但不知到节点 D 的路由于是节点 S 就开始路由发现过程。源节点 S 洪泛『路由请求』分组 Route Request(RREQ)，每个请求分组通过序列号和源节点 S 标识唯一确定。</p>\n<h5 id=\"路由请求\"><a href=\"#路由请求\" class=\"headerlink\" title=\"路由请求\"></a>路由请求</h5><p>源节点向邻居节点广播路由请求（RREQ）消息，RREQ 的格式及含义如下所示。</p>\n<img src=\"/2020/04/adhoc-routing-protocol/dsr_rreq_format.png\" title=\"RREQ 格式\">\n<p>其中，Sid 为源节点 ID 号，Did 为目的节点 ID 号，Route record 是路由记录，记录了从源节点到目的节点所经过的节点序列，Request ID 为路由请求序列号，由源节点设置。</p>\n<p>当一个节点收到 RREQ 时，如果该节点满足：</p>\n<ol>\n<li>不是目的节点D；</li>\n<li>请求分组头部的源路由序列中不包含该节点；</li>\n<li>没有接收过同样的路由请求分组；</li>\n<li>且路由表中没有目的节点D的路由信息。</li>\n</ol>\n<p>那么<span style=\"color:red\">节点将自己的地址附加到『路由请求』分组头部的 Route record 中，并将该分组转发给所有相邻节点</span>。</p>\n<h5 id=\"重复检测\"><a href=\"#重复检测\" class=\"headerlink\" title=\"重复检测\"></a>重复检测</h5><p>上面提到的第 2、3 点其实就是对 RREQ 重复的检测，这种检测是为了避免路由环路问题。我们再次重复一下这个 RREQ 重复的检测：如果（1）节点接收到的RREQ消息中的 &lt;源节点地址、请求 ID&gt; 存在于本节点的序列对列表中，或者（2）如果节点接收到的RREQ消息中的路由记录中包含本节点的地址，那么我们认为这个 RREQ 是重复的，将它丢弃。</p>\n<h5 id=\"路由应答\"><a href=\"#路由应答\" class=\"headerlink\" title=\"路由应答\"></a>路由应答</h5><p>当 RREQ 分组最终传递到目的节点 D 时，D 会往回发送 RREP 分组，分组的格式如下：</p>\n<img src=\"/2020/04/adhoc-routing-protocol/dsr_rrep_format.png\" title=\"RREP 格式\">\n<p>其中，Did 表示目的节点 ID 或者说是请求路由分组的源节点 ID，Date Route 表示启动路由请求的源节点发送的数据分组要经过的路由（节点序列），而 Reply Route 是路由应答分组 RREP 所要经过的路由（节点序列，不难发现将 Date Route 反向即可）。</p>\n<h5 id=\"获得新路由的方式\"><a href=\"#获得新路由的方式\" class=\"headerlink\" title=\"获得新路由的方式\"></a>获得新路由的方式</h5><p>节点在转发 RREQ 时也会获得到源节点的，如 E 转发来自 C 的 RREQ（A-B-C），它就会获得到 A 的路由（E-C-B-A）。</p>\n<p>节点也会监听相邻节点发送的分组（包括 RREQ，RREP，数据分组），查看需要的路由信息。</p>\n<p>节点转发 RREP 时，获得到目的节点的路径上的所有节点的路由。</p>\n<p>节点转发数据分组时，获得从本节点到源节点的路由。</p>\n<h5 id=\"路由缓存\"><a href=\"#路由缓存\" class=\"headerlink\" title=\"路由缓存\"></a>路由缓存</h5><p>当源节点 S 接到 RREP 分组后，就将 RREP 分组中从源节点 S 到目的节点 D 的路由信息进行缓存；当源节点 S 向目的节点 D 发送数据分组时，此路由信息就包含在每个分组的头部。所有的中间节点利用源路由信息进行分组转发。</p>\n<h4 id=\"4-1-2-路由维护\"><a href=\"#4-1-2-路由维护\" class=\"headerlink\" title=\"4.1.2. 路由维护\"></a>4.1.2. 路由维护</h4><h5 id=\"路由缓存的优化\"><a href=\"#路由缓存的优化\" class=\"headerlink\" title=\"路由缓存的优化\"></a>路由缓存的优化</h5><p>当中间节点的缓存中包含到目的节点的路由时，就由这个中间节点发送 RREP 给源节点，这将缩短路由寻址时间。</p>\n<p>但是，这种优化也会带来问题。</p>\n<h5 id=\"错误路由缓存\"><a href=\"#错误路由缓存\" class=\"headerlink\" title=\"错误路由缓存\"></a>错误路由缓存</h5><p>网络拓扑的变化使得缓存的路由失效。影响和感染其它节点，使用该路由缓存的路由将不可用；当节点根据路由缓存回应 RREP 时，其它监听到此 RREP 的节点会更改自己缓存的路由，从而感染错误路由缓存。对于这种问题，我们可以<span style=\"color:red\">设置缓存路由的有效期，过期删除</span>。</p>\n<h5 id=\"RREP-风暴\"><a href=\"#RREP-风暴\" class=\"headerlink\" title=\"RREP 风暴\"></a>RREP 风暴</h5><p>当某个节点广播某个目的节点的 RREQ 时，当其邻居节点的路由缓存中都有到该目的节点的路由时，每个邻居节点都试图以自己缓存的路由响应，由此造成 RREP 风暴。RREP风暴将浪费网络带宽，并且加剧局部网络冲突。</p>\n<p>为解决这个问题，让所有欲发送 RREP 的节点，先延时 D，再发送。<code>D=H*(h-1+r)</code>，其中 H 是每条链路的传播延时，h 是自己返回的路径长度即到目的节点的跳数，r 是 0 或者 1。可以看到，D 与节点到目的节点的跳数成正比，使得到目的节点的最短路径的 RREP 最先发送。同时，所有的节点都设置成混杂模式，监听是否存在比自己更短的到目的节点的路径，如果有，就不发送本节点的 RREP。</p>\n<h5 id=\"路由故障分组-RERR\"><a href=\"#路由故障分组-RERR\" class=\"headerlink\" title=\"路由故障分组 RERR\"></a>路由故障分组 RERR</h5><p>如果中间节点发现路由表中显示的下一跳节点链路层不可到达，向源节<br>点发送一个RERR。源节点从路由缓冲条目中删除所有不可到达的链路（这条路径的中间节点也利用这个信息更新路由缓冲器） 。源节点将重新启动新的路由发现过程。RERR 的格式如下：</p>\n<img src=\"/2020/04/adhoc-routing-protocol/dsr_rerr_format.png\" title=\"RERR 格式\">\n<p>其中 Node1 表示链路出错的一端节点 ID 号，Node2 是链路出错的另一端节点 ID 号，Did 表示目的节点 ID 或遇到链路出错的数据分组的源节点 ID ，Rerr route 是路由出错分组所要经过的路由（节点序号）。</p>\n<p>下图展示了一个例子，从中我们可以看出 RERR 是如何工作的。</p>\n<img src=\"/2020/04/adhoc-routing-protocol/rerr_example.png\" title=\"RERR 示例\">\n<h4 id=\"4-1-3-DSR-总结\"><a href=\"#4-1-3-DSR-总结\" class=\"headerlink\" title=\"4.1.3. DSR 总结\"></a>4.1.3. DSR 总结</h4><p>从上面的描述中，我们不难发现 DSR 协议的特点，这里再对其进行一个总结，它具有如下优点：</p>\n<ul>\n<li>采用源路由机制、避免了路由环路；</li>\n<li>它是一种按需路由协议，只有当两个节点间进行通信时，才会缓存路由纪录；</li>\n<li>因此相对主动路由来说，减小了路由维护的开销；</li>\n<li>通过采用路由缓存技术，减少路由请求信息对信道的占用。</li>\n</ul>\n<p>虽然 DSR 存在一定的缺陷，但是也有一些解决办法，一并列出来。</p>\n<ul>\n<li>随着路经跳数的增加，分组头长度线性增加、开销大；</li>\n<li>路由请求分组 RREQ 采用洪泛发向全网扩散，导致网络负荷大；</li>\n<li>来自邻居节点的 RREQ 分组在某个节点可能会发生碰撞，解决<br>办法是：在发送 RREQ 分组时引入随机时延；</li>\n<li>当源节点发送路由请求分组 RREQ 时，可能会收到多个节点缓<br>存的到达目的节点的路由信息，引起竞争。解决办法：若某节<br>点听到其它节点发出的 RREQ 分组中路由信息含有较少跳数，<br>此节点停止发送。</li>\n<li>当源节点发送路由请求分组 RREQ 时，可能会收到多个节点缓<br>存的到达目的节点的路由信息，但有些路由信息可能是过时的。解决办法：引入定时器、链路断的情况应进行全网洪泛。</li>\n</ul>\n<h3 id=\"4-2-AODV-协议\"><a href=\"#4-2-AODV-协议\" class=\"headerlink\" title=\"4.2. AODV 协议\"></a>4.2. AODV 协议</h3><p>AODV，Ad Hoc on demand distance vector，按需距离矢量路由协议。</p>\n<p>AODV 在 DSR 的基础上进行了一些改进，在 AODV 中，参与通信过程的节点需要维护路由表，那些不再路径上的节点不保存路由信息，数据分组不需要包含从源到目的节点的路由信息，即采用逐跳转发分组方式。</p>\n<p>AODV路由协议是为Ad hoc网络节点设计的，它提供对动态链路状况的快速自适应、处理开销和存储开销低、路由开销低、确定到达 Ad Hoc 网络内目的节点的单目标传输路由。</p>\n<p>AODV 有四种基本的报文：RREQ（路由请求帧），RREP（路由应答帧），RERR（路由错误帧），HELLO（活跃路由链路监测帧）。</p>\n<h4 id=\"4-2-1-AODV-路由表\"><a href=\"#4-2-1-AODV-路由表\" class=\"headerlink\" title=\"4.2.1 AODV 路由表\"></a>4.2.1 AODV 路由表</h4><p>路由请求发送 RREQ 过程建立反向路由表，转发 RREP 时建立正向路由表，路由维护时更新路由表。路由表主要构成如下：</p>\n<ol>\n<li>目的节点地址 n_dst：用于标志使用此路由的最终目的节点，决定了数据分组转<br> 发方向。</li>\n<li>目的节点序列号 rt_seqno：反映此路由的新鲜度，一般序列号越大路由越新鲜，<br> 这是保证开环的重要措施，在路由发现和路由应答更新路由时需要进行序列号的<br> 比较。</li>\n<li>路由状态标志 rt_flags(有效、无效、正在修复等)：反映此路由目前的状态，主要<br> 用于告知数据分组经过此节点的时候处理方式。</li>\n<li>网络接口 rt_interface：移动节点访问信道的接口</li>\n<li>跳数 rt_hops：到达目的节点所需要的跳数。</li>\n<li>下一跳rt_nexthop：：数据分组经过本节点之后，数据分组将被直接转发的中继<br>节点，通常下一跳节点应该出现在当前节点的邻节点列表中。</li>\n<li>前驱节点列表 rt_pcliSt：使用这条路由的所有直接前驱节点列表。</li>\n<li>路由生命期 rt_expire：路由有效的生命期，在数据分组转发使用当前路由时会更<br>新路由的有效生命期，当较长时间不使用此路由时，此路由的有效期将会过期，<br>在路由管理时将会使路由失效。</li>\n</ol>\n<p>网络中的每个<strong>节点维护自身的序列号</strong>，它表征了路由的新旧。节点在发生路由请求时，会先增加自己的序列号，再发送，发送的 RREQ 中会携带自己的序列号。目的节点只接受最新的序列号，这样一来就可以避免路由环路问题。</p>\n<h4 id=\"4-2-2-路由建立\"><a href=\"#4-2-2-路由建立\" class=\"headerlink\" title=\"4.2.2. 路由建立\"></a>4.2.2. 路由建立</h4><p>简单概括成以下几个过程：</p>\n<ul>\n<li>源节点广播路由请求帧 RREQ；</li>\n<li>中间节点转发 RREQ，转发过程类似 DSR 协议；</li>\n<li>当目标节点接到 RREQ 分组时，它回应 RREP 分组，RREP 沿着方向路径传输。</li>\n</ul>\n<p>源节点 S 打算向目的节点 D 发送一个数据包，在路由表中未查找到能到达D的路由，向其邻居广播 RREQ 分组用于路由发现。为避免节点重复接收处理 RREQ 消息，用源节点和路由请求编号的组合唯一标识一个 RREQ 请求。</p>\n<p>接收到RREQ的节点作如下处理：中间节点更新各自到源节点S的路由表，记录并维护指向源节点的反向路由；设置到源节点路由表的『过时定时器』。</p>\n<p>如果收到 RREQ 的节点不是目的节点，更新 RREQ 分组（将 RREQ中 的信宿序列号设为节点收到的该信宿 D 相关的最大序列号，跳计数加1），并转发更新后的 RREQ 分组。如果在『路由发现定时』内已收到一个具有相同标识的RREQ分组，则抛弃该分组，不作任何处理。</p>\n<p>如果满足如下条件之一，则节点产生 RREP，并单播发送到源节点 S，否则继续广播 RREQ，且表项的序列号大于 RREQ 中的信宿序列号。</p>\n<ul>\n<li>该节点就是目的节点D，；</li>\n<li>节点的路由表中有到目的节点D的活动表项。</li>\n</ul>\n<p>转发 RREP 的中间节点创建『前向路由表』并更新，记录转发路由的下游节点、跳数、生存时间、目的序列号等内容；将跳计数加 1，并根据先前记录的反向路由将 RREP 报文转发给上游节点。上游节点收到RREP后按照相同规则更新路由表并转发 RREP，直至源节点 S。</p>\n<h4 id=\"4-2-3-路由维护\"><a href=\"#4-2-3-路由维护\" class=\"headerlink\" title=\"4.2.3. 路由维护\"></a>4.2.3. 路由维护</h4><p>AODV的路由也同样存在过期问题，因此参与通信的节点，需要维护路由表。通过设一个定时器，当超过设定时间时，则认为路由表中的反向路径信息无效。</p>\n<p>AODV链路状态检测机制，活跃路径节点以HELLO_INTERVAL为周期发送HELLO，用来保持联系，当在设定的时间内，如果没有来自路由表中的前向路径的HELLO，则认为前向路径信息失效（即使路由信息是可用的）。</p>\n<p>与活动路由无关的节点移动，并不影响信源到信宿的寻径。</p>\n<p>如果信源节点移动导致路由不可用，则由信源重新发起路由发现的过程。</p>\n<p>当由于信宿节点或活动路由的中间节点移动等原因导致链路中断链路的『上游节点』主动发送一个 RERR，该 RERR 的信宿序列号大于其所储存的信宿序列号，并传播到所有的邻居，邻居节点会继续转发 RERR 分组。其他节点收到RERR分组后，更新路由表（将包含e的链路设为无效），并继续转发RERR分组。该过程不断重复，直至所有的相关节点被通告到。</p>\n<p>中间节点收到发送到目的节点的数据包时，如果发现到达目的节点的路由失效，该中间节点可以缓存该数据包，并发起到目的节点的路由请求，等待路由重新建立后再据需发送数据包。</p>\n<h4 id=\"4-2-4-AODV-总结\"><a href=\"#4-2-4-AODV-总结\" class=\"headerlink\" title=\"4.2.4. AODV 总结\"></a>4.2.4. AODV 总结</h4><p>优点：传统的距离向量路由机制；支持中间节点应答，能使源节点迅速获得路由，有效减少了广播数，但存在过时路由问题；节点只存储需要的路由，减少了内存的需要和不必要的复制；快速响应路径上的断链，避免路由环路；具有网络的可扩充性；</p>\n<p>缺点是路由建立时延较大。</p>\n<h2 id=\"5-主动路由协议与按需路由协议\"><a href=\"#5-主动路由协议与按需路由协议\" class=\"headerlink\" title=\"5. 主动路由协议与按需路由协议\"></a>5. 主动路由协议与按需路由协议</h2><img src=\"/2020/04/adhoc-routing-protocol/proactive_reactive_route.png\" title=\"主动路由和按需路由\">\n<p>主动路由协议是按路由发现和建立路由方式的角度分类下的一种路由协议，也叫表驱动路由协议，与之相对的是按需路由协议，前面介绍的两种路由协议 OSPF、DSDV 均属于主动路由协议。</p>\n<p>主动路由协议的特点：</p>\n<ul>\n<li>传统的分布式最短路径路由协议，基于链路状态或者距离向量，所有节点连续更新『可达』信息；</li>\n<li>每个节点维护到网络中所有节点的路由；</li>\n<li>所有路由都已经存在并且随时可用；</li>\n<li>路由请求的延迟低；</li>\n<li>路由开销高。</li>\n</ul>\n<p>按需路由特点：</p>\n<ul>\n<li>在源端需要时候通过路由发现过程来确定路由控制信息采用洪泛（flooding）方式，路由请求延迟高，路由开销低；</li>\n<li>两种实现技术：源路由（报文头携带完整的路由信息）和逐跳路由（类似现有的Internet路由）。</li>\n</ul>\n<p>由于他们建立的方式不同，在应对不同的场合他们会有不同的效率表现。主动协议因全程维护所有的路由而具备低延迟；按需协议因只在需要时才发现所需路由而导致高延迟。主动协议因连续更新路由可能导致高开销；按需协议因只在需要时才维护路由而具备低开销。</p>\n<p>具体选择哪种类型的路由取决于业务负载和节点的移动模式（是否频繁移动）。</p>\n","tags":[{"name":"notes","slug":"notes","permalink":"https://jonathan1214.github.io/tags/notes/"},{"name":"Ad-Hoc","slug":"Ad-Hoc","permalink":"https://jonathan1214.github.io/tags/Ad-Hoc/"}]},{"title":"NS2 的介绍（七）—— RED 队列监视示例","date":"2020-04-15T06:15:03.000Z","path":"2020/04/ns2-redQueue-monitor-ex/","text":"本文将展示一个 RED 队列监视示例。下面这段 OTcl 脚本建立了如图所示网络拓扑然后运行模拟场景，可以看到，在 r1 和 r2 间的 link 使用的 RED 队列可以保存至多 25 个 packet，我们通过测量当前队列和平均队列大小的动态变化，以观察 RED 队列是如何工作的。点击下载代码 red.tcl 。 red.tclview raw123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081set ns [new Simulator]set node_(s1) [$ns node]set node_(s2) [$ns node]set node_(r1) [$ns node]set node_(r2) [$ns node]set node_(s3) [$ns node]set node_(s4) [$ns node]$ns duplex-link $node_(s1) $node_(r1) 10Mb 2ms DropTail$ns duplex-link $node_(s2) $node_(r1) 10Mb 3ms DropTail$ns duplex-link $node_(r1) $node_(r2) 1.5Mb 20ms RED$ns queue-limit $node_(r1) $node_(r2) 25$ns queue-limit $node_(r2) $node_(r1) 25$ns duplex-link $node_(s3) $node_(r2) 10Mb 4ms DropTail$ns duplex-link $node_(s4) $node_(r2) 10Mb 5ms DropTail$ns duplex-link-op $node_(s1) $node_(r1) orient right-down$ns duplex-link-op $node_(s2) $node_(r1) orient right-up$ns duplex-link-op $node_(r1) $node_(r2) orient right$ns duplex-link-op $node_(r1) $node_(r2) queuePos 0$ns duplex-link-op $node_(r2) $node_(r1) queuePos 0$ns duplex-link-op $node_(s3) $node_(r2) orient left-down$ns duplex-link-op $node_(s4) $node_(r2) orient left-upset tcp1 [$ns create-connection TCP/Reno $node_(s1) TCPSink $node_(s3) 0]$tcp1 set window_ 15set tcp2 [$ns create-connection TCP/Reno $node_(s2) TCPSink $node_(s3) 1]$tcp2 set window_ 15set ftp1 [$tcp1 attach-source FTP]set ftp2 [$tcp2 attach-source FTP]# Tracing a queueset redq [[$ns link $node_(r1) $node_(r2)] queue]set tchan_ [open all.q w]$redq trace curq_$redq trace ave_$redq attach $tchan_$ns at 0.0 \"$ftp1 start\"$ns at 3.0 \"$ftp2 start\"$ns at 10 \"finish\"# Define 'finish' procedure (include post-simulation processes)proc finish {} { global tchan_ set awkCode { { if ($1 == \"Q\" &amp;&amp; NF&gt;2) { print $2, $3 &gt;&gt; \"temp.q\"; set end $2 } else if ($1 == \"a\" &amp;&amp; NF&gt;2) print $2, $3 &gt;&gt; \"temp.a\"; } } set f [open temp.queue w] puts $f \"TitleText: red\" puts $f \"Device: Postscript\" if { [info exists tchan_] } { close $tchan_ } exec rm -f temp.q temp.a exec touch temp.a temp.q exec awk $awkCode all.q puts $f \\\"queue exec cat temp.q &gt;@ $f puts $f \\n\\\"ave_queue exec cat temp.a &gt;@ $f close $f exec xgraph -bb -tk -x time -y queue temp.queue &amp; exit 0}$ns run 有几件事需要注意。首先，更高级的 Simulator 对象成员函数 create-connection 被用于创建 TCP 连接。其次，仔细观察代码中的队列跟踪部分，可以发现我们创建了一个指向 RED 队列对象的变量，调用它的成员函数 trace 监视当前队列大小（cur_q）和平均队列大小（avg_），然后把结果写入文件 all.q 中。 运行结果： 参考：WPI","content":"<p>本文将展示一个 RED 队列监视示例。下面这段 OTcl 脚本建立了如图所示网络拓扑然后运行模拟场景，可以看到，在 r1 和 r2 间的 link 使用的 RED 队列可以保存至多 25 个 packet，我们通过测量当前队列和平均队列大小的动态变化，以观察 RED 队列是如何工作的。点击下载代码<a href=\"/downloads/code/red.tcl\"> red.tcl </a>。<a id=\"more\"></a></p>\n<img src=\"/2020/04/ns2-redQueue-monitor-ex/red_queue_monitor_setup.png\" title=\"网络设置\">\n<figure class=\"highlight tcl\"><figcaption><span>red.tcl</span><a href=\"/downloads/code/red.tcl\">view raw</a></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">set</span> ns [new Simulator]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">set</span> node_(s1) [$ns node]</span><br><span class=\"line\"><span class=\"keyword\">set</span> node_(s2) [$ns node]</span><br><span class=\"line\"><span class=\"keyword\">set</span> node_(r1) [$ns node]</span><br><span class=\"line\"><span class=\"keyword\">set</span> node_(r2) [$ns node]</span><br><span class=\"line\"><span class=\"keyword\">set</span> node_(s3) [$ns node]</span><br><span class=\"line\"><span class=\"keyword\">set</span> node_(s4) [$ns node]</span><br><span class=\"line\"></span><br><span class=\"line\">$ns duplex-link $node_(s1) $node_(r1) <span class=\"number\">10</span>Mb <span class=\"number\">2</span>ms DropTail</span><br><span class=\"line\">$ns duplex-link $node_(s2) $node_(r1) <span class=\"number\">10</span>Mb <span class=\"number\">3</span>ms DropTail</span><br><span class=\"line\">$ns duplex-link $node_(r1) $node_(r2) <span class=\"number\">1.5</span>Mb <span class=\"number\">20</span>ms RED</span><br><span class=\"line\">$ns queue-limit $node_(r1) $node_(r2) <span class=\"number\">25</span></span><br><span class=\"line\">$ns queue-limit $node_(r2) $node_(r1) <span class=\"number\">25</span></span><br><span class=\"line\">$ns duplex-link $node_(s3) $node_(r2) <span class=\"number\">10</span>Mb <span class=\"number\">4</span>ms DropTail</span><br><span class=\"line\">$ns duplex-link $node_(s4) $node_(r2) <span class=\"number\">10</span>Mb <span class=\"number\">5</span>ms DropTail</span><br><span class=\"line\"></span><br><span class=\"line\">$ns duplex-link-op $node_(s1) $node_(r1) orient right-down</span><br><span class=\"line\">$ns duplex-link-op $node_(s2) $node_(r1) orient right-up</span><br><span class=\"line\">$ns duplex-link-op $node_(r1) $node_(r2) orient right</span><br><span class=\"line\"></span><br><span class=\"line\">$ns duplex-link-op $node_(r1) $node_(r2) queuePos <span class=\"number\">0</span></span><br><span class=\"line\">$ns duplex-link-op $node_(r2) $node_(r1) queuePos <span class=\"number\">0</span></span><br><span class=\"line\"></span><br><span class=\"line\">$ns duplex-link-op $node_(s3) $node_(r2) orient left-down</span><br><span class=\"line\">$ns duplex-link-op $node_(s4) $node_(r2) orient left-up</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">set</span> tcp1 [$ns create-connection TCP/Reno $node_(s1) TCPSink $node_(s3) <span class=\"number\">0</span>]</span><br><span class=\"line\">$tcp1 <span class=\"keyword\">set</span> window_ <span class=\"number\">15</span></span><br><span class=\"line\"><span class=\"keyword\">set</span> tcp2 [$ns create-connection TCP/Reno $node_(s2) TCPSink $node_(s3) <span class=\"number\">1</span>]</span><br><span class=\"line\">$tcp2 <span class=\"keyword\">set</span> window_ <span class=\"number\">15</span></span><br><span class=\"line\"><span class=\"keyword\">set</span> ftp1 [$tcp1 attach-<span class=\"keyword\">source</span> FTP]</span><br><span class=\"line\"><span class=\"keyword\">set</span> ftp2 [$tcp2 attach-<span class=\"keyword\">source</span> FTP]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Tracing a queue</span></span><br><span class=\"line\"><span class=\"keyword\">set</span> redq [[$ns link $node_(r1) $node_(r2)] queue]</span><br><span class=\"line\"><span class=\"keyword\">set</span> tchan_ [<span class=\"keyword\">open</span> all.q w]</span><br><span class=\"line\">$redq <span class=\"keyword\">trace</span> curq_</span><br><span class=\"line\">$redq <span class=\"keyword\">trace</span> ave_</span><br><span class=\"line\">$redq attach $tchan_</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">$ns at <span class=\"number\">0.0</span> <span class=\"string\">\"$ftp1 start\"</span></span><br><span class=\"line\">$ns at <span class=\"number\">3.0</span> <span class=\"string\">\"$ftp2 start\"</span></span><br><span class=\"line\">$ns at <span class=\"number\">10</span> <span class=\"string\">\"finish\"</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Define 'finish' procedure (include post-simulation processes)</span></span><br><span class=\"line\"><span class=\"keyword\">proc</span><span class=\"title\"> finish</span> {} {</span><br><span class=\"line\">    <span class=\"keyword\">global</span> tchan_</span><br><span class=\"line\">    <span class=\"keyword\">set</span> awkCode {</span><br><span class=\"line\">    {</span><br><span class=\"line\">        <span class=\"keyword\">if</span> ($<span class=\"number\">1</span> == <span class=\"string\">\"Q\"</span> &amp;&amp; NF&gt;<span class=\"number\">2</span>) {</span><br><span class=\"line\">        print $<span class=\"number\">2</span>, $<span class=\"number\">3</span> &gt;&gt; <span class=\"string\">\"temp.q\"</span>;</span><br><span class=\"line\">        <span class=\"keyword\">set</span> end $<span class=\"number\">2</span></span><br><span class=\"line\">        }</span><br><span class=\"line\">        else <span class=\"keyword\">if</span> ($<span class=\"number\">1</span> == <span class=\"string\">\"a\"</span> &amp;&amp; NF&gt;<span class=\"number\">2</span>)</span><br><span class=\"line\">        print $<span class=\"number\">2</span>, $<span class=\"number\">3</span> &gt;&gt; <span class=\"string\">\"temp.a\"</span>;</span><br><span class=\"line\">    }</span><br><span class=\"line\">    }</span><br><span class=\"line\">    <span class=\"keyword\">set</span> f [<span class=\"keyword\">open</span> temp.queue w]</span><br><span class=\"line\">    <span class=\"keyword\">puts</span> $f <span class=\"string\">\"TitleText: red\"</span></span><br><span class=\"line\">    <span class=\"keyword\">puts</span> $f <span class=\"string\">\"Device: Postscript\"</span></span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">if</span> { [<span class=\"keyword\">info</span> exists tchan_] } {</span><br><span class=\"line\">    <span class=\"keyword\">close</span> $tchan_</span><br><span class=\"line\">    }</span><br><span class=\"line\">    <span class=\"keyword\">exec</span> rm -f temp.q temp.a </span><br><span class=\"line\">    <span class=\"keyword\">exec</span> touch temp.a temp.q</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">exec</span> awk $awkCode all.q</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">puts</span> $f \\<span class=\"string\">\"queue</span></span><br><span class=\"line\"><span class=\"string\">    exec cat temp.q &gt;@ $f  </span></span><br><span class=\"line\"><span class=\"string\">    puts $f \\n\\\"ave_queue</span></span><br><span class=\"line\"><span class=\"string\">    exec cat temp.a &gt;@ $f</span></span><br><span class=\"line\"><span class=\"string\">    close $f</span></span><br><span class=\"line\"><span class=\"string\">    exec xgraph -bb -tk -x time -y queue temp.queue &amp;</span></span><br><span class=\"line\"><span class=\"string\">    exit 0</span></span><br><span class=\"line\"><span class=\"string\">}</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">$ns run</span></span><br></pre></td></tr></table></figure>\n<p>有几件事需要注意。首先，更高级的 Simulator 对象成员函数 <code>create-connection</code> 被用于创建 TCP 连接。其次，仔细观察代码中的队列跟踪部分，可以发现我们创建了一个指向 RED 队列对象的变量，调用它的成员函数 <code>trace</code> 监视当前队列大小（cur_q）和平均队列大小（avg_），然后把结果写入文件 <code>all.q</code> 中。</p>\n<p>运行结果：<br><img src=\"/2020/04/ns2-redQueue-monitor-ex/result.png\" title=\"运行结果\"></p>\n<hr>\n<p>参考：<a href=\"http://nile.wpi.edu.cn/NS/\" target=\"_blank\" rel=\"noopener\">WPI</a></p>\n","tags":[{"name":"网络","slug":"网络","permalink":"https://jonathan1214.github.io/tags/网络/"},{"name":"NS2","slug":"NS2","permalink":"https://jonathan1214.github.io/tags/NS2/"}]},{"title":"算法笔记 —— 图","date":"2020-04-10T03:03:42.000Z","path":"2020/04/algorithm-map/","text":"在许多计算机应用中，由相连的结点所表示的模型起到了关键的作用。这些结点之间的连接很自然地会让人们产生一连串的疑问：沿着这些连接能否从一个结点到达另一个结点？有多少个结点和指定的结点相连？两个结点之间最短的连接是哪一条？要描述这些问题，我们要使用一种抽象的数学对象，叫做图。 1. 无向图无向图的定义：无向图是由一组顶点和一组能够将两个顶点相连的边组成的。在无向图中，边（edge）仅仅是两个顶点（vertex）间的连接。根据这个定义，顶点叫什么名字无关紧要，我们使用 0 到 V-1 来表示一张含有 V 个顶点的图中的各个顶点，这样的表示便于使用数组的索引来访问各个结点，我们可以直接用数组的索引作为结点的名称，事实上如果顶点不符合我们的预设，我们也可以把它们映射到 0 到 V-1 上来。 在这个定义下，允许出现下面两种特殊情况： 自环：即一条连接一个顶点和其自身的边； 连接同一对顶点的两条边称为平行边。 1.1. 一些术语这里先介绍一些关于图的术语。 相邻：两个顶点通过用一条边相连，称两个顶点相邻，边依附于这两个顶点； 度数：顶点的度数为依附于它的边的总数； 子图：一幅图的所有边的一个子集（包括所依附的结点）组成的图； 路径：由边顺序连接的一系列顶点，简单路径没有重复顶点； 连通图：从任意一个顶点都存在一条路径到达另一个任意顶点； 树：树是一副无环连通图，互不相连的树组成的集合称为森林；当且仅当一幅含有 V 个结点的图 G 满足下列 5 个条件之一时，它就是一棵树： G 有 V-1 条边且不含有环； G 有 V-1 条边且是连通的； G 是连通的，但删除任意一条边都会使它不再连通； G 是无环图，但添加任意一条边都会产生一条环； G 中的任意一对顶点之间仅存在一条简单路径。 稠密图与稀疏图： 二分图：可将所有结点分为两部分，其中图的每条边所接的两个顶点术语不用的部分； 1.2. 无向图的表示对于一个顶点数为 V，边数为 E 的无向图，我们可以用以下几种方式表示： 邻接矩阵：使用 V 乘 V 的布尔矩阵，顶点 v 和 w 间存在连接时，则矩阵的 v 行 w 列和 w 行 v 列置为 true； 边的数组： 邻接表数组：使用一个以顶点为索引的列表数组，其中每个元素都是和该顶点相邻的顶点列表。 我们使用 邻接表 表示非稠密图，它将每个顶点的所有相邻顶点都保存在该顶点对应的元素所指向的一张链表中，使用这个数组可以快速访问给定顶点的邻接顶点列表。用这种表示方法，使用的空间和 V+E 成正比；添加一条边所需的时间为常数；遍历顶点 v 的所有相邻顶点所需的时间和 v 的度数成正比。 1.3. 深度优先搜索 DFS我们可以通过系统地检查每一个顶点和每一条边来获取图的各种性质，在此基础上获得一些我们感兴趣的东西。在图中，很多性质是和路径相关的，我们经常需要从一个顶点移动到另一个顶点。许多图算法的抽象模型都非常简单，比如 DFS。 在讲 DFS 之前，让我们先来看看走迷宫问题，迷宫和图是非常相似的，用通道代替边，路口代替顶点，思考迷宫问题有助于我们理解 DFS。我们按照如下策略探索迷宫中的所有通道： 选择一条没有标记过的通道，在你走过的路上铺一条绳子； 标记所有你第一次路过的路口和通道； 当来到一个标记过的路口时（用绳子）回退到上个路口； 当回退到的路口已没有可走的通道时继续回退。 绳子可以保证我们总能找到一条出路，标记保证我们不会两次经过同一个通道或路口。理解迷宫问题，对于 DFS 自然也就不在话下了，甚至描述起来更加简单： 访问当前顶点，标记其标记已访问； 递归地访问它所有没有被标记过的所有邻居顶点。 这就是 DFS 的全部思路了，很容易发现在递归调用中我们使用了栈这种数据结构，这对我们标记顶点而言，是 LIFO 的，这是 DFS 和 BFS 的不同之处，BFS 是 FIFO 的，我们马上会讲到 BFS。 DFS 可以有效处理许多和图有关的任务，如： 连通性：给定两个顶点是否连通； 单点路径：从 s 到 v 是否存在一条路径。 其实这是同一个问题，只不过路径问题需要使用额外的数组保存遍历过的路径而已，这样我们就可以从某一顶点出发构造出一棵树，树中所有结点均是该顶点可到达的。 1.4. 广度优先搜索 BFS基于 DFS，我们可以确定到某一结点的是否存在路径，很自然的地我们会考虑这是不是最短路径，如果不是有没有别的办法寻找到最短路径。这正是 BFS 要解决的问题，BFS 是很多图算法的基石，需要重点掌握。而 DFS 无法解决这个问题，这是由它们遍历图的顺序决定的。如上面提到的，在 DFS 中，我们使用一个下压栈（递归方法体现了出来），在这种 LIFO 的规则下的探索和走迷宫探索相邻的通道非常类似。在 BFS 中，我们希望按照距离起点的距离的顺序来遍历所有的顶点，使用 FIFO 队列代替 LIFO 栈即可：重复以下步骤直到队列为空： 取队列中的下一个顶点 v 并标记它； 将与 v 相邻的所有未被标记过的顶点加入队列。 同时，我们还可以使用一个数组保存遍历的路径，索引是顶点，数组的值为该顶点的已知路径上的最后一个顶点。 1.5. DFS 和 BFS 的总结如同前面谈到的，DFS 和 BFS 的基本思路是一样的。在搜索中，我们先将起点存入数据结构中，然后重复以下步骤直到数据被清空： 取其中的下一个顶点并标记它； 将 v 的所有相邻而又未被标记的顶点加入数据结构。 两个算法的不同之处仅仅在于从数据结构中获取下一个顶点的规则不同，BFS 是最早加入的顶点，DFS 是最晚加入的顶点。这种差异得到了处理图的两种完全不同的视角，无论如何，最早我们都可以遍历所有与起点连通的顶点和边。 1.6. 更多问题有了 DFS 和 BFS 两种策略，我们可以处理更多问题： 连通分量； 检测环； 双色问题。 2. 有向图定义：有向图是由一组顶点和有方向的边的组成，每条有方向的边都连接着有序的一对顶点。 2.1. 有向图的表示这里先给出有向图的一些术语。 顶点的出度：该顶点指向的边的总数； 顶点的入度：指向该顶点的边的总数； 有向边的头：它的第一个顶点； 有向边的尾：它的第二个顶点； 有向路径：由一些列顶点组成，每个顶点都存在一条有向边从它指向序列中下一个顶点； 有向环：一条至少含有一条边且起点和终点相同的有向路径； 简单有向环：一条（除了起点和终点必须相同之外）不含有重复的顶点和边的环； v 能够到达 w：v 到 w 存在有向路径（注意：这并不意味着从 w 可以达到 v）。 有向图的表示和无向图类似，我们仍然可以使用邻接表数组来表示有向图，甚至更加简单，因为边是单向的，只需保存一个相邻结点。数组索引为某个顶点，索引下的邻接表为该顶点所指向的顶点构成的链表。 2.2. 可达性问题在无向图中我们处理过单点连通性问题，即判断其他顶点和给定的顶点是否连通，而在有向图中，也可以解决类似的问题，而且思路非常相似。 单点可达性：给定一副有向图和起点 s，是否存在一条从 s 到达给定顶点 v 的有向图； 多点可达性：给定一副图和顶点的集合，是否存在一条从集合中的任意顶点到达给定顶点 v 的路径。 解决这个问题的算法是基于 DFS 的，稍作修改即可： 121. 访问当前顶点，标记为已访问；2. 递归地访问它所谓未被标记过的顶点。 在此基础上，稍作修改我们就可以跟进一步地求出起点 s 和 终点 v 之间的路径或最短路径，算法和无向图中的完全一样。 2.3. 环和有向无环图对于有向图中环进行研究可以解决很多问题，如 优先级限制下调度问题：给定一组需要完成的任务，以及一组关于任务完成的先后次序的优先级限制。在满足限制条件的前提下应该如何安排并完成所有任务？ 拓扑排序：给定一幅有向图，将所有的顶点排序，使得所有的有向边均从排在前面的元素指向排在后面的元素（或者说明无法做到这一点）。 为什么说环和这些问题是相关的呢？举个例子，考虑一个调度问题：A 必须在 B 之前完成，B 必须在 C 之前完成，C 又必须在 A 之前完成。这显然是不可能实现的，这在有向图就构成了一个环。处理这些调度问题我们必须对图中的环进行检测。 有向无环图（DAG）就是一副不含有环的有向图。实现有向图中的环检测算法并不困难，我们可以基于 DFS 来解决这个问题。系统维护的递归调用栈表示的正是『当前』正在遍历的有向路径，一旦我们找到了一条有向边 v –&gt; w 且 w 已经在栈中，就找到了一个环，如果没有，那就说明这是无环图。如果更进一步，多加一个栈，我们就可以找出构成环的顶点。 DAG 检测算法1234561. 访问当前顶点，标记为已访问，标记为在当前搜索的路径的栈中2. 对当前顶点指向的顶点 如果未被标记，将其来源标记当前顶点，为其跳转到 1 如果在栈中，说明图中存在环 记录环到另一个栈中3. 当前顶点调用完毕，标记为不在当前搜索的路径的栈中 可以看到这个无向图中 DFS 路径搜索算法是类似的，这再次说明了 DFS 的重要性。 拓扑排序同样的，拓扑排序也是基于 DFS 的，只需稍作修改就可以实现拓扑排序。DFS 正好只会访问每个顶点一次，如果将递归调用函数 dfs 的参数顶点保存在一个数据结构中，遍历这个数据结构实际上就能访问图中的所有顶点，遍历的顺序取决于这个数据结构的性质以及是在递归调用之前还是之后进行保存。我们关心下面三种顺序： 前序：在递归调用之前将顶点加入队列。 后序：在递归调用之后将顶点加入队列。 逆后序：在递归调用之后将顶点压入栈。 可以证明，一幅有向无环图的拓扑顺序即为所有顶点的逆后续排列。 我们可以看到，拓扑排序和调度问题离不开有向环的检测，而且这两个问题可以看作是一个问题。在调度时，必须保证有向图中没有环，因此，解决任务调度类应用通常需要以下3 步： 指明任务和优先级条件； 不断检测并去除有向图中的所有环，以确保存在可行的方案； 使用拓扑排序解决调度问题。 2.4. 强连通性类似无向图中的连通性，我们在有向图中定义了强连通性：在有向图 G 中，如果两个顶点 v 和 w 是互相可达的，则称它们是强连通的。联想到环的定义，我们很容易想到两个顶点是强连通的等价于它们在同一个有向环中。 有向图中的强连通性也是一种顶点之间的等价关系，满足以下性质： 自反性：任意顶点 v 和自己都是强连通的。 对称性：如果 v 和 w 是强连通的，那么 w 和 v 也是强连通的。 传递性：如果 v 和 w 是强连通的且 w 和 x 也是强连通的，那么 v 和 x 也是强连通的。 强连通性将所有的顶点分为两一些等价类，每个等价类都是由相互均为强连通的顶点的最大子集组成的，我们称这些子集为强连通分量。对于理解有向图的结构，强连通性是一种非常重要的抽象，它突出了相互关联的几组顶点，如可以帮助决定话题分类和理解食物链中的能量流动问题。 对于强连通分量问题，我们可以使用 Kosaraju 算法来解决，本质上这个算法还是基于 DFS 的， 首先对 G 进行反转，即改变所有边的指向和原来相反，得到图 H； 然后对 H 进行逆后序排列； 按照这个排列顺序对 G 中的顶点调用标准 DFS，每一次非标记的顶点遍历完表示做完了一个强连通分量的搜索。 举个例子，如上图所示。证明如下： 3. 最小生成树加权图是为每条边关联一个权值或是成本的图模型。这种图能够自然地表示许多应用。在一幅电路图中，边表示导线，权值则可能表示导线的长度即成本，或是信号通过这条线路所需的时间。在这些情形中，最令人感兴趣的自然是将成本最小化。我们将学习加权无向图模型并用算法回答这个问题。 最小生成树：给定一副加权无向图，找到它的一棵最小生成树。 在解决这个问题之前，我们需要对之前的数据结构进行一些改变。 3.1. Prim 算法这是一种得到加权无向图的有效算法，基本思想如下： 将一个节点加入队列，将它的所有邻边加入队列 3.2. Kruskal 算法4. 最短路径","content":"<p>在许多计算机应用中，由相连的结点所表示的模型起到了关键的作用。这些结点之间的连接很自然地会让人们产生一连串的疑问：沿着这些连接能否从一个结点到达另一个结点？有多少个结点和指定的结点相连？两个结点之间最短的连接是哪一条？要描述这些问题，我们要使用一种抽象的数学对象，叫做图。<br><a id=\"more\"></a></p>\n<h2 id=\"1-无向图\"><a href=\"#1-无向图\" class=\"headerlink\" title=\"1. 无向图\"></a>1. 无向图</h2><p><em>无向图的定义</em>：无向图是由一组顶点和一组能够将两个顶点相连的边组成的。在无向图中，边（edge）仅仅是两个顶点（vertex）间的连接。根据这个定义，顶点叫什么名字无关紧要，我们使用 0 到 V-1 来表示一张含有 V 个顶点的图中的各个顶点，这样的表示便于使用数组的索引来访问各个结点，我们可以直接用数组的索引作为结点的名称，事实上如果顶点不符合我们的预设，我们也可以把它们映射到 0 到 V-1 上来。</p>\n<p>在这个定义下，允许出现下面两种特殊情况：</p>\n<ul>\n<li>自环：即一条连接一个顶点和其自身的边；</li>\n<li>连接同一对顶点的两条边称为平行边。</li>\n</ul>\n<h3 id=\"1-1-一些术语\"><a href=\"#1-1-一些术语\" class=\"headerlink\" title=\"1.1. 一些术语\"></a>1.1. 一些术语</h3><p>这里先介绍一些关于图的术语。</p>\n<ul>\n<li>相邻：两个顶点通过用一条边相连，称两个顶点<em>相邻</em>，边<em>依附于</em>这两个顶点；</li>\n<li>度数：顶点的度数为依附于它的边的总数；</li>\n<li>子图：一幅图的所有边的一个子集（包括所依附的结点）组成的图；</li>\n<li>路径：由边顺序连接的一系列顶点，简单路径没有重复顶点；</li>\n<li>连通图：从任意一个顶点都存在一条路径到达另一个任意顶点；</li>\n<li>树：树是一副无环连通图，互不相连的树组成的集合称为森林；当且仅当一幅含有 V 个结点的图 G 满足下列 5 个条件之一时，它就是一棵树：<ul>\n<li>G 有 V-1 条边且不含有环；</li>\n<li>G 有 V-1 条边且是连通的；</li>\n<li>G 是连通的，但删除任意一条边都会使它不再连通；</li>\n<li>G 是无环图，但添加任意一条边都会产生一条环；</li>\n<li>G 中的任意一对顶点之间仅存在一条简单路径。</li>\n</ul>\n</li>\n<li>稠密图与稀疏图：</li>\n<li>二分图：可将所有结点分为两部分，其中图的每条边所接的两个顶点术语不用的部分；</li>\n</ul>\n<h3 id=\"1-2-无向图的表示\"><a href=\"#1-2-无向图的表示\" class=\"headerlink\" title=\"1.2. 无向图的表示\"></a>1.2. 无向图的表示</h3><p>对于一个顶点数为 V，边数为 E 的无向图，我们可以用以下几种方式表示：</p>\n<ul>\n<li>邻接矩阵：使用 V 乘 V 的布尔矩阵，顶点 v 和 w 间存在连接时，则矩阵的 v 行 w 列和 w 行 v 列置为 true；</li>\n<li>边的数组：</li>\n<li>邻接表数组：使用一个以顶点为索引的列表数组，其中每个元素都是和该顶点相邻的顶点列表。</li>\n</ul>\n<img src=\"/2020/04/algorithm-map/adjacency_list.png\" title=\"邻接表\">\n<p>我们使用 <em>邻接表</em> 表示非稠密图，它将每个顶点的所有相邻顶点都保存在该顶点对应的元素所指向的一张链表中，使用这个数组可以快速访问给定顶点的邻接顶点列表。用这种表示方法，使用的空间和 V+E 成正比；添加一条边所需的时间为常数；遍历顶点 v 的所有相邻顶点所需的时间和 v 的度数成正比。</p>\n<h3 id=\"1-3-深度优先搜索-DFS\"><a href=\"#1-3-深度优先搜索-DFS\" class=\"headerlink\" title=\"1.3. 深度优先搜索 DFS\"></a>1.3. 深度优先搜索 DFS</h3><p>我们可以通过系统地检查每一个顶点和每一条边来获取图的各种性质，在此基础上获得一些我们感兴趣的东西。在图中，很多性质是和路径相关的，我们经常需要从一个顶点移动到另一个顶点。许多图算法的抽象模型都非常简单，比如 DFS。</p>\n<p>在讲 DFS 之前，让我们先来看看走迷宫问题，迷宫和图是非常相似的，用<em>通道</em>代替<em>边</em>，<em>路口</em>代替<em>顶点</em>，思考迷宫问题有助于我们理解 DFS。我们按照如下策略探索迷宫中的所有通道：</p>\n<ul>\n<li>选择一条没有标记过的通道，在你走过的路上铺一条<br>绳子；</li>\n<li>标记所有你第一次路过的路口和通道；</li>\n<li>当来到一个标记过的路口时（用绳子）回退到上个路口；</li>\n<li>当回退到的路口已没有可走的通道时继续回退。</li>\n</ul>\n<p>绳子可以保证我们总能找到一条出路，标记保证我们不会两次经过同一个通道或路口。理解迷宫问题，对于 DFS 自然也就不在话下了，甚至描述起来更加简单：</p>\n<ul>\n<li>访问当前顶点，标记其标记已访问；</li>\n<li>递归地访问它所有没有被标记过的所有邻居顶点。</li>\n</ul>\n<p>这就是 DFS 的全部思路了，很容易发现在递归调用中我们使用了栈这种数据结构，这对我们标记顶点而言，是 LIFO 的，这是 DFS 和 BFS 的不同之处，BFS 是 FIFO 的，我们马上会讲到 BFS。</p>\n<p>DFS 可以有效处理许多和图有关的任务，如：</p>\n<ul>\n<li>连通性：给定两个顶点是否连通；</li>\n<li>单点路径：从 s 到 v 是否存在一条路径。</li>\n</ul>\n<p>其实这是同一个问题，只不过路径问题需要使用额外的数组保存遍历过的路径而已，这样我们就可以从某一顶点出发构造出一棵树，树中所有结点均是该顶点可到达的。</p>\n<h3 id=\"1-4-广度优先搜索-BFS\"><a href=\"#1-4-广度优先搜索-BFS\" class=\"headerlink\" title=\"1.4. 广度优先搜索 BFS\"></a>1.4. 广度优先搜索 BFS</h3><p>基于 DFS，我们可以确定到某一结点的是否存在路径，很自然的地我们会考虑这是不是最短路径，如果不是有没有别的办法寻找到最短路径。这正是 BFS 要解决的问题，<strong>BFS 是很多图算法的基石，需要重点掌握</strong>。而 DFS 无法解决这个问题，这是由它们遍历图的顺序决定的。如上面提到的，在 DFS 中，我们使用一个下压栈（递归方法体现了出来），在这种 LIFO 的规则下的探索和走迷宫探索相邻的通道非常类似。在 BFS 中，我们希望按照距离起点的距离的顺序来遍历所有的顶点，使用 FIFO 队列代替 LIFO 栈即可：<br>重复以下步骤直到队列为空：</p>\n<ul>\n<li>取队列中的下一个顶点 v 并标记它；</li>\n<li>将与 v 相邻的所有未被标记过的顶点加入队列。</li>\n</ul>\n<p>同时，我们还可以使用一个数组保存遍历的路径，索引是顶点，数组的值为该顶点的已知路径上的最后一个顶点。</p>\n<h3 id=\"1-5-DFS-和-BFS-的总结\"><a href=\"#1-5-DFS-和-BFS-的总结\" class=\"headerlink\" title=\"1.5. DFS 和 BFS 的总结\"></a>1.5. DFS 和 BFS 的总结</h3><p>如同前面谈到的，DFS 和 BFS 的基本思路是一样的。在搜索中，我们先将起点存入数据结构中，然后重复以下步骤直到数据被清空：</p>\n<ul>\n<li>取其中的下一个顶点并标记它；</li>\n<li>将 v 的所有相邻而又未被标记的顶点加入数据结构。</li>\n</ul>\n<p>两个算法的不同之处仅仅在于从数据结构中获取下一个顶点的规则不同，BFS 是最早加入的顶点，DFS 是最晚加入的顶点。这种差异得到了处理图的两种完全不同的视角，无论如何，最早我们都可以遍历所有与起点连通的顶点和边。</p>\n<h3 id=\"1-6-更多问题\"><a href=\"#1-6-更多问题\" class=\"headerlink\" title=\"1.6. 更多问题\"></a>1.6. 更多问题</h3><p>有了 DFS 和 BFS 两种策略，我们可以处理更多问题：</p>\n<ul>\n<li>连通分量；</li>\n<li>检测环；</li>\n<li>双色问题。</li>\n</ul>\n<h2 id=\"2-有向图\"><a href=\"#2-有向图\" class=\"headerlink\" title=\"2. 有向图\"></a>2. 有向图</h2><p><strong>定义</strong>：有向图是由一组<em>顶点</em>和有方向的边的组成，每条有方向的边都连接着有序的一对顶点。</p>\n<img src=\"/2020/04/algorithm-map/directional_graph.png\" title=\"有向图\">\n<h3 id=\"2-1-有向图的表示\"><a href=\"#2-1-有向图的表示\" class=\"headerlink\" title=\"2.1. 有向图的表示\"></a>2.1. 有向图的表示</h3><p>这里先给出有向图的一些术语。</p>\n<ul>\n<li>顶点的出度：该顶点指向的边的总数；</li>\n<li>顶点的入度：指向该顶点的边的总数；</li>\n<li>有向边的头：它的第一个顶点；</li>\n<li>有向边的尾：它的第二个顶点；</li>\n<li>有向路径：由一些列顶点组成，每个顶点都存在一条有向边从它指向序列中下一个顶点；</li>\n<li>有向环：一条至少含有一条边且起点和终点相同的有向路径；</li>\n<li>简单有向环：一条（除了起点和终点必须相同之外）不含有重复的顶点和边的环；</li>\n<li>v 能够到达 w：v 到 w 存在有向路径（注意：这并不意味着从 w 可以达到 v）。</li>\n</ul>\n<p>有向图的表示和无向图类似，我们仍然可以使用邻接表数组来表示有向图，甚至更加简单，因为边是单向的，只需保存一个相邻结点。数组索引为某个顶点，索引下的邻接表为该顶点所指向的顶点构成的链表。</p>\n<h3 id=\"2-2-可达性问题\"><a href=\"#2-2-可达性问题\" class=\"headerlink\" title=\"2.2. 可达性问题\"></a>2.2. 可达性问题</h3><p>在无向图中我们处理过单点连通性问题，即判断其他顶点和给定的顶点是否连通，而在有向图中，也可以解决类似的问题，而且思路非常相似。</p>\n<ul>\n<li>单点可达性：给定一副有向图和起点 s，是否存在一条从 s 到达给定顶点 v 的有向图；</li>\n<li>多点可达性：给定一副图和顶点的集合，是否存在一条从集合中的任意顶点到达给定顶点 v 的路径。</li>\n</ul>\n<p>解决这个问题的算法是基于 DFS 的，稍作修改即可：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1. 访问当前顶点，标记为已访问；</span><br><span class=\"line\">2. 递归地访问它所谓未被标记过的顶点。</span><br></pre></td></tr></table></figure>\n<p>在此基础上，稍作修改我们就可以跟进一步地求出起点 s 和 终点 v 之间的路径或最短路径，算法和无向图中的完全一样。</p>\n<h3 id=\"2-3-环和有向无环图\"><a href=\"#2-3-环和有向无环图\" class=\"headerlink\" title=\"2.3. 环和有向无环图\"></a>2.3. 环和有向无环图</h3><p>对于有向图中环进行研究可以解决很多问题，如</p>\n<ul>\n<li><em>优先级限制下调度问题</em>：给定一组需要完成的任务，以及一组关于任务完成的先后次序的优先级限制。在满足限制条件的前提下应该如何安排并完成所有任务？</li>\n<li><em>拓扑排序</em>：给定一幅有向图，将所有的顶点排序，使得所有的有向边均从排在前面的元素指向排在后面的元素（或者说明无法做到这一点）。</li>\n</ul>\n<p>为什么说环和这些问题是相关的呢？举个例子，考虑一个调度问题：A 必须在 B 之前完成，B 必须在 C 之前完成，C 又必须在 A 之前完成。这显然是不可能实现的，这在有向图就构成了一个环。处理这些调度问题我们必须对图中的环进行检测。</p>\n<img src=\"/2020/04/algorithm-map/managment_and_loop.png\" title=\"调度问题与有向图中的环\">\n<p>有向无环图（DAG）就是一副不含有环的有向图。实现有向图中的环检测算法并不困难，我们可以基于 DFS 来解决这个问题。系统维护的递归调用栈表示的正是『当前』正在遍历的有向路径，一旦我们找到了一条有向边 v –&gt; w 且 w 已经在栈中，就找到了一个环，如果没有，那就说明这是无环图。如果更进一步，多加一个栈，我们就可以找出构成环的顶点。</p>\n<h4 id=\"DAG-检测算法\"><a href=\"#DAG-检测算法\" class=\"headerlink\" title=\"DAG 检测算法\"></a>DAG 检测算法</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1. 访问当前顶点，标记为已访问，标记为在当前搜索的路径的栈中</span><br><span class=\"line\">2. 对当前顶点指向的顶点</span><br><span class=\"line\">    如果未被标记，将其来源标记当前顶点，为其跳转到 1</span><br><span class=\"line\">    如果在栈中，说明图中存在环</span><br><span class=\"line\">    记录环到另一个栈中</span><br><span class=\"line\">3. 当前顶点调用完毕，标记为不在当前搜索的路径的栈中</span><br></pre></td></tr></table></figure>\n<p>可以看到这个无向图中 DFS 路径搜索算法是类似的，这再次说明了 DFS 的重要性。</p>\n<h4 id=\"拓扑排序\"><a href=\"#拓扑排序\" class=\"headerlink\" title=\"拓扑排序\"></a>拓扑排序</h4><p>同样的，拓扑排序也是基于 DFS 的，只需稍作修改就可以实现拓扑排序。DFS 正好只会访问每个顶点一次，如果将递归调用函数 <code>dfs</code> 的参数顶点保存在一个数据结构中，遍历这个数据结构实际上就能访问图中的所有顶点，遍历的顺序取决于这个数据结构的性质以及是在递归调用之前还是之后进行保存。我们关心下面三种顺序：</p>\n<ul>\n<li>前序：在递归调用之前将顶点加入队列。</li>\n<li>后序：在递归调用之后将顶点加入队列。</li>\n<li>逆后序：在递归调用之后将顶点压入栈。</li>\n</ul>\n<p>可以证明，一幅有向无环图的拓扑顺序即为所有顶点的逆后续排列。</p>\n<p>我们可以看到，拓扑排序和调度问题离不开有向环的检测，而且这两个问题可以看作是一个问题。在调度时，必须保证有向图中没有环，因此，解决任务调度类应用通常需要以下3 步：</p>\n<ul>\n<li>指明任务和优先级条件；</li>\n<li>不断检测并去除有向图中的所有环，以确保存在可行的方案；</li>\n<li>使用拓扑排序解决调度问题。</li>\n</ul>\n<h3 id=\"2-4-强连通性\"><a href=\"#2-4-强连通性\" class=\"headerlink\" title=\"2.4. 强连通性\"></a>2.4. 强连通性</h3><p>类似无向图中的连通性，我们在有向图中定义了<strong>强连通性</strong>：在有向图 G 中，如果两个顶点 v 和 w 是互相可达的，则称它们是<strong>强连通的</strong>。联想到环的定义，我们很容易想到两个顶点是强连通的等价于它们在同一个有向环中。</p>\n<p>有向图中的强连通性也是一种顶点之间的等价关系，满足以下性质：</p>\n<ul>\n<li>自反性：任意顶点 v 和自己都是强连通的。</li>\n<li>对称性：如果 v 和 w 是强连通的，那么 w 和 v 也是强连通的。</li>\n<li>传递性：如果 v 和 w 是强连通的且 w 和 x 也是强连通的，那<br>么 v 和 x 也是强连通的。</li>\n</ul>\n<p>强连通性将所有的顶点分为两一些等价类，每个等价类都是由相互均为强连通的顶点的最大子集组成的，我们称这些子集为<strong>强连通分量</strong>。对于理解有向图的结构，强连通性是一种非常重要的抽象，它突出了相互关联的几组顶点，如可以帮助决定话题分类和理解食物链中的能量流动问题。</p>\n<p>对于强连通分量问题，我们可以使用 Kosaraju 算法来解决，本质上这个算法还是基于 DFS 的，</p>\n<ul>\n<li>首先对 G 进行反转，即改变所有边的指向和原来相反，得到图 H；</li>\n<li>然后对 H 进行逆后序排列；</li>\n<li>按照这个排列顺序对 G 中的顶点调用标准 DFS，每一次非标记的顶点遍历完表示做完了一个强连通分量的搜索。</li>\n</ul>\n<img src=\"/2020/04/algorithm-map/kosaraju_example.png\" title=\"Kosaraju 算法运行示例\">\n<p>举个例子，如上图所示。证明如下：</p>\n<img src=\"/2020/04/algorithm-map/kosaraju_provement.png\" title=\"Kosaraju 算法证明\">\n<h2 id=\"3-最小生成树\"><a href=\"#3-最小生成树\" class=\"headerlink\" title=\"3. 最小生成树\"></a>3. 最小生成树</h2><p><strong>加权图</strong>是为每条边关联一个<em>权值</em>或是<em>成本</em>的图模型。这种图能够自然地表示许多应用。在一幅电路图中，边表示导线，权值则可能表示导线的长度即成本，或是信号通过这条线路所需的时间。在这些情形中，最令人感兴趣的自然是将成本最小化。我们将学习加权无向图模型并用算法回答这个问题。</p>\n<p><strong>最小生成树</strong>：给定一副加权无向图，找到它的一棵最小生成树。</p>\n<p>在解决这个问题之前，我们需要对之前的数据结构进行一些改变。</p>\n<h3 id=\"3-1-Prim-算法\"><a href=\"#3-1-Prim-算法\" class=\"headerlink\" title=\"3.1. Prim 算法\"></a>3.1. Prim 算法</h3><p>这是一种得到加权无向图的有效算法，基本思想如下：</p>\n<ul>\n<li>将一个节点加入队列，将它的所有邻边加入队列</li>\n</ul>\n<h3 id=\"3-2-Kruskal-算法\"><a href=\"#3-2-Kruskal-算法\" class=\"headerlink\" title=\"3.2. Kruskal 算法\"></a>3.2. Kruskal 算法</h3><h2 id=\"4-最短路径\"><a href=\"#4-最短路径\" class=\"headerlink\" title=\"4. 最短路径\"></a>4. 最短路径</h2>","tags":[{"name":"算法","slug":"算法","permalink":"https://jonathan1214.github.io/tags/算法/"},{"name":"数据结构","slug":"数据结构","permalink":"https://jonathan1214.github.io/tags/数据结构/"},{"name":"notes","slug":"notes","permalink":"https://jonathan1214.github.io/tags/notes/"},{"name":"Java","slug":"Java","permalink":"https://jonathan1214.github.io/tags/Java/"}]},{"title":"NS2 的介绍（六）—— trace 分析示例","date":"2020-04-08T04:41:36.000Z","path":"2020/04/ns2-trace-analysis-example/","text":"本文将展示一个 trace 分析示例，从中可以知道如何从 NS2 中生成 trace，如何解释 trace，如何从 trace 中得到有用的信息。在 模拟示例 给出的代码 ns-simple.tcl 中的第 15、16 行，我们打开了一个 trace 文件，在 finish 步骤中，我们向 trace 文件中写入了 trace 信息。 12345#...#open trace fileset f [open out.tr w]$ns trace-all $f#... 执行代码ns-simple.tcl会生成一个 NAM trace 文件，该文件作为 NAM 的输入，同时还会生成一个名为 out.tr 的文件，该文件用于我们的模拟分析。下图展示了 trace 的格式和来自 out.tr 的 trace 数据示例。 每一个 trace 行依次为以下部分： 事件描述符：+，-，d，r 事件发生的模拟时间，单位：秒 发起事件的节点 接受的节点 packet 类型 packet 大小，单位 Byte 分隔符：—— flow id：使用者在 OTcl 脚本中定义的 flow id。在模拟中用不到，可用于后续分析 源地址 目的地址 网络层协议下 packet 序列号：UDP 协议不需要使用序列号号但也会携带，便于分析 packet id：每一个 packet 编号唯一 拿到模拟数据后，我们要做的就是筛选出需要的信息，并把它们转换成更容易理解的形式然后分析。下面是一简单的数据转换示例，对上面得到的 out.tr 文件，在终端中执行 cat out.tr | grep &quot; 2 3 cbr &quot; | grep ^r | awk &#39;BEGIN {oldtime=0;oldpacket=0;} {dif=$12-oldpacket;if(dif==0) dif=1; if(dif&gt;0) {printf(&quot;%d\\t%f\\n&quot;,$12,($2-oldtime)/dif); oldtime=$2;oldpacket=$12}}&#39; &gt; jitter.txt，即可在目录下得到一个输出文件 jitter.txt。该命令从 trace 中提取节点 3 从 2 中接收 packet 的事件，并计算接收当前 packet 距离接收上一个 packet 的 packet 时延（接收时间差/packetID差）。使用 gnuplot 可以画出如下图像，X 轴为 packet 序列号，Y 轴为模拟时间（单位：秒）。 这个例子中，仿真后的分析在 shell 终端中进行，但是这些处理也可以在输入的 OTcl 脚本中进行，我们将在下一节讨论。 参考：WPI","content":"<p>本文将展示一个 trace 分析示例，从中可以知道如何从 NS2 中生成 trace，如何解释 trace，如何从 trace 中得到有用的信息。在 <a href=\"/2020/04/ns2-simple-simulation-example/\" title=\"模拟示例\">模拟示例</a> 给出的代码 <a href=\"/2020/04/ns2-trace-analysis-example/ns-simple.tcl\" title=\"ns-simple.tcl\">ns-simple.tcl</a> 中的第 15、16 行，我们打开了一个 trace 文件，在 finish 步骤中，我们向 trace 文件中写入了 trace 信息。<a id=\"more\"></a></p>\n<figure class=\"highlight tcl\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#...</span></span><br><span class=\"line\"><span class=\"comment\">#open trace file</span></span><br><span class=\"line\"><span class=\"keyword\">set</span> f [<span class=\"keyword\">open</span> out.tr w]</span><br><span class=\"line\">$ns <span class=\"keyword\">trace</span>-all $f</span><br><span class=\"line\">#...</span><br></pre></td></tr></table></figure>\n<p>执行代码<a href=\"/2020/04/ns2-trace-analysis-example/ns-simple.tcl\" title=\"ns-simple.tcl\">ns-simple.tcl</a>会生成一个 NAM trace 文件，该文件作为 NAM 的输入，同时还会生成一个名为 out.tr 的文件，该文件用于我们的模拟分析。下图展示了 trace 的格式和来自 out.tr 的 trace 数据示例。</p>\n<img src=\"/2020/04/ns2-trace-analysis-example/trace_format_example.png\" title=\"trace 文件格式与示例\">\n<p>每一个 trace 行依次为以下部分：</p>\n<ul>\n<li>事件描述符：+，-，d，r</li>\n<li>事件发生的模拟时间，单位：秒</li>\n<li>发起事件的节点</li>\n<li>接受的节点</li>\n<li>packet 类型</li>\n<li>packet 大小，单位 Byte</li>\n<li>分隔符：——</li>\n<li>flow id：使用者在 OTcl 脚本中定义的 flow id。在模拟中用不到，可用于后续分析</li>\n<li>源地址</li>\n<li>目的地址</li>\n<li>网络层协议下 packet 序列号：UDP 协议不需要使用序列号号但也会携带，便于分析</li>\n<li>packet id：每一个 packet 编号唯一</li>\n</ul>\n<p>拿到模拟数据后，我们要做的就是筛选出需要的信息，并把它们转换成更容易理解的形式然后分析。下面是一简单的数据转换示例，对上面得到的 out.tr 文件，在终端中执行 <code>cat out.tr | grep &quot; 2 3 cbr &quot; | grep ^r | awk &#39;BEGIN {oldtime=0;oldpacket=0;} {dif=$12-oldpacket;if(dif==0) dif=1; if(dif&gt;0) {printf(&quot;%d\\t%f\\n&quot;,$12,($2-oldtime)/dif); oldtime=$2;oldpacket=$12}}&#39; &gt; jitter.txt</code>，即可在目录下得到一个输出文件 jitter.txt。该命令从 trace 中提取节点 3 从 2 中接收 packet 的事件，并计算接收当前 packet 距离接收上一个 packet 的 packet 时延（接收时间差/packetID差）。使用 gnuplot 可以画出如下图像，X 轴为 packet 序列号，Y 轴为模拟时间（单位：秒）。</p>\n<p>这个例子中，仿真后的分析在 shell 终端中进行，但是这些处理也可以在输入的 OTcl 脚本中进行，我们将在下一节讨论。</p>\n<hr>\n<p>参考：<a href=\"http://nile.wpi.edu.cn/NS/\" target=\"_blank\" rel=\"noopener\">WPI</a></p>\n","tags":[{"name":"网络","slug":"网络","permalink":"https://jonathan1214.github.io/tags/网络/"},{"name":"NS2","slug":"NS2","permalink":"https://jonathan1214.github.io/tags/NS2/"}]},{"title":"NS2 的介绍（五）—— 数据分组","date":"2020-04-07T08:06:51.000Z","path":"2020/04/ns2-packet/","text":"在前面两篇文章中我们分别介绍了 NS2 中非常重要的两个组成——事件调度器和网络组件，我们知道了 packet（数据分组）是如何在节点之间传递的，现在让我们来看看数据分组在 NS2 中是如何表示的。一个 NS2 数据分组由一个头部信息的栈和可选的数据空间组成，如下图所示。在简单仿真示例提到过，数据分组头格式在创建 Simulator 对象时被初始化，在 Simulator 对象中，一系列栈排列注册了的 header 头（有可能不可见）被定义，如 common 头（它通常被任何需要的对象使用）、IP 头、TCP 头、RTP 头（UDP 使用 RTP 头）和 trace 头，且每个 header 在栈中的偏移都会被记录下来。这意味着不管一个头有没有被使用，当一个 packet（数据分组）被代理分配时创建的栈中都会含有它，并且网络对象使用相应的 offset（偏移值）就可以获得数据分组的栈中的任意头。 通常，一个 packet（数据分组）只有一个特定的 head（头部）栈，尽管通过分配数据空间，packet（数据分组）可以携带实际的（来自 application）信息，很少有 application（应用）和 agent（代理）的实现会支持这种做法，这是因为在非实时的模拟中传递真实数据是没有意义的。但是如果你想实现一个可以跨过网络去和另一个 application 通信的 application 的话，你也许可以使用这个特性，不过需要在下层的代理实现中做一点改动，还可以为 application 创建一个新的 header，然后修改下层的代理向这个新建的 header 写入受到的数据。后面这种方法会在后面的一篇文章中讲到。 参考：WPI","content":"<p>在前面两篇文章中我们分别介绍了 NS2 中非常重要的两个组成——<a href=\"../ns2-event-scheduler\">事件调度器</a>和<a href=\"../ns2-network-components\">网络组件</a>，我们知道了 packet（数据分组）是如何在节点之间传递的，现在让我们来看看数据分组在 NS2 中是如何表示的。<br><a id=\"more\"></a><br>一个 NS2 数据分组由一个<strong>头部信息的栈</strong>和<strong>可选的数据空间</strong>组成，如下图所示。在<a href=\"../ns2-simple-simulation-example\">简单仿真示例</a>提到过，数据分组头格式在创建 Simulator 对象时被初始化，在 Simulator 对象中，一系列栈排列注册了的 header 头（有可能不可见）被定义，如 common 头（它通常被任何需要的对象使用）、IP 头、TCP 头、RTP 头（UDP 使用 RTP 头）和 trace 头，且每个 header 在栈中的偏移都会被记录下来。这意味着不管一个头有没有被使用，当一个 packet（数据分组）被代理分配时创建的栈中都会含有它，并且网络对象使用相应的 offset（偏移值）就可以获得数据分组的栈中的任意头。</p>\n<p><img src=\"/assets/img/2020/ns_packet_format.png\" alt=\"packet 格式\"><br>通常，一个 packet（数据分组）只有一个特定的 head（头部）栈，尽管通过分配数据空间，packet（数据分组）可以携带实际的（来自 application）信息，很少有 application（应用）和 agent（代理）的实现会支持这种做法，这是因为<strong>在非实时的模拟中传递真实数据是没有意义的</strong>。但是如果你想实现一个可以跨过网络去和另一个 application 通信的 application 的话，你也许可以使用这个特性，不过需要在下层的代理实现中做一点改动，还可以为 application 创建一个新的 header，然后修改下层的代理向这个新建的 header 写入受到的数据。后面这种方法会在后面的一篇文章中讲到。</p>\n<hr>\n<p>参考：<a href=\"http://nile.wpi.edu.cn/NS/\" target=\"_blank\" rel=\"noopener\">WPI</a></p>\n","tags":[{"name":"网络","slug":"网络","permalink":"https://jonathan1214.github.io/tags/网络/"},{"name":"NS2","slug":"NS2","permalink":"https://jonathan1214.github.io/tags/NS2/"}]},{"title":"NS2 的介绍（四）—— 网络组件","date":"2020-04-06T01:30:03.000Z","path":"2020/04/ns2-network-components/","text":"我们在前文讨论 NS2 中一个非常重要的组成——事件调度器，这篇文章将讨论 NS2 另一个关键的组成——网络组件，主要是复合网络组件。下图展示了 NS2 中部分 OTcl 类的部分体系结构，有助于我们理解基本的网络组件（network component），在这个链接中可以找到 NS2 类的完整的体系结构。 类的部分体系结构层级的根是 TclObject 类，它是所有 OTcl 库对象的父类，如 scheduler（调度器），network component（网络组件），（timer）计时器和其他，包括 NAM 相关的类。NsObject 类是 OTclObject 的直接子类，同时也是所有基本 network component（网络组件）对象的父类，这些 network component 构成复合网络对象如 node （节点）和 link （连接），用来处理 packet。基于可能的输出 data path （数据路径）的数量，基本 network component （网络组件）进一步分为两类，Connector（连接器）和 Classifier（分类器），只有一个输出 data path（数据路径）的网络对象归到 Connector（连接器）下，而有多条输出 data path（数据路径）的归到 Classifier （分类器）下。 节点和路由选择node（节点）是一个由节点入口对象和分类器构成的复合对象，如下图所示，NS2 中有两种 node （节点），unicast（单播）节点和 multicast （多播）节点。单播节点中有两个分类器，一个是负责单播路由选择的地址分类器，另一个是端口分类器。类似地，多播节点也有两个分类器，一个分类器负责区分多播 packet 和单播 packet，另一个多播分类器负责多播路由选择。 节点在 NS2 中，默认节点设置为单播，如要使用多播节点，需要在 OTcl 脚本中显式声明，创建 scheduler（调度器）对象后立即声明，而后所有的节点都会被创建为多播节点。确定节点类型后，使用者还需要手动选择一个路由选择协议，不可使用默认协议。 unicast： $ns rtproto &lt;type&gt; &lt;type&gt;：Static，Session，DV，cost，multi-path multicast： $ns multicast 放在 set $ns [new Scheduler] 后 $ns mrtproto &lt;type&gt; &lt;type&gt;：CtrMCast，DM，ST，BST 关于路由选择的更多信息，可以参考 NS2 手册。 连接link（连接）是 NS2 中另一个主要的复合对象，当使用者使用 Simulator 对象的 duplex-link 成员函数，就可以创建一个双向连接，该连接包括两条单向连接，分别连接的双方，如下图所示。 另一个要注意到是，节点的输出队列其实被实现为 simplex （单向）连接的一部分。从队列中 dequeue （出队）的 packet被传递给模拟连接延时的 Delay（延时）对象，而从队列中 drop （抛弃）的 packet 的被传递给一个 Null 代理然后被释放。最后，TTL 对象为每一个接受到的 packet 计算（time to live parameter）生命参数的时间，并更新 packet 的 TTL 字段。 连接 追踪在 NS2 中，网络活动在单向连接中被记录，如果 simulator （模拟器）被指引去追踪网络活动（使用 $ns trace-all &lt;file&gt; 或 $ns namtrace-all &lt;file&gt;），那么 link （连接）在创建后，会有如下图所示的 trace（追踪）对象插入其中。使用者也可以在给定的源节点和目的节点间自定义一个 type 类型的 trace 对象，使用 creat-trace {type &lt;file&gt; &lt;src&gt; &lt;dst&gt;} 命令即可。 当插入到 link 中的 trace 对象（如 EnqT，DeqT 和 RecvT）受到一个 packet 时，它会向特定的 trace 文件中写入信息，且不需要消耗模拟时间，然后把该 packet 传递给下一个网络对象。trace 的格式讲在后面讨论。 插入了 trace 对象的连接 队列监视器本质上，tracing （追踪）对象被设计成可以记录 packet 的到达所在位置的时间。尽管使用者可以从 trace 中获得足够多的信息，如果他们对特定输出队列中发生的事的细节感兴趣，他们可以通过一些设置来获取这些信息。比如，如果使用者对 RED 队列的行为感兴趣，想计算平均队列大小的 dynamics 和某一特定 RED 队列的实时队列大小，或者其他有关监视队列的需求，队列监视器就可以有所帮助。队列监视行为使用队列监视器对象和 snoop 队列对象实现，如下图所示。 当一个 packet 到达时，snoop 队列对象通知 queue monitor（队列监视器）该事件，由队列监视器监视队列。后续会给出一个 RED 队列监视的例子，详细情况可以参考那个例子。现在只需要注意到，snoop 队列对象除了图中所示的用法，它还可以与 tracing （追踪）对象并行使用。 插入了 trace 对象的连接 一个 packet 流动的例子到现在为止，我们分析了两个最重要的网络组件——节点和连接。下图展示了一个模拟网络建立和 packet 流动的内部情况。网络由两个节点 n0 和 n1 组成，网络地址分别 0 和 1。绑定在 n0 上的一个 TCP 代理使用端口 0 与 绑定在 n1 上的使用端口 0 的 TCP sink 对象通信。最后，一个 FTP 应用绑定到 TCP 代理上，请求发送一些数据。注意，下图没有显示出 FTP 在 TCP 上的具体行为，仅仅展示仿真网络和 packet 流动的详细内部情况。 插入了 trace 对象的连接 参考：WPI","content":"<p>我们在<a href=\"/2020/04/ns2-event-scheduler\">前文</a>讨论 NS2 中一个非常重要的组成——事件调度器，这篇文章将讨论 NS2 另一个关键的组成——网络组件，主要是复合网络组件。<br><a id=\"more\"></a><br>下图展示了 NS2 中部分 OTcl 类的部分体系结构，有助于我们理解基本的网络组件（network component），在<a href=\"http://www.sop.inria.fr/rodeo/personnel/Antonie.Clerget/ns\" target=\"_blank\" rel=\"noopener\">这个链接</a>中可以找到 NS2 类的完整的体系结构。</p>\n<p></p><p align=\"center\" class=\"img\"><br>    <img src=\"/assets/img/2020/partial_class_hierarchy.png\" alt=\"partial_class_hierarchy\" width=\"500\"><br>    <span align=\"center\" style=\"color:#999\">类的部分体系结构</span><br></p><br>层级的根是 TclObject 类，它是所有 OTcl 库对象的父类，如 scheduler（调度器），network component（网络组件），（timer）计时器和其他，包括 NAM 相关的类。NsObject 类是 OTclObject 的直接子类，同时也是所有基本 network component（网络组件）对象的父类，这些 network component 构成复合网络对象如 node （节点）和 link （连接），用来处理 packet。基于可能的输出 data path （数据路径）的数量，基本 network component （网络组件）进一步分为两类，Connector（连接器）和 Classifier（分类器），只有一个输出 data path（数据路径）的网络对象归到 Connector（连接器）下，而有多条输出 data path（数据路径）的归到 Classifier （分类器）下。<p></p>\n<h2 id=\"节点和路由选择\"><a href=\"#节点和路由选择\" class=\"headerlink\" title=\"节点和路由选择\"></a>节点和路由选择</h2><p>node（节点）是一个由节点入口对象和分类器构成的复合对象，如下图所示，NS2 中有两种 node （节点），unicast（单播）节点和 multicast （多播）节点。单播节点中有两个分类器，一个是负责单播路由选择的地址分类器，另一个是端口分类器。类似地，多播节点也有两个分类器，一个分类器负责区分多播 packet 和单播 packet，另一个多播分类器负责多播路由选择。</p>\n<p></p><p align=\"center\" class=\"img\"><br>    <img src=\"/assets/img/2020/node.png\" alt=\"node\" width=\"600\"><br>    <span align=\"center\" style=\"color:#999\">节点</span><br></p><br>在 NS2 中，默认节点设置为单播，如要使用多播节点，需要在 OTcl 脚本中显式声明，创建 scheduler（调度器）对象后立即声明，而后所有的节点都会被创建为多播节点。确定节点类型后，使用者还需要手动选择一个路由选择协议，不可使用默认协议。<p></p>\n<ul>\n<li>unicast：<ul>\n<li><code>$ns rtproto &lt;type&gt;</code></li>\n<li><code>&lt;type&gt;</code>：Static，Session，DV，cost，multi-path</li>\n</ul>\n</li>\n<li>multicast：<ul>\n<li><code>$ns multicast</code> 放在 <code>set $ns [new Scheduler]</code> 后</li>\n<li><code>$ns mrtproto &lt;type&gt;</code></li>\n<li><code>&lt;type&gt;</code>：CtrMCast，DM，ST，BST</li>\n</ul>\n</li>\n</ul>\n<p>关于路由选择的更多信息，可以参考 <a href=\"http://www.isi.edu/nsnam/ns/ns-documentation.html\" target=\"_blank\" rel=\"noopener\">NS2 手册</a>。</p>\n<h2 id=\"连接\"><a href=\"#连接\" class=\"headerlink\" title=\"连接\"></a>连接</h2><p>link（连接）是 NS2 中另一个主要的复合对象，当使用者使用 Simulator 对象的 <code>duplex-link</code> 成员函数，就可以创建一个双向连接，该连接包括两条单向连接，分别连接的双方，如下图所示。</p>\n<p>另一个要注意到是，节点的输出队列其实被实现为 simplex （单向）连接的一部分。从队列中 dequeue （出队）的 packet被传递给模拟连接延时的 Delay（延时）对象，而从队列中 drop （抛弃）的 packet 的被传递给一个 Null 代理然后被释放。最后，TTL 对象为每一个接受到的 packet 计算（time to live parameter）生命参数的时间，并更新 packet 的 TTL 字段。</p>\n<div align=\"center\" class=\"img\"><br>    <img src=\"/assets/img/2020/link.png\" alt=\"link\" width=\"400\"><br>    <span align=\"center\" style=\"color:#999\">连接</span><br></div>\n\n<h3 id=\"追踪\"><a href=\"#追踪\" class=\"headerlink\" title=\"追踪\"></a>追踪</h3><p>在 NS2 中，网络活动在单向连接中被记录，如果 simulator （模拟器）被指引去追踪网络活动（使用 <code>$ns trace-all &lt;file&gt;</code> 或 <code>$ns namtrace-all &lt;file&gt;</code>），那么 link （连接）在创建后，会有如下图所示的 trace（追踪）对象插入其中。使用者也可以在给定的源节点和目的节点间自定义一个 type 类型的 trace 对象，使用 <code>creat-trace {type &lt;file&gt; &lt;src&gt; &lt;dst&gt;}</code> 命令即可。</p>\n<p>当插入到 link 中的 trace 对象（如 EnqT，DeqT 和 RecvT）受到一个 packet 时，它会向特定的 trace 文件中写入信息，且不需要消耗模拟时间，然后把该 packet 传递给下一个网络对象。trace 的格式讲在后面讨论。</p>\n<div align=\"center\" class=\"img\"><br>    <img src=\"/assets/img/2020/link_with_trace.png\" alt=\"link_with_trace\" width=\"750\"><br>    <span align=\"center\" style=\"color:#999\">插入了 trace 对象的连接</span><br></div>\n\n<h3 id=\"队列监视器\"><a href=\"#队列监视器\" class=\"headerlink\" title=\"队列监视器\"></a>队列监视器</h3><p>本质上，tracing （追踪）对象被设计成可以记录 packet 的到达所在位置的时间。尽管使用者可以从 trace 中获得足够多的信息，如果他们对特定输出队列中发生的事的细节感兴趣，他们可以通过一些设置来获取这些信息。比如，如果使用者对 RED 队列的行为感兴趣，想计算平均队列大小的 dynamics 和某一特定 RED 队列的实时队列大小，或者其他有关监视队列的需求，队列监视器就可以有所帮助。队列监视行为使用队列监视器对象和 snoop 队列对象实现，如下图所示。</p>\n<p>当一个 packet 到达时，snoop 队列对象通知 queue monitor（队列监视器）该事件，由队列监视器监视队列。后续会给出一个 RED 队列监视的例子，详细情况可以参考那个例子。现在只需要注意到，snoop 队列对象除了图中所示的用法，它还可以与 tracing （追踪）对象并行使用。</p>\n<div align=\"center\" class=\"img\"><br>    <img src=\"/assets/img/2020/link_with_snoop_queue.png\" alt=\"link_with_snoop_queue\" width=\"750\"><br>    <span align=\"center\" style=\"color:#999\">插入了 trace 对象的连接</span><br></div>\n\n<h2 id=\"一个-packet-流动的例子\"><a href=\"#一个-packet-流动的例子\" class=\"headerlink\" title=\"一个 packet 流动的例子\"></a>一个 packet 流动的例子</h2><p>到现在为止，我们分析了两个最重要的网络组件——节点和连接。下图展示了一个模拟网络建立和 packet 流动的内部情况。<br>网络由两个节点 n0 和 n1 组成，网络地址分别 0 和 1。绑定在 n0 上的一个 TCP 代理使用端口 0 与 绑定在 n1 上的使用端口 0 的 TCP sink 对象通信。最后，一个 FTP 应用绑定到 TCP 代理上，请求发送一些数据。<br>注意，下图没有显示出 FTP 在 TCP 上的具体行为，仅仅展示仿真网络和 packet 流动的详细内部情况。</p>\n<div align=\"center\" class=\"img\"><br>    <img src=\"/assets/img/2020/packet_flow.png\" alt=\"packet_flow\" width=\"750\"><br>    <span align=\"center\" style=\"color:#999\">插入了 trace 对象的连接</span><br></div>\n\n<hr>\n<p>参考：<a href=\"http://nile.wpi.edu.cn/NS/\" target=\"_blank\" rel=\"noopener\">WPI</a></p>\n","tags":[{"name":"网络","slug":"网络","permalink":"https://jonathan1214.github.io/tags/网络/"},{"name":"NS2","slug":"NS2","permalink":"https://jonathan1214.github.io/tags/NS2/"}]},{"title":"NS2 的介绍（三）—— 事件调度器","date":"2020-04-04T00:32:25.000Z","path":"2020/04/ns2-event-scheduler/","text":"在上一篇文章中，我们从一个简单的例子出发，从零开始编写了一个 NS2 模拟用的 OTcl 脚本，我们需要在脚本中完成以下任务： 创建 Simulator 对象； 创建 node 对象并构建 node 间的连接 link； 创建代理对象和 traffic 源对象，连接 node 和代理，连接代理和 traffic 源； 创建模拟场景 scenario，即定义调度任务； 开始模拟。 按照以上这些步骤编写就可完成模拟脚本编写。这篇文章中要介绍的是第 4 个步骤创建模拟场景的详细信息，我们将讨论 NS2 中的离散事件调度器。如第一篇文章中谈到的，在 NS2 中，事件调度器主要是由一些网络组件来使用，组件们模拟 packet 的处理时需要调度程序作为延时器或计时器。如下图展示，每一个网络对象使用一个时间调度器，图中需要注意：（1）网络对象发出一个事件那么它就要在预定的时间点上处理这个事件；（2）网络对象间的数据路径和事件路径不相同；若深入到代码层面，包在网络对象中传递时，发送方使用 send(Packet* p){target_-&gt;recv(p); 语句发送，接收方使用 recv(Packet*, Handler* h = 0) 方法接收。 离散事件调度器NS2 实现了两种事件调度器，实时调度器和非实时调度器。非实时调度器有三种实现，分别为 List、Heap 和 Calendar，它们逻辑上是一样的，之所以有这么多实现，是由于向下兼容的原因。默认的非实时调度器是 Calender 方式实现的。实时调度器是为仿真 emulation 使用的，允许仿真器 simulator 和真实的网络交互。下面这个就是一个指定事件调度器的例子。 set ns [new Simulator] $ns use-scheduler Heap 事件调度器还可以调度模拟事件，比如启动一个 FTP 应用或者结束模拟。事件调度器对象本身有一些模拟调度成员函数，比如 at &lt;time&gt; &quot;&lt;string&gt;&quot;，它就可以在发起一个在特定的模拟时间 &lt;time> 发生的叫做 AtEvent 的事件。AtEvent 其实是 Event 类的子类，它扩展了额外的变量保存 at &lt;time&gt; &quot;&lt;string&gt;&quot; 中的 string，尽管有扩展，它在事件调度器中和一般的事件还是被相同对待的。模拟开始后，当模拟时间到达事件队列中的 AtEvent 应该被调度的时间时，该 AtEvent 就会被传递给一个 AtEvent Handler，AtEvent Handler 只被创建一次并处理所有的的 AtEvent，AtEvent 的 &lt;string> 确定的 OTcl 命令也会被执行。下面是一个模拟事件调度示例： set ns [new Simulator] $ns use-scheduler Heap $ns at 300.5 &quot;complete_sim&quot; proc complete_sim {} {...} 注意到在上面的例子中，at &lt;time&gt; &quot;&lt;string&gt;&quot; 是 Simulator 对象 ns 的成员函数，但是我们要记住，Simulator 对象仅仅只是起到一个用户接口的作用，事实上它会去调用网络对象或者调度器对象的成员函数，由它们真正地完成工作。下面是一个函数列表和简单说明，这些函数就是 Simulator 对象用来接口调度器成员函数的成员函数。 成员函数 说明 Simulator instproc now 返回调度器对现在时间的 notion Simulator isntproc at args 在特定的时间调度执行代码 Simulator instproc at-now args 立即调度执行代码 Simulator instproc after n args n 秒后调度执行代码 Simulator instproc run args 启动调度器 Simulator instproc halt 停止或赞同调度器 参考：WPI","content":"<p>在<a href=\"/2020/04/ns2-simple-simulation-example\">上一篇文章</a>中，我们从一个简单的例子出发，从零开始编写了一个 NS2 模拟用的 OTcl 脚本，我们需要在脚本中完成以下任务：</p>\n<ol>\n<li>创建 Simulator 对象；</li>\n<li>创建 node 对象并构建 node 间的连接 link；</li>\n<li>创建代理对象和 traffic 源对象，连接 node 和代理，连接代理和 traffic 源；</li>\n<li>创建模拟场景 scenario，即定义调度任务；</li>\n<li>开始模拟。</li>\n</ol>\n<p>按照以上这些步骤编写就可完成模拟脚本编写。这篇文章中要介绍的是第 4 个步骤创建模拟场景的详细信息，我们将讨论 NS2 中的离散事件调度器。<br><a id=\"more\"></a><br>如<a href=\"/2020/04/02/ns2-simulation-overview\">第一篇文章</a>中谈到的，在 NS2 中，事件调度器主要是由一些网络组件来使用，组件们模拟 packet 的处理时需要调度程序作为延时器或计时器。如下图展示，每一个网络对象使用一个时间调度器，图中需要注意：<br>（1）网络对象发出一个事件那么它就要在预定的时间点上处理这个事件；<br>（2）网络对象间的数据路径和事件路径不相同；<br>若深入到代码层面，包在网络对象中传递时，发送方使用 <code>send(Packet* p){target_-&gt;recv(p);</code> 语句发送，接收方使用 <code>recv(Packet*, Handler* h = 0)</code> 方法接收。</p>\n<p><div align=\"center\" class=\"img\"><br>    <img src=\"/assets/img/2020/discrete_event_scheduler.png\" alt=\"discrete_event_scheduler\" width=\"750\"><br>    <span align=\"center\" style=\"color:#999\">离散事件调度器</span><br></div><br>NS2 实现了两种事件调度器，实时调度器和非实时调度器。非实时调度器有三种实现，分别为 List、Heap 和 Calendar，它们逻辑上是一样的，之所以有这么多实现，是由于向下兼容的原因。默认的非实时调度器是 Calender 方式实现的。实时调度器是为仿真 emulation 使用的，允许仿真器 simulator 和真实的网络交互。下面这个就是一个指定事件调度器的例子。</p>\n<pre><code>set ns [new Simulator]\n$ns use-scheduler Heap\n</code></pre><p>事件调度器还可以调度模拟事件，比如启动一个 FTP 应用或者结束模拟。事件调度器对象本身有一些模拟调度成员函数，比如 <code>at &lt;time&gt; &quot;&lt;string&gt;&quot;</code>，它就可以在发起一个在特定的模拟时间 &lt;time> 发生的叫做 <code>AtEvent</code> 的事件。<code>AtEvent</code> 其实是 <code>Event</code> 类的子类，它扩展了额外的变量保存 <code>at &lt;time&gt; &quot;&lt;string&gt;&quot;</code> 中的 <code>string</code>，尽管有扩展，它在事件调度器中和一般的事件还是被相同对待的。模拟开始后，当模拟时间到达事件队列中的 AtEvent 应该被调度的时间时，该 <code>AtEvent</code> 就会被传递给一个 <code>AtEvent Handler</code>，<code>AtEvent Handler</code> 只被创建一次并处理所有的的 <code>AtEvent</code>，<code>AtEvent</code> 的 &lt;string> 确定的 OTcl 命令也会被执行。下面是一个模拟事件调度示例：</p>\n<pre><code>set ns [new Simulator]\n$ns use-scheduler Heap\n$ns at 300.5 &quot;complete_sim&quot;\n\nproc complete_sim {} {...}\n</code></pre><p>注意到在上面的例子中，<code>at &lt;time&gt; &quot;&lt;string&gt;&quot;</code> 是 Simulator 对象 ns 的成员函数，但是我们要记住，Simulator 对象仅仅只是起到一个用户接口的作用，事实上它会去调用网络对象或者调度器对象的成员函数，由它们真正地完成工作。下面是一个函数列表和简单说明，这些函数就是 Simulator 对象用来接口调度器成员函数的成员函数。</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">成员函数</th>\n<th style=\"text-align:left\">说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">Simulator instproc now</td>\n<td style=\"text-align:left\">返回调度器对现在时间的 notion</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">Simulator isntproc at args</td>\n<td style=\"text-align:left\">在特定的时间调度执行代码</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">Simulator instproc at-now args</td>\n<td style=\"text-align:left\">立即调度执行代码</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">Simulator instproc after n args</td>\n<td style=\"text-align:left\">n 秒后调度执行代码</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">Simulator instproc run args</td>\n<td style=\"text-align:left\">启动调度器</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">Simulator instproc halt</td>\n<td style=\"text-align:left\">停止或赞同调度器</td>\n</tr>\n</tbody>\n</table>\n<hr>\n<p>参考：<a href=\"http://nile.wpi.edu.cn/NS/\" target=\"_blank\" rel=\"noopener\">WPI</a></p>\n","tags":[{"name":"网络","slug":"网络","permalink":"https://jonathan1214.github.io/tags/网络/"},{"name":"NS2","slug":"NS2","permalink":"https://jonathan1214.github.io/tags/NS2/"}]},{"title":"NS2 的介绍（二）—— 模拟示例","date":"2020-04-03T02:25:25.000Z","path":"2020/04/ns2-simple-simulation-example/","text":"我们在前一篇文章中简单介绍了 NS2，它是一个离散事件驱动的网络模拟器，从具体实现来看，它就是一个 OTcl 脚本解释器，由模拟事件调度程序、网络组件对象库和网络启动(plumbing)模块库组成。文中还介绍了这些部分是如何一起协同实现网络模拟的。有了关于 NS2 的基本概念，下面就来看一个具体的模拟示例，看看 OTcl 脚本如何编写，如何进行一个网络模拟吧。 OTcl 脚本编写前面提到，NS2 是一个 OTcl 解释器，在它上面进行模拟就需要编写 OTcl 脚本。在介绍 OTcl 编写之前，我们需要知道 Tcl 和 OTcl 的关系就像 C 和 C++ 的关系一样，在前者的基础上，后者增加了面向对象特性，下面就来看看 Tcl 和 OTcl 脚本如何编写吧。 Tcl 脚本一份 Tcl 脚本如下所示，需要关注的点如表所示，详细可以参考易百教程，对于基本的 NS2 脚本编写，了解这些就够了。 操作 关键字 格式 示例 定义 procedure proc proc &lt;procname&gt; {&lt;argumentlist&gt;} {&lt;contents&gt;} 第 2 行 定义变量 set set &lt;variablename&gt; &lt;variablevalue&gt; 第 3 行 表达式值替换 expr [expr &lt;expression&gt;] 第 5 行 变量值替换 $ $&lt;variablename&gt; 第 5 行 输出 puts puts &quot;&lt;contents&gt;&quot; 第 9 行 for 循环 for for {&lt;initial&gt;} {&lt;condition&gt;} {actioneveryloop} {&lt;mainLoopExpression&gt;} 第 7 行 if 条件选择语句 if if {&lt;condition&gt;} {&lt;expression&gt;} 第 8 行 ex-tcl.tclview raw12345678910111213141516# 定义一个 procedureproc test {} { set a 43 set b 27 set c [expr $a + $b] set d [expr [expr $a - $b] * $c] for {set k 0} {$k &lt; 10} {incr k} { if {$k &lt; 5} { puts \"k &lt; 5, pow = [expr pow($d, $k)]\" } else { puts \"k &gt;= 5, mod = [expr $d % $k]\" } }}# 调用 procedure testtest 将文件保存为 ex-tcl.tcl，然后在Shell中执行 ns ex-tcl.tcl，得到的的输出如下： 12345678910k &lt; 5, pow = 1.0k &lt; 5, pow = 1120.0k &lt; 5, pow = 1254400.0k &lt; 5, pow = 1404928000.0k &lt; 5, pow = 1573519360000.0k &gt;= 5, mod = 0k &gt;= 5, mod = 4k &gt;= 5, mod = 0k &gt;= 5, mod = 0k &gt;= 5, mod = 4 OTcl 脚本相比于 Tcl，OTcl 增加了面向对象功能，下面这个例子展示了 OTcl 中对象是如何被创建和使用的。作为一个 NS2 的使用者，我们可能不会需要编写自己的 OTcl 对象，但是了解它们还是很有帮助的，因为我们在 NS2 模拟中使用的所有的对象，无论它们是 C++ 编写后连接到 OTcl 还是是直接使用OTcl 编写的，它们本质上都是 OTcl 对象。 下面这个例子中创建了两个类 mom 和 kid，它们都有成员函数 greet，声明类之后，在第 17~19 行我们对类进行了实例化，并定义了实例的成员变量的值，然后在 23、24 行调用了两个实例的成员函数。从代码从我们很容易可以看出： 如何对类进行实例化？ 如何改变类实例的成员变量的值？ 如何调用类实例的成员函数？ 那么如何定义一个类和子类呢？定义一个类需要使用关键字 Class 创建一个类，使用关键字 instproc 定义类的成员函数。类的继承使用关键字 -superclass，在成员函数中，$self 的作用就好像 C++ 中的 this 指针一样，关键字 instvar 检查后面紧跟的变量名是否已在类或父类中被声明，如果已经被声明，那这个变量就是已声明变量的引用，反之，这就是一个新的变量声明。最后，创建一个类实例，需要使用关键字 new。 ex-otcl.tclview raw123456789101112131415161718192021222324# add a member function called \"greet\"Class mommom instproc greet {} { $self instvar age_ puts \"$age_ year old mom say: How are you doing\"}# child classClass kid -superclass momkid instproc greet {} { $self instvar age_ puts \"$age_ year old kid say: What's up, dude?'\"}# creat instanceset a [new mom]$a set age_ 45set b [new kid]$b set age_ 15# calling member function$a greet$b greet 文件保存为 ex-otcl.tcl，在 Bash 中执行 ns ex-otcl.tcl，得到如下的输出： 123445 year old mom say: How are you doing15 year old kid say: What&apos;s up, dude?&apos; 简单的 NS2 模拟示例现在我们已经知道了基本的 OTcl 脚本是如何编写的了，现在来看看如何编写一个执行 NS2 模拟的 OTcl 脚本吧。下面的 ns-simple.tcl OTcl 脚本中进行了简单的网络配置，执行如图所示的模拟方案。下载代码后，在 Bash 中执行 ns ns-simple.tcl 即可。 一个简单的网络拓扑和模拟方案示意图从图中可以看到，这个网络包括四个节点：n0，n1，n2和n3。n0 和 n2 间是双向连接，n1 和 n2 间的连接有 2Mpbs 的带宽，传输时延为 10ms。n2 和 n3 之间为双向连接，传输带宽为 1.7Mbps，传输时延为 20ms。每个节点都使用一个 DropTail 队列，队列最大长度为 10。n0 节点上绑定了一个 tcp 代理，该代理和绑定在 n3 上的『sink』代理间构建了一条连接 (connection)。默认情况下，tcp 代理可以生成的最大 packet 为 1KByte。tcp『sink』代理生成确认接受分组 P 的 ACK 并将 ACk 发送给分组的发送者（即发送分组 P 的 tcp 代理），然后释放接收到的分组 P。n1 节点上绑定了一个 udp 代理，该代理和绑定在 n3 上的『null』代理间建立了一条连接。『null』代理字释放接收到的 packet，不会向 packet 的发送方发送 ACK。ftp 和 cbr 是 traffic 生成器，分别绑定到 tcp 和 udp 代理上。cbr 被设定为可以生成以 1Mbps 的速率生成 1KByte 大小的 packet，它在 0.1s 时开始工作到 4.5s 时停止，而 ftp 在 1.0s 时开始工作到 4.0s 停止。 ns-simple.tclview raw12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576777879808182838485868788# create a simulator objectset ns [new Simulator]# set color for NAM$ns color 1 blue$ns color 2 red# creat four Nodesset n0 [$ns node]set n1 [$ns node]set n2 [$ns node]set n3 [$ns node]# open NAM file and trace fileset f [open out.tr w]$ns trace-all $fset nf [open out.nam w]$ns namtrace-all $nf# 设置节点间的连接$ns duplex-link $n0 $n2 2Mb 10ms DropTail$ns duplex-link $n1 $n2 2Mb 10ms DropTail$ns duplex-link $n2 $n3 1.7Mb 20ms DropTail# 设置 n2 n3 队列大小$ns queue-limit $n2 $n3 10# 设置 NAM 中节点的位置$ns duplex-link-op $n0 $n2 orient right-down$ns duplex-link-op $n1 $n2 orient right-up$ns duplex-link-op $n2 $n3 orient right# NAM 设置$ns duplex-link-op $n2 $n3 queuePos 0.5# 设置 TCP 连接set tcp [new Agent/TCP]$tcp set class_ 2$ns attach-agent $n0 $tcpset sink [new Agent/TCPSink]$ns attach-agent $n3 $sink$ns connect $tcp $sink# 在 TCP 连接上启动 FTPset ftp [new Application/FTP]$ftp attach-agent $tcp$ftp set type_ FTP# 设置 UDP 连接set udp [new Agent/UDP]$ns attach-agent $n1 $udpset null [new Agent/Null]$ns attach-agent $n3 $null$ns connect $udp $null$udp set fid_ 2# 在 UDP 连接上设置 CBRset cbr [new Application/Traffic/CBR]$cbr attach-agent $udp$cbr set type_ CBR$cbr set packet_size_ 1000$cbr set random_ false# 为CBR 和 FTP 代理调度事件$ns at 0.1 \"$cbr start\"$ns at 1.0 \"$ftp start\"$ns at 4.0 \"$ftp stop\"$ns at 4.5 \"$cbr stop\"# 释放tcp和sink代理 会自动释放$ns at 4.5 \"ns detach-agent $n0 $tcp ; $ns detach-agent $n3 $sink\"# 调用 finish 步骤$ns at 5.0 \"finish\"proc finish {} { global ns f nf $ns flush-trace close $f close $nf puts \"running nam...\" exec nam out.nam &amp; exit 0}puts \"CBR packet size = [$cbr set packet_size_]\"puts \"CBR interval = [$cbr set interval_]\"$ns run 从 Simulator 对象开始网络的基本设置下面是对上述脚本的解释，总体上来看，NS 脚本从创建一个 Simulator 对象实例开始。注意：代码中，&lt;&gt; 包围的内容在使用时要按照实际情况替代成正确的内容。 set ns [new Simulator]：生成一个 NS2 simulator 对象实例为 ns。这一行代码完成了一些工作： 初始化 packet 格式 创建一个调度器（默认为 calendar 调度器） 选择默认的地址格式 Simulator 的成员函数可以完成如下工作： 创建一些复合对象，如节点 node 和 连接 link 连接网络组件对象 设置网络组件对象的参数 创建代理间的连接，如 tcp 和 sink 间的连接 明确 NAM 展示的选项等等 大多数成员函数用于模拟设置（如 plumbing 函数）和调度，也有一些用于 NAM 展示的设置。Simulator 对象成员函数在文件 ns-2.35/tcl/lib/ns-lib.tcl 中实现。 $ns color &lt;fid&gt; &lt;color&gt;：为流 id 即 fid 确定的流中 packet 设置颜色。该 Simulator 对象的成员函数为 NAM 展示服务，对实际的模拟有影响。 $ns namtrace-all &lt;file-descrption&gt;：这个成员函数告诉模拟器（simulator）按照 NAM 的输入的格式记录模拟痕迹（trace）到文件中，同时也给出了 $ns flush-trace 命令要写入的文件。类似的，函数 trace-all 用来记录模拟痕迹（trace），但是是基本的格式。 proc finish {}：一个模拟结束够调用的函数，通过 $ns at 5.0 &quot;finish&quot; 调用。在函数中，定义了模拟后的后续操作，如保存文件。 set n0 [$ns node]：成员函数 node 创建一个节点 node0。NS2 中的节点是一个复合类，由地址和端口分类器组成。用户创建节点时，也可以分别创建一个地址和端口分类器对象，然后再把它们连接起来，但是这个 Simulator 成员函数让节点创建变得简单。文件 ns-2.35/tcl/lib/ns-lib.tcl 和 ns-2.35/tcl/lib/ns-node.tcl 中有关于创建节点的详细信息。 $ns duplex-link &lt;node1&gt; &lt;node2&gt; &lt;bandwidth&gt; &lt;delay&gt; &lt;queue-type&gt;：创建两条单向连接，指定带宽和时延，然后连接声明的两个节点。在 NS2 中，节点的输出队列实现为一个连接的一部分，因此用户在创建连接时要指明队列类型 queue-type。上面的代码中使用的 DropTail 队列，如果想使用其他队列，修改队列类型即可。连接的实现在下一篇文章会提到，类似节点，连接也是一个复合类型，用户可以创建出它的子对象然后把他们和节点连接起来。有关连接的源代码在文件 ns-2.35/tcl/lib/ns-lib.tcl 和 ns-2.35/tcl/lib/ns-link.tcl 中。在连接模块中，我们可以进行很多个性化的操作，详请参考 NS2 文档。 $ns queue-limit &lt;node1&gt; &lt;node2&gt; &lt;number&gt;：设置两条连接 node1 和 node2 单向连接的队列大小。 $ns duplex-link-op &lt;node1&gt; &lt;node2&gt; ...：NAM 展示的设置，即设置节点的位置。 设置代理和 traffic 源现在，基本的网络设置以及完成了，下一就是启动 traffic 代理，如 TCP 和 UDP，这两个代理的 traffic 源分别为 FTP 和 CBR，然后把代理绑定到对应的节点上，把 traffic 绑定到对应的代理上。 set &lt;tcpname&gt; [new Agent/TCP]：创建一个名为 tcpname 的代理。总的来说，用户都是以这种方式创建任何代理或 traffic 源。代理和 traffic 源其实是基本对象（非复合对象），它们是基于 C++ 实现的，然后连接到 OTcl 上，因此没有特殊的 Simulator 对象的成员函数来创建这些对象实例。用户应该知晓这些代理和 traffic 源对象的类名，如 Agent/TCP，Agent/TCPSink，Application/FTP 等等，详细可参看 NS2 的文档，在文件 ns-2.35/tcl/lib/ns-default.tcl 也可以找到相关信息，文件中包含了可使用的网络对象的默认参数值设置，因此，它可以很好的告诉我们哪种网络对象在 NS2 中可以使用，可设置的参数有哪些。 $ns attach-agent &lt;node&gt; &lt;agent&gt;：为节点绑定代理。事实上，这个attach-agent函数调用节点的成员函数attach来完成绑定工作，因此也可以使用如 $n0 attach $tcp0 将 节点 代理 tcp0 绑定到节点 n0 上。 $ns connect &lt;agent1&gt; &lt;agent2&gt;：创建了两个代理之后，下一步就是建立逻辑网络连接，通过这一行语句，代理间将对方的网络和端口地址设置为目的地址，从而建立网络连接。 编写模拟场景假设所有的网络设置已经完成了，接下来就该编写模拟场景 scenario。Simulator 对象有许多调度成员函数，下面这个是最经常被使用的： $ns at &lt;time&gt; &quot;&lt;string&gt;&quot;：让调度器在指定的 time 时执行 string 中的命令。如 $ns at 0.1 &quot;$cbr start&quot;，让调度器调用 CBR traffic 源对象的一个名为 start 的成员函数，start 会开始启动 CBR 发送数据。在 NS2 中，一个 traffic 源通常不会发生真实的数据，它会通知下层的代理『有一些数据要发生』，代理就会知道有多少数据要发生，然后由代理创建 packet 并发送出去。 开始模拟配置好网络，写好调度程序和指定模拟后的数据保存操作之后，最后开始模拟即可，脚本中的最后一句：$ns run 声明开始模拟。 参考：WPI","content":"<p>我们在前<a href=\"/2020/04/ns2-simulation-overview\">一篇文章</a>中简单介绍了 NS2，它是一个离散事件驱动的网络模拟器，从具体实现来看，它就是一个 OTcl 脚本解释器，由模拟事件调度程序、网络组件对象库和网络启动(plumbing)模块库组成。文中还介绍了这些部分是如何一起协同实现网络模拟的。有了关于 NS2 的基本概念，下面就来看一个具体的模拟示例，看看 OTcl 脚本如何编写，如何进行一个网络模拟吧。<br><a id=\"more\"></a></p>\n<h2 id=\"OTcl-脚本编写\"><a href=\"#OTcl-脚本编写\" class=\"headerlink\" title=\"OTcl 脚本编写\"></a>OTcl 脚本编写</h2><p>前面提到，NS2 是一个 OTcl 解释器，在它上面进行模拟就需要编写 OTcl 脚本。在介绍 OTcl 编写之前，我们需要知道 Tcl 和 OTcl 的关系就像 C 和 C++ 的关系一样，在前者的基础上，后者增加了面向对象特性，下面就来看看 Tcl 和 OTcl 脚本如何编写吧。</p>\n<h3 id=\"Tcl-脚本\"><a href=\"#Tcl-脚本\" class=\"headerlink\" title=\"Tcl 脚本\"></a>Tcl 脚本</h3><p>一份 Tcl 脚本如下所示，需要关注的点如表所示，详细可以参考<a href=\"https://yiibai.com/tcl\" target=\"_blank\" rel=\"noopener\">易百教程</a>，对于基本的 NS2 脚本编写，了解这些就够了。</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">操作</th>\n<th style=\"text-align:left\">关键字</th>\n<th style=\"text-align:left\">格式</th>\n<th style=\"text-align:left\">示例</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">定义 procedure</td>\n<td style=\"text-align:left\"><code>proc</code></td>\n<td style=\"text-align:left\"><code>proc &lt;procname&gt; {&lt;argumentlist&gt;} {&lt;contents&gt;}</code></td>\n<td style=\"text-align:left\">第 2 行</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">定义变量</td>\n<td style=\"text-align:left\"><code>set</code></td>\n<td style=\"text-align:left\"><code>set &lt;variablename&gt; &lt;variablevalue&gt;</code></td>\n<td style=\"text-align:left\">第 3 行</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">表达式值替换</td>\n<td style=\"text-align:left\"><code>expr</code></td>\n<td style=\"text-align:left\"><code>[expr &lt;expression&gt;]</code></td>\n<td style=\"text-align:left\">第 5 行</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">变量值替换</td>\n<td style=\"text-align:left\"><code>$</code></td>\n<td style=\"text-align:left\"><code>$&lt;variablename&gt;</code></td>\n<td style=\"text-align:left\">第 5 行</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">输出</td>\n<td style=\"text-align:left\"><code>puts</code></td>\n<td style=\"text-align:left\"><code>puts &quot;&lt;contents&gt;&quot;</code></td>\n<td style=\"text-align:left\">第 9 行</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">for 循环</td>\n<td style=\"text-align:left\"><code>for</code></td>\n<td style=\"text-align:left\"><code>for {&lt;initial&gt;} {&lt;condition&gt;} {actioneveryloop} {&lt;mainLoopExpression&gt;}</code></td>\n<td style=\"text-align:left\">第 7 行</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">if 条件选择语句</td>\n<td style=\"text-align:left\"><code>if</code></td>\n<td style=\"text-align:left\"><code>if {&lt;condition&gt;} {&lt;expression&gt;}</code></td>\n<td style=\"text-align:left\">第 8 行</td>\n</tr>\n</tbody>\n</table>\n<figure class=\"highlight tcl\"><figcaption><span>ex-tcl.tcl</span><a href=\"/downloads/code/ex-tcl.tcl\">view raw</a></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 定义一个 procedure</span></span><br><span class=\"line\"><span class=\"keyword\">proc</span><span class=\"title\"> test</span> {} {</span><br><span class=\"line\">    <span class=\"keyword\">set</span> a <span class=\"number\">43</span></span><br><span class=\"line\">    <span class=\"keyword\">set</span> b <span class=\"number\">27</span></span><br><span class=\"line\">    <span class=\"keyword\">set</span> c [<span class=\"keyword\">expr</span> $a + $b]</span><br><span class=\"line\">    <span class=\"keyword\">set</span> d [<span class=\"keyword\">expr</span> [<span class=\"keyword\">expr</span> $a - $b] * $c]</span><br><span class=\"line\">    <span class=\"keyword\">for</span> {<span class=\"keyword\">set</span> k <span class=\"number\">0</span>} {$k &lt; <span class=\"number\">10</span>} {<span class=\"keyword\">incr</span> k} {</span><br><span class=\"line\">        <span class=\"keyword\">if</span> {$k &lt; <span class=\"number\">5</span>} {</span><br><span class=\"line\">            <span class=\"keyword\">puts</span> <span class=\"string\">\"k &lt; 5, pow = [expr pow($d, $k)]\"</span></span><br><span class=\"line\">        } else {</span><br><span class=\"line\">            <span class=\"keyword\">puts</span> <span class=\"string\">\"k &gt;= 5, mod = [expr $d % $k]\"</span></span><br><span class=\"line\">        }</span><br><span class=\"line\">    }</span><br><span class=\"line\">}</span><br><span class=\"line\"><span class=\"comment\"># 调用 procedure test</span></span><br><span class=\"line\">test</span><br></pre></td></tr></table></figure>\n<p>将文件保存为 <code>ex-tcl.tcl</code>，然后在Shell中执行 <code>ns ex-tcl.tcl</code>，得到的的输出如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">k &lt; 5, pow = 1.0</span><br><span class=\"line\">k &lt; 5, pow = 1120.0</span><br><span class=\"line\">k &lt; 5, pow = 1254400.0</span><br><span class=\"line\">k &lt; 5, pow = 1404928000.0</span><br><span class=\"line\">k &lt; 5, pow = 1573519360000.0</span><br><span class=\"line\">k &gt;= 5, mod = 0</span><br><span class=\"line\">k &gt;= 5, mod = 4</span><br><span class=\"line\">k &gt;= 5, mod = 0</span><br><span class=\"line\">k &gt;= 5, mod = 0</span><br><span class=\"line\">k &gt;= 5, mod = 4</span><br></pre></td></tr></table></figure>\n<h3 id=\"OTcl-脚本\"><a href=\"#OTcl-脚本\" class=\"headerlink\" title=\"OTcl 脚本\"></a>OTcl 脚本</h3><p>相比于 Tcl，OTcl 增加了面向对象功能，下面这个例子展示了 OTcl 中对象是如何被创建和使用的。作为一个 NS2 的使用者，我们可能不会需要编写自己的 OTcl 对象，但是了解它们还是很有帮助的，因为我们在 NS2 模拟中使用的所有的对象，无论它们是 C++ 编写后连接到 OTcl 还是是直接使用OTcl 编写的，它们本质上都是 OTcl 对象。</p>\n<p>下面这个例子中创建了两个类 <code>mom</code> 和 <code>kid</code>，它们都有成员函数 <code>greet</code>，声明类之后，在第 17~19 行我们对类进行了实例化，并定义了实例的成员变量的值，然后在 23、24 行调用了两个实例的成员函数。从代码从我们很容易可以看出：</p>\n<ul>\n<li>如何对类进行实例化？</li>\n<li>如何改变类实例的成员变量的值？</li>\n<li>如何调用类实例的成员函数？</li>\n</ul>\n<p>那么如何定义一个类和子类呢？定义一个类需要使用关键字 <code>Class</code> 创建一个类，使用关键字 <code>instproc</code> 定义类的成员函数。类的继承使用关键字 <code>-superclass</code>，在成员函数中，<code>$self</code> 的作用就好像 C++ 中的 <code>this</code> 指针一样，关键字 <code>instvar</code> 检查后面紧跟的变量名是否已在类或父类中被声明，如果已经被声明，那这个变量就是已声明变量的引用，反之，这就是一个新的变量声明。最后，创建一个类实例，需要使用关键字 <code>new</code>。</p>\n<figure class=\"highlight tcl\"><figcaption><span>ex-otcl.tcl</span><a href=\"/downloads/code/ex-otcl.tcl\">view raw</a></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># add a member function called \"greet\"</span></span><br><span class=\"line\">Class mom</span><br><span class=\"line\">mom instproc greet {} {</span><br><span class=\"line\">    $self instvar age_</span><br><span class=\"line\">    <span class=\"keyword\">puts</span> <span class=\"string\">\"$age_ year old mom say:</span></span><br><span class=\"line\"><span class=\"string\">        How are you doing\"</span></span><br><span class=\"line\">}</span><br><span class=\"line\"><span class=\"comment\"># child class</span></span><br><span class=\"line\">Class kid -superclass mom</span><br><span class=\"line\">kid instproc greet {} {</span><br><span class=\"line\">    $self instvar age_</span><br><span class=\"line\">    <span class=\"keyword\">puts</span> <span class=\"string\">\"$age_ year old kid say:</span></span><br><span class=\"line\"><span class=\"string\">        What's up, dude?'\"</span></span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># creat instance</span></span><br><span class=\"line\"><span class=\"keyword\">set</span> a [new mom]</span><br><span class=\"line\">$a <span class=\"keyword\">set</span> age_ <span class=\"number\">45</span></span><br><span class=\"line\"><span class=\"keyword\">set</span> b [new kid]</span><br><span class=\"line\">$b <span class=\"keyword\">set</span> age_ <span class=\"number\">15</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># calling member function</span></span><br><span class=\"line\">$a greet</span><br><span class=\"line\">$b greet</span><br></pre></td></tr></table></figure>\n<p>文件保存为 <code>ex-otcl.tcl</code>，在 Bash 中执行 <code>ns ex-otcl.tcl</code>，得到如下的输出：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">45 year old mom say:</span><br><span class=\"line\">        How are you doing</span><br><span class=\"line\">15 year old kid say:</span><br><span class=\"line\">        What&apos;s up, dude?&apos;</span><br></pre></td></tr></table></figure>\n<h2 id=\"简单的-NS2-模拟示例\"><a href=\"#简单的-NS2-模拟示例\" class=\"headerlink\" title=\"简单的 NS2 模拟示例\"></a>简单的 NS2 模拟示例</h2><p>现在我们已经知道了基本的 OTcl 脚本是如何编写的了，现在来看看如何编写一个执行 NS2 模拟的 OTcl 脚本吧。<br>下面的 <code>ns-simple.tcl</code> OTcl 脚本中进行了简单的网络配置，执行如图所示的模拟方案。下载代码后，在 Bash 中执行 <code>ns ns-simple.tcl</code> 即可。</p>\n<p><div align=\"center\" class=\"img\"><br>    <img src=\"/assets/img/2020/simple_simulation_scenario.png\" alt=\"structure_of_ns2\" width=\"750\"><br>    <span align=\"center\" style=\"color:#999\">一个简单的网络拓扑和模拟方案示意图</span><br></div><br>从图中可以看到，这个网络包括四个节点：n0，n1，n2和n3。n0 和 n2 间是双向连接，n1 和 n2 间的连接有 2Mpbs 的带宽，传输时延为 10ms。n2 和 n3 之间为双向连接，传输带宽为 1.7Mbps，传输时延为 20ms。每个节点都使用一个 DropTail 队列，队列最大长度为 10。<br>n0 节点上绑定了一个 tcp 代理，该代理和绑定在 n3 上的『sink』代理间构建了一条连接 (connection)。默认情况下，tcp 代理可以生成的最大 packet 为 1KByte。tcp『sink』代理生成确认接受分组 P 的 ACK 并将 ACk 发送给分组的发送者（即发送分组 P 的 tcp 代理），然后释放接收到的分组 P。<br>n1 节点上绑定了一个 udp 代理，该代理和绑定在 n3 上的『null』代理间建立了一条连接。『null』代理字释放接收到的 packet，不会向 packet 的发送方发送 ACK。<br>ftp 和 cbr 是 traffic 生成器，分别绑定到 tcp 和 udp 代理上。cbr 被设定为可以生成以 1Mbps 的速率生成 1KByte 大小的 packet，它在 0.1s 时开始工作到 4.5s 时停止，而 ftp 在 1.0s 时开始工作到 4.0s 停止。</p>\n<figure class=\"highlight tcl\"><figcaption><span>ns-simple.tcl</span><a href=\"/downloads/code/ns-simple.tcl\">view raw</a></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># create a simulator object</span></span><br><span class=\"line\"><span class=\"keyword\">set</span> ns [new Simulator]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># set color for NAM</span></span><br><span class=\"line\">$ns color <span class=\"number\">1</span> blue</span><br><span class=\"line\">$ns color <span class=\"number\">2</span> red</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># creat four Nodes</span></span><br><span class=\"line\"><span class=\"keyword\">set</span> n0 [$ns node]</span><br><span class=\"line\"><span class=\"keyword\">set</span> n1 [$ns node]</span><br><span class=\"line\"><span class=\"keyword\">set</span> n2 [$ns node]</span><br><span class=\"line\"><span class=\"keyword\">set</span> n3 [$ns node]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># open NAM file and trace file</span></span><br><span class=\"line\"><span class=\"keyword\">set</span> f [<span class=\"keyword\">open</span> out.tr w]</span><br><span class=\"line\">$ns <span class=\"keyword\">trace</span>-all $f</span><br><span class=\"line\">set nf [<span class=\"keyword\">open</span> out.nam w]</span><br><span class=\"line\">$ns namtrace-all $nf</span><br><span class=\"line\"></span><br><span class=\"line\"># 设置节点间的连接</span><br><span class=\"line\">$ns duplex-link $n0 $n2 <span class=\"number\">2</span>Mb <span class=\"number\">10</span>ms DropTail</span><br><span class=\"line\">$ns duplex-link $n1 $n2 <span class=\"number\">2</span>Mb <span class=\"number\">10</span>ms DropTail</span><br><span class=\"line\">$ns duplex-link $n2 $n3 <span class=\"number\">1.7</span>Mb <span class=\"number\">20</span>ms DropTail</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 设置 n2 n3 队列大小</span></span><br><span class=\"line\">$ns queue-limit $n2 $n3 <span class=\"number\">10</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 设置 NAM 中节点的位置</span></span><br><span class=\"line\">$ns duplex-link-op $n0 $n2 orient right-down</span><br><span class=\"line\">$ns duplex-link-op $n1 $n2 orient right-up</span><br><span class=\"line\">$ns duplex-link-op $n2 $n3 orient right</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># NAM 设置</span></span><br><span class=\"line\">$ns duplex-link-op $n2 $n3 queuePos <span class=\"number\">0.5</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 设置 TCP 连接</span></span><br><span class=\"line\"><span class=\"keyword\">set</span> tcp [new Agent/TCP]</span><br><span class=\"line\">$tcp <span class=\"keyword\">set</span> class_ <span class=\"number\">2</span></span><br><span class=\"line\">$ns attach-agent $n0 $tcp</span><br><span class=\"line\">set sink [new Agent/TCPSink]</span><br><span class=\"line\">$ns attach-agent $n3 $sink</span><br><span class=\"line\">$ns connect $tcp $sink</span><br><span class=\"line\"># 在 TCP 连接上启动 FTP</span><br><span class=\"line\"><span class=\"keyword\">set</span> ftp [new Application/FTP]</span><br><span class=\"line\">$ftp attach-agent $tcp</span><br><span class=\"line\">$ftp <span class=\"keyword\">set</span> type_ FTP</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 设置 UDP 连接</span></span><br><span class=\"line\"><span class=\"keyword\">set</span> udp [new Agent/UDP]</span><br><span class=\"line\">$ns attach-agent $n1 $udp</span><br><span class=\"line\">set null [new Agent/Null]</span><br><span class=\"line\">$ns attach-agent $n3 $null</span><br><span class=\"line\">$ns connect $udp $null</span><br><span class=\"line\">$udp <span class=\"keyword\">set</span> fid_ <span class=\"number\">2</span></span><br><span class=\"line\"><span class=\"comment\"># 在 UDP 连接上设置 CBR</span></span><br><span class=\"line\"><span class=\"keyword\">set</span> cbr [new Application/Traffic/CBR]</span><br><span class=\"line\">$cbr attach-agent $udp</span><br><span class=\"line\">$cbr <span class=\"keyword\">set</span> type_ CBR</span><br><span class=\"line\">$cbr <span class=\"keyword\">set</span> packet_size_ <span class=\"number\">1000</span></span><br><span class=\"line\">$cbr <span class=\"keyword\">set</span> random_ false</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 为CBR 和 FTP 代理调度事件</span></span><br><span class=\"line\">$ns at <span class=\"number\">0.1</span> <span class=\"string\">\"$cbr start\"</span></span><br><span class=\"line\">$ns at <span class=\"number\">1.0</span> <span class=\"string\">\"$ftp start\"</span></span><br><span class=\"line\">$ns at <span class=\"number\">4.0</span> <span class=\"string\">\"$ftp stop\"</span></span><br><span class=\"line\">$ns at <span class=\"number\">4.5</span> <span class=\"string\">\"$cbr stop\"</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 释放tcp和sink代理 会自动释放</span></span><br><span class=\"line\">$ns at <span class=\"number\">4.5</span> <span class=\"string\">\"ns detach-agent $n0 $tcp ; $ns detach-agent $n3 $sink\"</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 调用 finish 步骤</span></span><br><span class=\"line\">$ns at <span class=\"number\">5.0</span> <span class=\"string\">\"finish\"</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">proc</span><span class=\"title\"> finish</span> {} {</span><br><span class=\"line\">    <span class=\"keyword\">global</span> ns f nf</span><br><span class=\"line\">    $ns <span class=\"keyword\">flush</span>-<span class=\"keyword\">trace</span></span><br><span class=\"line\">    <span class=\"keyword\">close</span> $f</span><br><span class=\"line\">    <span class=\"keyword\">close</span> $nf</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">puts</span> <span class=\"string\">\"running nam...\"</span></span><br><span class=\"line\">    <span class=\"keyword\">exec</span> nam out.nam &amp;</span><br><span class=\"line\">    <span class=\"keyword\">exit</span> <span class=\"number\">0</span></span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">puts</span> <span class=\"string\">\"CBR packet size = [$cbr set packet_size_]\"</span></span><br><span class=\"line\"><span class=\"keyword\">puts</span> <span class=\"string\">\"CBR interval = [$cbr set interval_]\"</span></span><br><span class=\"line\"></span><br><span class=\"line\">$ns run</span><br></pre></td></tr></table></figure>\n<h3 id=\"从-Simulator-对象开始网络的基本设置\"><a href=\"#从-Simulator-对象开始网络的基本设置\" class=\"headerlink\" title=\"从 Simulator 对象开始网络的基本设置\"></a>从 Simulator 对象开始网络的基本设置</h3><p>下面是对上述脚本的解释，总体上来看，NS 脚本从创建一个 Simulator 对象实例开始。<br><strong>注意</strong>：代码中，<code>&lt;&gt;</code> 包围的内容在使用时要按照实际情况替代成正确的内容。</p>\n<ul>\n<li><code>set ns [new Simulator]</code>：生成一个 NS2 simulator 对象实例为 ns。这一行代码完成了一些工作：<ul>\n<li>初始化 packet 格式</li>\n<li>创建一个调度器（默认为 calendar 调度器）</li>\n<li>选择默认的地址格式</li>\n</ul>\n</li>\n</ul>\n<p>Simulator 的成员函数可以完成如下工作：</p>\n<ul>\n<li>创建一些复合对象，如节点 node 和 连接 link</li>\n<li>连接网络组件对象</li>\n<li>设置网络组件对象的参数</li>\n<li>创建代理间的连接，如 tcp 和 sink 间的连接</li>\n<li>明确 NAM 展示的选项等等</li>\n</ul>\n<p>大多数成员函数用于模拟设置（如 plumbing 函数）和调度，也有一些用于 NAM 展示的设置。Simulator 对象成员函数在文件 <code>ns-2.35/tcl/lib/ns-lib.tcl</code> 中实现。</p>\n<ul>\n<li><code>$ns color &lt;fid&gt; &lt;color&gt;</code>：为流 id 即 fid 确定的流中 packet 设置颜色。该 Simulator 对象的成员函数为 NAM 展示服务，对实际的模拟有影响。</li>\n<li><code>$ns namtrace-all &lt;file-descrption&gt;</code>：这个成员函数告诉模拟器（simulator）按照 NAM 的输入的格式记录模拟痕迹（trace）到文件中，同时也给出了 <code>$ns flush-trace</code> 命令要写入的文件。类似的，函数 <code>trace-all</code> 用来记录模拟痕迹（trace），但是是基本的格式。</li>\n<li><code>proc finish {}</code>：一个模拟结束够调用的函数，通过 <code>$ns at 5.0 &quot;finish&quot;</code> 调用。在函数中，定义了模拟后的后续操作，如保存文件。</li>\n<li><code>set n0 [$ns node]</code>：成员函数 <code>node</code> 创建一个节点 node0。NS2 中的节点是一个复合类，由地址和端口分类器组成。用户创建节点时，也可以分别创建一个地址和端口分类器对象，然后再把它们连接起来，但是这个 Simulator 成员函数让节点创建变得简单。文件 <code>ns-2.35/tcl/lib/ns-lib.tcl</code> 和 <code>ns-2.35/tcl/lib/ns-node.tcl</code> 中有关于创建节点的详细信息。</li>\n<li><code>$ns duplex-link &lt;node1&gt; &lt;node2&gt; &lt;bandwidth&gt; &lt;delay&gt; &lt;queue-type&gt;</code>：创建两条单向连接，指定带宽和时延，然后连接声明的两个节点。在 NS2 中，节点的输出队列实现为一个连接的一部分，因此用户在创建连接时要指明队列类型 queue-type。上面的代码中使用的 DropTail 队列，如果想使用其他队列，修改队列类型即可。连接的实现在下一篇文章会提到，类似节点，连接也是一个复合类型，用户可以创建出它的子对象然后把他们和节点连接起来。有关连接的源代码在文件 <code>ns-2.35/tcl/lib/ns-lib.tcl</code> 和 <code>ns-2.35/tcl/lib/ns-link.tcl</code> 中。在连接模块中，我们可以进行很多个性化的操作，详请参考 NS2 文档。</li>\n<li><code>$ns queue-limit &lt;node1&gt; &lt;node2&gt; &lt;number&gt;</code>：设置两条连接 node1 和 node2 单向连接的队列大小。</li>\n<li><code>$ns duplex-link-op &lt;node1&gt; &lt;node2&gt; ...</code>：NAM 展示的设置，即设置节点的位置。</li>\n</ul>\n<h3 id=\"设置代理和-traffic-源\"><a href=\"#设置代理和-traffic-源\" class=\"headerlink\" title=\"设置代理和 traffic 源\"></a>设置代理和 traffic 源</h3><p>现在，基本的网络设置以及完成了，下一就是启动 traffic 代理，如 TCP 和 UDP，这两个代理的 traffic 源分别为 FTP 和 CBR，然后把代理绑定到对应的节点上，把 traffic 绑定到对应的代理上。</p>\n<ul>\n<li><code>set &lt;tcpname&gt; [new Agent/TCP]</code>：创建一个名为 tcpname 的代理。总的来说，用户都是以这种方式创建任何代理或 traffic 源。代理和 traffic 源其实是基本对象（非复合对象），它们是基于 C++ 实现的，然后连接到 OTcl 上，因此没有特殊的 Simulator 对象的成员函数来创建这些对象实例。用户应该知晓这些代理和 traffic 源对象的类名，如 Agent/TCP，Agent/TCPSink，Application/FTP 等等，详细可参看 NS2 的文档，在文件 <code>ns-2.35/tcl/lib/ns-default.tcl</code> 也可以找到相关信息，文件中包含了可使用的网络对象的默认参数值设置，因此，它可以很好的告诉我们哪种网络对象在 NS2 中可以使用，可设置的参数有哪些。</li>\n<li><code>$ns attach-agent &lt;node&gt; &lt;agent&gt;</code>：为节点绑定代理。事实上，这个<code>attach-agent</code>函数调用节点的成员函数<code>attach</code>来完成绑定工作，因此也可以使用如 <code>$n0 attach $tcp0</code> 将 节点 代理 tcp0 绑定到节点 n0 上。</li>\n<li><code>$ns connect &lt;agent1&gt; &lt;agent2&gt;</code>：创建了两个代理之后，下一步就是建立逻辑网络连接，通过这一行语句，代理间将对方的网络和端口地址设置为目的地址，从而建立网络连接。</li>\n</ul>\n<h3 id=\"编写模拟场景\"><a href=\"#编写模拟场景\" class=\"headerlink\" title=\"编写模拟场景\"></a>编写模拟场景</h3><p>假设所有的网络设置已经完成了，接下来就该编写模拟场景 scenario。Simulator 对象有许多调度成员函数，下面这个是最经常被使用的：</p>\n<ul>\n<li><code>$ns at &lt;time&gt; &quot;&lt;string&gt;&quot;</code>：让调度器在指定的 time 时执行 string 中的命令。如 <code>$ns at 0.1 &quot;$cbr start&quot;</code>，让调度器调用 CBR traffic 源对象的一个名为 start 的成员函数，start 会开始启动 CBR 发送数据。在 NS2 中，一个 traffic 源通常不会发生真实的数据，它会通知下层的代理『有一些数据要发生』，代理就会知道有多少数据要发生，然后由代理创建 packet 并发送出去。</li>\n</ul>\n<h3 id=\"开始模拟\"><a href=\"#开始模拟\" class=\"headerlink\" title=\"开始模拟\"></a>开始模拟</h3><p>配置好网络，写好调度程序和指定模拟后的数据保存操作之后，最后开始模拟即可，脚本中的最后一句：<code>$ns run</code> 声明开始模拟。</p>\n<hr>\n<p>参考：<a href=\"http://nile.wpi.edu.cn/NS/\" target=\"_blank\" rel=\"noopener\">WPI</a></p>\n","tags":[{"name":"网络","slug":"网络","permalink":"https://jonathan1214.github.io/tags/网络/"},{"name":"NS2","slug":"NS2","permalink":"https://jonathan1214.github.io/tags/NS2/"}]},{"title":"NS2 的介绍（一）—— 概述","date":"2020-04-02T08:15:03.000Z","path":"2020/04/ns2-simulation-overview/","text":"最近在上一门叫『无线自组织网络与应用』的课程，介绍了很多以前没有接触过的概念，包括了一个叫 NS2 的仿真工具，在前面一篇文章中介绍的 AHOHA 协议也是在这门课程中有被详细讲述的。这篇文章基本上是这篇文章的翻译，介绍 NS2 这个仿真工具，给出这个它的概述。 NS2是什么NS2 是一个使用 C++ 和 OTcl 编写的面向对象的离散事件驱动的网络仿真器，在 UCBerkely 被开发出来。它主要用于局域网和广域网仿真。由于缺少适合新手入门的教程，NS2对于初学者来说不是很友好。 概述NS2 可以仿真各种各样的IP网络。它实现了一些网络协议如 TCP 和 UDP，文件传输协议如 FTP、Telnet、Web、CBR 和 VBR，路由队列管理机制如 DropTail、RED 和 CBQ，路由选择算法如 Dijkstra，等等。针对局域网仿真，NS2 还实现了组播和一些 MAC 层协议。这里要介绍的是 NS2 的基本结构，然后按照例子介绍细节。 用户角度的NS概览NS2 是 OTcl 脚本解释器，包括仿真事件调度程序、网络组件对象库和网络启动 (plumbing) 模块库。plumbing 模块通常实现为基本模拟对象成员函数。换句话说，使用 NS2，你需要使用 OTcl 语言写一个脚本，包括以下内容： 初始化一个事件调度程序 使用网络对象和 plumbing 函数建立网络拓扑结构 通过事件调度程序告知何时开始发送分组 network object 网络对象plumbing 函数通过为对象设定指向合适的对象的邻居指针，在网络对象中探索可能的数据通路，进而建立起整个网络。如此一来，使用者想要创建一个新的网络对象变得简单，只需写一个新的对象或者从对象库中创建一个复合对象，然后探索 (plumb) 通过这个新对象的数据通路即可。听起来比较复杂，但是 plumbing OTcl 模块让这一切变得非常简单，这也是 NS2 的强大之处。 event scheduler 事件调度程序除网络对象外，NS2 中另一个主要的组件就是事件调度程序。在 NS2 中，一个事件就是一个包 ID，这个 ID 是唯一的，涵盖了分配时间，以及用来处理该事件的指向下一个对象的指针。在 NS2 中，一个事件调度程序记录着模拟时间，并通过调用适当的网络组件启动在事件队列中调度好的应该在当前启动的所有事件，这些组件通常是发出事件并让事件与事件指出的包一起完成正确的指令。网络组件间进行通信，传递 packet，但是并不会消耗真实的仿真时间。所有需要消耗仿真时间来处理 packet 的网络组件通过使用事件调度程序完成，组件为待处理到packet发出一个事件然后等待组件自己启动事件，再进行进一步的行动处理 packet。 举个例子，一个网络转发组件S模拟一次转发的延时为 20us，它为一个需要转发的 packet P 向调度程序发出一个延时 20us 的事件 E，20us 后，调度程序 M 从事件队列中调度出这个事件 E 并把它立即发给转发组件 S ，然后由转发组件 S 将 packet P 交给适当的输出链接组件。 还有一种用法将事件调度程序当作计时器。比如，TCP 需要一个计时器记录一个 packet 的发送时间以备重发（发送一个具有相同 TCP 编号且不同 NS packet ID 的 packet）。计时器和延时器用类似的方式使用事件调度程序，不同之处在于计时器计算与 packet 相关的时间值，然后一段特定的时间过去后对该 packet 做合适的动作（如上面那个例子，计算 packet 的发送时间，如果超过预定时间重发该 packet），而不是模拟一个延时， C++ 与 NS2NS2 不仅可以用 OTcl 编写也可以用 C++ 编写。处于效率考量，NS2 将数据路径的实现和控制路径的实现分离开来，为了减少 packet 和事件的处理时间（注意，不是仿真时间），数据路径中的事件调度程序和基本网络组件对象用 C++ 编写然后编译，使用编译好的对象，OTcl 解释器通过一个 OTcl 连接为每一个 C++ 对象创建配对的 OTcl 对象，为成员函数创建配对的控制函数，为成员变量创建配对的配置变量，这样一来，对 C++ 对象的控制就传递给了 OTcl。向一个连接到 OTcl 的 C++ 对象中添加成员函数也是可能的，C++ 对象中不需要在一次模拟中被控制的或者不需要在内部被其他对象使用使用的，是不需要被连接到 OTcl 中。同样地，一个不在数据路径中的对象也可以使用 OTcl 实现。如图为一个对象在 C++ 和 OTcl 中的层次体系，可以看到，连接到 C++ 的 OTcl 对象和它连接的 C++ 对象具有相同的层次结构。 C++ 和 OTcl 的连接 NS2 的大体结构如图为 NS2 的整体结构，使用者站在图中的左下角，在 Tcl 中，使用 OTcl 库中的仿真对象设计并控制模拟。事件调度程序和绝大多数网络组件是通过 C++ 实现的，并且 OTcl 通过 OTcl 连接 (linkage) 可以使用到它们，而这个连接是通过 tclcl 实现的。这些东西共同构成了 NS2，它就是一个扩展了面向对象的 Tcl 解释器和网络模拟库。 NS2 的体系结构图 小结本文简单分析了 NS2 的大体结构和体系结构。现在来考虑下如何获得 NS2 的仿真结果，如第一张图所示，，当仿真结束时，NS2 按照输入的 Tcl（或 OTcl）脚本中的说明产生一个或者多个文本输出文件，其中包含了详细的仿真数据。这些数据可用于后续的仿真分析中，或者作为图形化仿真展示工具 NAM 的输入。 参考：WPI 大学的资源","content":"<p>最近在上一门叫『无线自组织网络与应用』的课程，介绍了很多以前没有接触过的概念，包括了一个叫 NS2 的仿真工具，在前面<a href=\"/2020/03/latex-notes-1-basic-concepts/\">一篇文章</a>中介绍的 AHOHA 协议也是在这门课程中有被详细讲述的。这篇文章基本上是<a href=\"http://nile.wpi.edu.cn/NS/\" target=\"_blank\" rel=\"noopener\">这篇文章</a>的翻译，介绍 NS2 这个仿真工具，给出这个它的概述。<br><a id=\"more\"></a></p>\n<h2 id=\"NS2是什么\"><a href=\"#NS2是什么\" class=\"headerlink\" title=\"NS2是什么\"></a>NS2是什么</h2><p>NS2 是一个使用 C++ 和 OTcl 编写的面向对象的离散事件驱动的网络仿真器，在 UCBerkely 被开发出来。它主要用于局域网和广域网仿真。由于缺少适合新手入门的教程，NS2对于初学者来说不是很友好。</p>\n<h2 id=\"概述\"><a href=\"#概述\" class=\"headerlink\" title=\"概述\"></a>概述</h2><p>NS2 可以仿真各种各样的IP网络。它实现了一些网络协议如 TCP 和 UDP，文件传输协议如 FTP、Telnet、Web、CBR 和 VBR，路由队列管理机制如 DropTail、RED 和 CBQ，路由选择算法如 Dijkstra，等等。针对局域网仿真，NS2 还实现了组播和一些 MAC 层协议。这里要介绍的是 NS2 的基本结构，然后按照例子介绍细节。</p>\n<p><div align=\"center\" class=\"img\"><br>    <img src=\"/assets/img/2020/structure_of_ns2.png\" alt=\"structure_of_ns2\" width=\"750\"><br>    <span align=\"center\" style=\"color:#999\">用户角度的NS概览</span><br></div><br>NS2 是 OTcl 脚本解释器，包括仿真事件调度程序、网络组件对象库和网络启动 (plumbing) 模块库。plumbing 模块通常实现为基本模拟对象成员函数。换句话说，使用 NS2，你需要使用 OTcl 语言写一个脚本，包括以下内容：</p>\n<ul>\n<li>初始化一个事件调度程序</li>\n<li>使用网络对象和 plumbing 函数建立网络拓扑结构</li>\n<li>通过事件调度程序告知何时开始发送分组</li>\n</ul>\n<h3 id=\"network-object-网络对象\"><a href=\"#network-object-网络对象\" class=\"headerlink\" title=\"network object 网络对象\"></a>network object 网络对象</h3><p>plumbing 函数通过为<em>对象设定指向合适的对象的邻居指针</em>，在网络对象中探索可能的数据通路，进而建立起整个网络。如此一来，使用者想要创建一个新的网络对象变得简单，只需写一个新的对象或者从对象库中创建一个复合对象，然后探索 (plumb) 通过这个新对象的数据通路即可。<br>听起来比较复杂，但是 plumbing OTcl 模块让这一切变得非常简单，这也是 NS2 的强大之处。</p>\n<h3 id=\"event-scheduler-事件调度程序\"><a href=\"#event-scheduler-事件调度程序\" class=\"headerlink\" title=\"event scheduler 事件调度程序\"></a>event scheduler 事件调度程序</h3><p>除网络对象外，NS2 中另一个主要的组件就是事件调度程序。在 NS2 中，一个事件就是一个包 ID，这个 ID 是唯一的，涵盖了分配时间，以及用来处理该事件的指向下一个对象的指针。在 NS2 中，一个事件调度程序<strong>记录着模拟时间</strong>，并通过调用适当的网络组件启动在<strong>事件队列</strong>中调度好的应该在当前启动的所有事件，这些组件通常是发出事件并让事件与事件指出的包一起完成正确的指令。网络组件间进行通信，传递 packet，但是并不会消耗真实的仿真时间。所有需要消耗仿真时间来处理 packet 的网络组件通过使用事件调度程序完成，组件为待处理到packet发出一个事件然后等待组件自己启动事件，再进行进一步的行动处理 packet。</p>\n<p>举个例子，一个网络转发组件S模拟一次转发的延时为 20us，它为一个需要转发的 packet P 向调度程序发出一个延时 20us 的事件 E，20us 后，调度程序 M 从事件队列中调度出这个事件 E 并把它立即发给转发组件 S ，然后由转发组件 S 将 packet P 交给适当的输出链接组件。</p>\n<p>还有一种用法将事件调度程序当作计时器。比如，TCP 需要一个计时器记录一个 packet 的发送时间以备重发（发送一个具有相同 TCP 编号且不同 NS packet ID 的 packet）。计时器和延时器用类似的方式使用事件调度程序，不同之处在于计时器计算与 packet 相关的时间值，然后一段特定的时间过去后对该 packet 做合适的动作（如上面那个例子，计算 packet 的发送时间，如果超过预定时间重发该 packet），而不是模拟一个延时，</p>\n<h2 id=\"C-与-NS2\"><a href=\"#C-与-NS2\" class=\"headerlink\" title=\"C++ 与 NS2\"></a>C++ 与 NS2</h2><p>NS2 不仅可以用 OTcl 编写也可以用 C++ 编写。处于效率考量，NS2 将<strong>数据路径</strong>的实现和<strong>控制路径</strong>的实现分离开来，为了减少 packet 和事件的处理时间（注意，不是仿真时间），数据路径中的事件调度程序和基本网络组件对象用 C++ 编写然后编译，使用编译好的对象，OTcl 解释器通过一个 OTcl 连接为每一个 C++ 对象创建配对的 OTcl 对象，为成员函数创建配对的控制函数，为成员变量创建配对的配置变量，这样一来，对 C++ 对象的控制就传递给了 OTcl。向一个连接到 OTcl 的 C++ 对象中添加成员函数也是可能的，C++ 对象中不需要在一次模拟中被控制的或者不需要在内部被其他对象使用使用的，是不需要被连接到 OTcl 中。同样地，一个不在数据路径中的对象也可以使用 OTcl 实现。如图为一个对象在 C++ 和 OTcl 中的层次体系，可以看到，连接到 C++ 的 OTcl 对象和它连接的 C++ 对象具有相同的层次结构。</p>\n<p align=\"center\" class=\"img\"><br>    <img src=\"/assets/img/2020/cpp_vs_otcl.png\" alt=\"cpp_vs_otcl\" width=\"750\"><br>    <span align=\"center\" style=\"color:#999\">C++ 和 OTcl 的连接</span><br></p>\n\n<h2 id=\"NS2-的大体结构\"><a href=\"#NS2-的大体结构\" class=\"headerlink\" title=\"NS2 的大体结构\"></a>NS2 的大体结构</h2><p>如图为 NS2 的整体结构，使用者站在图中的左下角，在 Tcl 中，使用 OTcl 库中的仿真对象设计并控制模拟。事件调度程序和绝大多数网络组件是通过 C++ 实现的，并且 OTcl 通过 OTcl 连接 (linkage) 可以使用到它们，而这个连接是通过 tclcl 实现的。这些东西共同构成了 NS2，它就是一个扩展了面向对象的 Tcl 解释器和网络模拟库。</p>\n<p align=\"center\" class=\"img\"><br>    <img src=\"/assets/img/2020/architecture_view_of_ns.png\" alt=\"architecture_view_of_ns\" width=\"750\"><br>    <span align=\"center\" style=\"color:#999\">NS2  的体系结构图</span><br></p>\n\n<h2 id=\"小结\"><a href=\"#小结\" class=\"headerlink\" title=\"小结\"></a>小结</h2><p>本文简单分析了 NS2 的大体结构和体系结构。现在来考虑下如何获得 NS2 的仿真结果，如第一张图所示，，当仿真结束时，NS2 按照输入的 Tcl（或 OTcl）脚本中的说明产生一个或者多个文本输出文件，其中包含了详细的仿真数据。这些数据可用于后续的仿真分析中，或者作为图形化仿真展示工具 NAM 的输入。</p>\n<hr>\n<p>参考：<a href=\"http://nile.wpi.edu.cn/NS/\" target=\"_blank\" rel=\"noopener\">WPI 大学的资源</a></p>\n","tags":[{"name":"网络","slug":"网络","permalink":"https://jonathan1214.github.io/tags/网络/"},{"name":"NS2","slug":"NS2","permalink":"https://jonathan1214.github.io/tags/NS2/"}]},{"title":"在疫情中度过三月","date":"2020-03-31T12:14:59.000Z","path":"2020/03/the-third-month/","text":"惊觉已经是三月的最后一天，在这过去的一个月里，如果说有什么一定一提的，那一定是已经持续了快三个月的的新冠肺炎疫情，国内的疫情逐渐被控制住了，国外却又爆发了更大规模的，看起来返校遥遥无期。一月份的时候我肯定无法想象3月31日自己还在家，突发的疫情打乱我原有的计划，我本该在学校的教室里坐着的，现在却在家，本以为会非常非常想回学校，现在倒也还好，我只是怀念学校的WiFi罢了。疫情蔓延全球，经济衰退，股价暴跌，美股数次熔断，不可否认这是一个动荡的三月。所谓『祸兮福之所倚』，被困在山村中的我却得以享受宁静，可以专心做自己想做的事，我重新开始捡起以前学了一点就知难而退的东西，比如 C++，Java，Linux 还有算法，除此之外，我还开始坚持看书、记单词和记录生活，为了督促自己，我还使用 atimelogger 记录自己每一分钟的花销。如果不是因为疫情，我也不会如此百无聊赖，也就不会开始做这些事情，从这个角度而言，对我而言这还是福。 整个三月份，我看完了『乌合之众』、『金字塔原理』、『随机漫步的傻瓜』、『你的第一本哲学书』和『简单逻辑学』，平均一周看了一本多一点的书，还算可以，但是没有对其中任何一本书作一些读后感之类的笔记，算是一个不完整，希望在后面的阅读补上。这一个月也是折腾不断，看了算法看Linux，中间还去折腾下NS2——一坨年久失修的 shit。现在总结一下，算法是没看多少的，刚开始找了不知到哪儿来的一本 Java 算法书，看了一周几乎看完了，然而脑子中似乎什么都没剩下，于是我又照着『算法4』看，这次看得比较慢，加上中途新学期开学了，有很多课要上，到现在也才前两章，综合起来，我现在对排序算法比较清楚了，选择插入希尔归并快排都算了解得清楚了，现在还在继续看下去，第三章是『查找』，会讲到BST等新的数据结构。至于 Linux，照着鸟哥的书慢慢看，有时间就看一章，不求全部记住，只是有个大概概念就行了，现在也看到了 Shell 部分，坚持看下去吧。学这些东西，并不是出于需要，我只是凭借着一时冲动开始看，什么时候我都热情消退了，我也就放弃了，转而投向新的东西。这说是我很长时间来的一种学习态度吧，对于学校规定的课程内容我总感觉不是很有意思，讲授的东西太过陈旧，我会凭借着冲动去随便投入到一些东西中去，既是对自己冲动的满足也是对那些陈旧无聊的知识的逃避。 这个三月我也不是一切顺利，有两次突然陷入了一种极度的焦虑之中，在那种状态下，我什么都不想做，不愿意去做我应该做的事情，只想一直盯着手机看，好在持续一两天之后这种感觉就会很快消失，一切重归正常，但我知道几周后这种感觉又会到来。暂时还没有什么好办法应对这种情况，我只能选择接受它，并在它到来时暂时放下手头的工作，就当是一时的放松，但我坚信会找到办法的。 身处动荡之中，怀抱希望，希望一切都好起来。","content":"<p>惊觉已经是三月的最后一天，在这过去的一个月里，如果说有什么一定一提的，那一定是已经持续了快三个月的的新冠肺炎疫情，国内的疫情逐渐被控制住了，国外却又爆发了更大规模的，看起来返校遥遥无期。一月份的时候我肯定无法想象3月31日自己还在家，突发的疫情打乱我原有的计划，我本该在学校的教室里坐着的，现在却在家，本以为会非常非常想回学校，现在倒也还好，我只是怀念学校的WiFi罢了。<br><a id=\"more\"></a><br>疫情蔓延全球，经济衰退，股价暴跌，美股数次熔断，不可否认这是一个动荡的三月。所谓『祸兮福之所倚』，被困在山村中的我却得以享受宁静，可以专心做自己想做的事，我重新开始捡起以前学了一点就知难而退的东西，比如 C++，Java，Linux 还有算法，除此之外，我还开始坚持看书、记单词和记录生活，为了督促自己，我还使用 atimelogger 记录自己每一分钟的花销。如果不是因为疫情，我也不会如此百无聊赖，也就不会开始做这些事情，从这个角度而言，对我而言这还是福。</p>\n<p>整个三月份，我看完了『乌合之众』、『金字塔原理』、『随机漫步的傻瓜』、『你的第一本哲学书』和『简单逻辑学』，平均一周看了一本多一点的书，还算可以，但是没有对其中任何一本书作一些读后感之类的笔记，算是一个不完整，希望在后面的阅读补上。这一个月也是折腾不断，看了算法看Linux，中间还去折腾下NS2——一坨年久失修的 shit。现在总结一下，算法是没看多少的，刚开始找了不知到哪儿来的一本 Java 算法书，看了一周几乎看完了，然而脑子中似乎什么都没剩下，于是我又照着『算法4』看，这次看得比较慢，加上中途新学期开学了，有很多课要上，到现在也才前两章，综合起来，我现在对排序算法比较清楚了，选择插入希尔归并快排都算了解得清楚了，现在还在继续看下去，第三章是『查找』，会讲到BST等新的数据结构。至于 Linux，照着鸟哥的书慢慢看，有时间就看一章，不求全部记住，只是有个大概概念就行了，现在也看到了 Shell 部分，坚持看下去吧。<br>学这些东西，并不是出于需要，我只是凭借着一时冲动开始看，什么时候我都热情消退了，我也就放弃了，转而投向新的东西。这说是我很长时间来的一种学习态度吧，对于学校规定的课程内容我总感觉不是很有意思，讲授的东西太过陈旧，我会凭借着冲动去随便投入到一些东西中去，既是对自己冲动的满足也是对那些陈旧无聊的知识的逃避。</p>\n<p>这个三月我也不是一切顺利，有两次突然陷入了一种极度的焦虑之中，在那种状态下，我什么都不想做，不愿意去做我应该做的事情，只想一直盯着手机看，好在持续一两天之后这种感觉就会很快消失，一切重归正常，但我知道几周后这种感觉又会到来。暂时还没有什么好办法应对这种情况，我只能选择接受它，并在它到来时暂时放下手头的工作，就当是一时的放松，但我坚信会找到办法的。</p>\n<hr>\n<p>身处动荡之中，怀抱希望，希望一切都好起来。</p>\n","tags":[{"name":"记录","slug":"记录","permalink":"https://jonathan1214.github.io/tags/记录/"},{"name":"monthly","slug":"monthly","permalink":"https://jonathan1214.github.io/tags/monthly/"}]},{"title":"LaTex笔记（一）——基本概念","date":"2020-03-27T04:13:12.000Z","path":"2020/03/latex-notes-1-basic-concepts/","text":"概述Tex是高德纳开发的排版文字和数学公式软件。TeX稳定，跨平台，支持多语言排版，其版本号非常有意思，无限趋近于pi，3.1415926…读作Tech，泰赫。 LaTex是一种格式，可以把LaTex理解成是对TeX的封装。LATeX使用TeX程序作为自己的排版引擎。设计目标是分离内容和格式。读作拉泰赫。 第一份代码1234\\documentclass&#123;article&#125;\\begin&#123;document&#125;``Hello world!'' from \\LaTeX\\end&#123;document&#125; 一份简短的程序，保存为helloworld.tex，然后在命令行下使用xelatex helloworld编译即可。 LaTeX命令和代码结构源代码为文本文件，包括了内容以及命令，可以控制样式，划分文档结构及排版公式。 命令和环境同几乎所有的编程语言一样，LaTeX命令对大小写敏感，命令以\\开头，有两种形式： \\ + 一串字母：如\\LaTex，且任意非字母符号为界限。暂且称其为字母形式。 \\ + 单个非字母符号：如\\$。称其为字符形式。 字母形式的命令忽略其后的所有连续空格，所有的空格都被认为用来标志命令的结束，如果需要空格，使用{}，如\\TeX{} user既可以把空格显示出来，类似于转义。 接受参数。包括可选参数和必选参数，可选参数用[]包裹，必选参数使用{}包裹。带*的命令可看为特殊的可选参数。 环境。可以使一些效果在局部生效，或是生成特殊的文档元素。用法： 123\\begin&#123;&lt;environment name&gt;&#125;[&lt;optional arguments&gt;]&#123;&lt;mandatory arguments&gt;&#125;...\\end&#123;&lt;environment name&gt;&#125; 分组。限制一些命令的作用范围。使用{}作为分组，分组中使用的命令限制在分组内。 源代码结构以\\documentclass{...}命令开头，花括号中指定了文档使用的文档类。有可选参数，可传递给指定文档类，最终作为文档类的参数。 然后在document环境中写文档正文。 123\\begin&#123;document&#125;...\\end&#123;document&#125; 在documentclass和\\begin中间的部分称为导言区。一般在其中使用\\usepackage调用宏包，对文档进行全局设置。 宏包和文档类文档类规定了LaTeX源代码说要生成的文档的性质。documentclass[&lt;options&gt;]{class-name}。 class-name即文档类名，包括LaTeX提供的article、book和report的标准文档类，还有派生出支持中文排版的ctexart，ctexbook，ctexrep，以及一些其他。 options为可选参数，指定文档类的选项，如字号、纸张大小和单双面等等。参数使用逗号分隔。documentclass[11pt,twosides,a4paper]{article}。 标准文档的选项包括：（略多，需要时查看即可）。 宏包用来扩展LaTeX的功能，如插入复杂表格和图片，增加颜色或超链接等等。语法类似使用文档类：usepackage[&lt;options&gt;]{package-names}。可以一次性使用多个宏包，逗号分隔即可。 命令行使用texdoc package-name查看包的使用方法。 LaTeX用到的文件编译使用文件： .sty：宏包文件。 .cls：文档类文件。 .bib：BiBTeX参考文献数据库文件。 .bst：BiBTeX用到的参考文献格式模板。 编译生成文件： .log：日志 .aux：LaTeX生成的主辅助文件，记录交叉引用、目录、参考文献的引用。 .toc：LaTeX生成目录记录文件 .lof：LaTeX生成图片记录 .lot：LaTeX生成表格记录 .bbl .blg .idx .ind .ilg .out 文件的组织方式可将源文件分隔成若干个文件，如将没章的内容单独写在一个文件中，然后使用\\include{&lt;filename&gt;}在源代码里引用即可。注意路径的书写。可以不带扩展名，默认为.tex。 使用\\include会另起一页，使用\\input{filename}避免这种情况。 导言区使用includeonly{&lt;filename1&gt;,&lt;filename2&gt;...}指定正文中可以引用的文件。 实用工具包：syntonly。然后在导言区使用\\syntaxonly，不生成PDF文档，加快编译速度。 注释：使用%。和MATLAB一样。 术语和概念引擎：XeTeX。格式：定义了一组命令的代码集，LaTeX。编译命令：实际调用的、结合引擎和格式的命令，xelatex。 链接：lshort","content":"<h2 id=\"概述\"><a href=\"#概述\" class=\"headerlink\" title=\"概述\"></a>概述</h2><p>Tex是高德纳开发的排版文字和数学公式软件。TeX稳定，跨平台，支持多语言排版，其版本号非常有意思，无限趋近于pi，3.1415926…读作Tech，泰赫。</p>\n<p>LaTex是一种格式，可以把LaTex理解成是对TeX的封装。LATeX使用TeX程序作为自己的排版引擎。设计目标是分离内容和格式。读作拉泰赫。<br><a id=\"more\"></a></p>\n<h2 id=\"第一份代码\"><a href=\"#第一份代码\" class=\"headerlink\" title=\"第一份代码\"></a>第一份代码</h2><figure class=\"highlight tex\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">\\<span class=\"name\">documentclass</span><span class=\"string\">&#123;article&#125;</span></span></span><br><span class=\"line\"><span class=\"tag\">\\<span class=\"name\">begin</span><span class=\"string\">&#123;document&#125;</span></span></span><br><span class=\"line\">``Hello world!'' from <span class=\"tag\">\\<span class=\"name\">LaTeX</span></span></span><br><span class=\"line\"><span class=\"tag\">\\<span class=\"name\">end</span><span class=\"string\">&#123;document&#125;</span></span></span><br></pre></td></tr></table></figure>\n<p>一份简短的程序，保存为<code>helloworld.tex</code>，然后在命令行下使用<code>xelatex helloworld</code>编译即可。</p>\n<h2 id=\"LaTeX命令和代码结构\"><a href=\"#LaTeX命令和代码结构\" class=\"headerlink\" title=\"LaTeX命令和代码结构\"></a>LaTeX命令和代码结构</h2><p>源代码为文本文件，包括了内容以及命令，可以控制样式，划分文档结构及排版公式。</p>\n<h3 id=\"命令和环境\"><a href=\"#命令和环境\" class=\"headerlink\" title=\"命令和环境\"></a>命令和环境</h3><p>同几乎所有的编程语言一样，LaTeX命令对<strong>大小写敏感</strong>，命令以<code>\\</code>开头，有两种形式：</p>\n<ul>\n<li>\\ + 一串字母：如<code>\\LaTex</code>，且任意非字母符号为界限。暂且称其为字母形式。</li>\n<li>\\ + 单个非字母符号：如<code>\\$</code>。称其为字符形式。</li>\n</ul>\n<p>字母形式的命令忽略其后的所有连续空格，所有的空格都被认为用来标志命令的结束，如果需要空格，使用<code>{}</code>，如<code>\\TeX{} user</code>既可以把空格显示出来，类似于<strong>转义</strong>。</p>\n<p>接受参数。包括可选参数和必选参数，可选参数用<code>[]</code>包裹，必选参数使用<code>{}</code>包裹。带<code>*</code>的命令可看为<em>特殊的可选参数</em>。</p>\n<p>环境。可以使一些效果在局部生效，或是生成特殊的文档元素。用法：</p>\n<figure class=\"highlight tex\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">\\<span class=\"name\">begin</span><span class=\"string\">&#123;&lt;environment name&gt;&#125;</span><span class=\"string\">[&lt;optional arguments&gt;]</span><span class=\"string\">&#123;&lt;mandatory arguments&gt;&#125;</span></span></span><br><span class=\"line\">...</span><br><span class=\"line\"><span class=\"tag\">\\<span class=\"name\">end</span><span class=\"string\">&#123;&lt;environment name&gt;&#125;</span></span></span><br></pre></td></tr></table></figure>\n<p>分组。限制一些命令的作用范围。使用<code>{}</code>作为分组，分组中使用的命令限制在分组内。</p>\n<h3 id=\"源代码结构\"><a href=\"#源代码结构\" class=\"headerlink\" title=\"源代码结构\"></a>源代码结构</h3><p>以<code>\\documentclass{...}</code>命令开头，花括号中指定了文档使用的文档类。有可选参数，可传递给指定文档类，最终作为文档类的参数。</p>\n<p>然后在document环境中写文档正文。</p>\n<figure class=\"highlight tex\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">\\<span class=\"name\">begin</span><span class=\"string\">&#123;document&#125;</span></span></span><br><span class=\"line\">...</span><br><span class=\"line\"><span class=\"tag\">\\<span class=\"name\">end</span><span class=\"string\">&#123;document&#125;</span></span></span><br></pre></td></tr></table></figure>\n<p>在<code>documentclass</code>和<code>\\begin</code>中间的部分称为导言区。一般在其中使用<code>\\usepackage</code>调用宏包，对文档进行全局设置。</p>\n<h2 id=\"宏包和文档类\"><a href=\"#宏包和文档类\" class=\"headerlink\" title=\"宏包和文档类\"></a>宏包和文档类</h2><h3 id=\"文档类\"><a href=\"#文档类\" class=\"headerlink\" title=\"文档类\"></a>文档类</h3><p>规定了LaTeX源代码说要生成的文档的性质。<code>documentclass[&lt;options&gt;]{class-name}</code>。</p>\n<p><code>class-name</code>即文档类名，包括LaTeX提供的article、book和report的<strong>标准文档类</strong>，还有派生出支持中文排版的ctexart，ctexbook，ctexrep，以及一些其他。</p>\n<p><code>options</code>为可选参数，指定文档类的选项，如字号、纸张大小和单双面等等。参数使用逗号分隔。<code>documentclass[11pt,twosides,a4paper]{article}</code>。</p>\n<p>标准文档的选项包括：（略多，需要时查看即可）。</p>\n<h3 id=\"宏包\"><a href=\"#宏包\" class=\"headerlink\" title=\"宏包\"></a>宏包</h3><p>用来扩展LaTeX的功能，如插入复杂表格和图片，增加颜色或超链接等等。语法类似使用文档类：<code>usepackage[&lt;options&gt;]{package-names}</code>。可以一次性使用多个宏包，逗号分隔即可。</p>\n<p>命令行使用<code>texdoc package-name</code>查看包的使用方法。</p>\n<h2 id=\"LaTeX用到的文件\"><a href=\"#LaTeX用到的文件\" class=\"headerlink\" title=\"LaTeX用到的文件\"></a>LaTeX用到的文件</h2><p>编译使用文件：</p>\n<ul>\n<li>.sty：宏包文件。</li>\n<li>.cls：文档类文件。</li>\n<li>.bib：BiBTeX参考文献数据库文件。</li>\n<li>.bst：BiBTeX用到的参考文献格式模板。</li>\n</ul>\n<p>编译生成文件：</p>\n<ul>\n<li>.log：日志</li>\n<li>.aux：LaTeX生成的主辅助文件，记录交叉引用、目录、参考文献的引用。</li>\n<li>.toc：LaTeX生成目录记录文件</li>\n<li>.lof：LaTeX生成图片记录</li>\n<li>.lot：LaTeX生成表格记录</li>\n<li>.bbl</li>\n<li>.blg</li>\n<li>.idx</li>\n<li>.ind</li>\n<li>.ilg</li>\n<li>.out</li>\n</ul>\n<h2 id=\"文件的组织方式\"><a href=\"#文件的组织方式\" class=\"headerlink\" title=\"文件的组织方式\"></a>文件的组织方式</h2><p>可将源文件分隔成若干个文件，如将没章的内容单独写在一个文件中，然后使用<code>\\include{&lt;filename&gt;}</code>在源代码里引用即可。注意路径的书写。可以不带扩展名，默认为.tex。</p>\n<p>使用<code>\\include</code>会另起一页，使用<code>\\input{filename}</code>避免这种情况。</p>\n<p>导言区使用<code>includeonly{&lt;filename1&gt;,&lt;filename2&gt;...}</code>指定正文中可以引用的文件。</p>\n<p>实用工具包：syntonly。然后在导言区使用<code>\\syntaxonly</code>，不生成PDF文档，加快编译速度。</p>\n<p>注释：使用<code>%</code>。和MATLAB一样。</p>\n<h2 id=\"术语和概念\"><a href=\"#术语和概念\" class=\"headerlink\" title=\"术语和概念\"></a>术语和概念</h2><p>引擎：XeTeX。<br>格式：定义了一组命令的代码集，LaTeX。<br>编译命令：实际调用的、结合引擎和格式的命令，xelatex。</p>\n<hr>\n<p>链接：<a href=\"https://mirrors.tuna.tsinghua.edu.cn/CTAN/info/lshort/chinese\" target=\"_blank\" rel=\"noopener\">lshort</a></p>\n","tags":[{"name":"LaTeX","slug":"LaTeX","permalink":"https://jonathan1214.github.io/tags/LaTeX/"}]},{"title":"胡言乱语","date":"2020-03-22T13:39:06.000Z","path":"2020/03/second-week/","text":"没想到有和上周一样，在周一写下上周的日常。不过这次我有话说，不是因为贪玩游戏，实在是因为周六晚上的突发事件打乱了周日的计划，不得已在半夜在农村道路上走上7里路，第二天已经没有精力去写这玩意儿了。翻看上周每天写下的只言片语，我发现若是只给我自己看，那还是有点东西可写的。 无法抵挡的快乐放纵在放纵当时带来的快乐无与伦比，让我无法阻挡，虽然我已经很少体验到放纵的快乐，但我深知它的吸引力是多么强大。放纵对我而言是个什么样的标准呢？一天打上三把游戏已经是放纵了，大概就是这样，那么我可以说周四我放纵了一次。我处于一种完全沉浸式投入的状态，不在乎自己眼睛的疲劳，全心投入，决心赢下当前的比赛，但我还想赢得更多，于是不断地玩下去。最终局数来到了4，花去了2h，我停了下来，没有继续玩下去。因为心心念念着学习知识，我停了下来，放弃了快乐。但是我知道，下一次我还是会沉浸其中，因为它能让我短暂地逃离现实，这是无法抵挡的快乐。 一个平庸的人几乎每天都要上课，老师讲得那些我从来没有听过的知识，但没有多大程度引起我的兴趣，对我而言学习它只是身为学生的一种职责。我被动地接受他们传递过来的东西，OSI参考模型、TCP/IP参考模型、ALOHA随机接入协议还有光纤的若干性质，我几乎没有记下什么东西，但是我尝试去发现其中的规则，那是一种很美的东西，我尝试像一个『一无所知』的人，面对这些问题我能给出什么样的解决方案，大部分时候我什么也发现不了，对于这些问题我也一筹莫展，更别提解决方案，我不过是个平庸的人。 教育使我成为什么样的人？通常我不会想这样的问题，因为只不过是活着而以，不需要赋予人生意义，成为一个什么样的人也许真的无关紧要。周六看了郑强教授的一个视频，让我想考虑下这个问题，但我知道我想不明白的，我只能回顾自己的人生，并尝试从一些事件归纳出自己被教育成一个什么样的人，具体内容慢慢写吧。 我是随机漫步的傻瓜我是个随机漫步的的傻瓜，但是我并没有受到眷顾，所以我还是个彻底的傻瓜。","content":"<p>没想到有和上周一样，在周一写下上周的日常。不过这次我有话说，不是因为贪玩游戏，实在是因为周六晚上的突发事件打乱了周日的计划，不得已在半夜在农村道路上走上7里路，第二天已经没有精力去写这玩意儿了。翻看上周每天写下的只言片语，我发现若是只给我自己看，那还是有点东西可写的。<br><a id=\"more\"></a></p>\n<h2 id=\"无法抵挡的快乐\"><a href=\"#无法抵挡的快乐\" class=\"headerlink\" title=\"无法抵挡的快乐\"></a>无法抵挡的快乐</h2><p>放纵在放纵当时带来的快乐无与伦比，让我无法阻挡，虽然我已经很少体验到放纵的快乐，但我深知它的吸引力是多么强大。放纵对我而言是个什么样的标准呢？一天打上三把游戏已经是放纵了，大概就是这样，那么我可以说周四我放纵了一次。我处于一种完全沉浸式投入的状态，不在乎自己眼睛的疲劳，全心投入，决心赢下当前的比赛，但我还想赢得更多，于是不断地玩下去。最终局数来到了4，花去了2h<br>，我停了下来，没有继续玩下去。因为心心念念着学习知识，我停了下来，放弃了快乐。但是我知道，下一次我还是会沉浸其中，因为它能让我短暂地逃离现实，这是无法抵挡的快乐。</p>\n<h2 id=\"一个平庸的人\"><a href=\"#一个平庸的人\" class=\"headerlink\" title=\"一个平庸的人\"></a>一个平庸的人</h2><p>几乎每天都要上课，老师讲得那些我从来没有听过的知识，但没有多大程度引起我的兴趣，对我而言学习它只是身为学生的一种职责。我被动地接受他们传递过来的东西，OSI参考模型、TCP/IP参考模型、ALOHA随机接入协议还有光纤的若干性质，我几乎没有记下什么东西，但是我尝试去发现其中的规则，那是一种很美的东西，我尝试像一个『一无所知』的人，面对这些问题我能给出什么样的解决方案，大部分时候我什么也发现不了，对于这些问题我也一筹莫展，更别提解决方案，我不过是个平庸的人。</p>\n<h2 id=\"教育使我成为什么样的人？\"><a href=\"#教育使我成为什么样的人？\" class=\"headerlink\" title=\"教育使我成为什么样的人？\"></a>教育使我成为什么样的人？</h2><p>通常我不会想这样的问题，因为只不过是活着而以，不需要赋予人生意义，成为一个什么样的人也许真的无关紧要。周六看了郑强教授的一个视频，让我想考虑下这个问题，但我知道我想不明白的，我只能回顾自己的人生，并尝试从一些事件归纳出自己被教育成一个什么样的人，具体内容慢慢写吧。</p>\n<h2 id=\"我是随机漫步的傻瓜\"><a href=\"#我是随机漫步的傻瓜\" class=\"headerlink\" title=\"我是随机漫步的傻瓜\"></a>我是随机漫步的傻瓜</h2><p>我是个随机漫步的的傻瓜，但是我并没有受到眷顾，所以我还是个彻底的傻瓜。</p>\n","tags":[{"name":"记录","slug":"记录","permalink":"https://jonathan1214.github.io/tags/记录/"},{"name":"weekly","slug":"weekly","permalink":"https://jonathan1214.github.io/tags/weekly/"}]},{"title":"信道共享技术简述与ALOHA的仿真","date":"2020-03-21T08:04:28.000Z","path":"2020/03/channel-sharing-and-aloha-imulation/","text":"MAC（Media Access Control）协议，即介质访问控制协议。MAC层需要实现数据帧的封装卸装、帧寻址和识别、帧的接受和发送、链路的管理和帧的差错控制等。屏蔽了不同物理链路的种类差异性。其核心是对有限物理资源的高效利用。在Ad Hoc网络中，由于其无中心和使用无线信道等特点，新带来的问题有：选择什么样的信道共享方式，如何处理终端暴露问题，如何隐藏终端，以及如何处理节点移动带来的影响。因而对MAC协议的要求更高。本文将探讨简单的信道共享技术，并对动态接入协议ALOHA进行分析和MATLAB仿真。 信道共享技术分类信道共享技术又称为多点接入技术，原理是通过一个专用信道将所有的用户连接起来。按照多个用户与一个主机连接的访问方法来划分，信道共享技术可以分为通过集中器或复用器相连和直接相连，前者即信道复用，后者又可分为受控接入和随机接入。 信道复用 受控接入 随机接入 信道复用这是一种应用的比较成熟的技术，集中器或复用器按顺序不断扫描各个端口，或采用中断技术来接受用户信息或转发。如FDM，TDM，CDM，WDM和STDM。考虑一个实际例子：两个用户A和B，都需要需要发送信息；如果采用FDM方式，则分别为A和B分配一条不同频率的信道，允许二者一起发送而不产生冲突；如果采用TDM方式，则A和B的数据帧交给集中器，集中器把二者的帧放在不同的时隙发送然后发送，也可以避免冲突。这可以通过集中器扫描，也可以通过用户发送请求产生中断来执行。其实这就是一种静态的信道分配，按频率、时间或码字对信道进行划分。显然，这会造成资源的浪费。 受控接入受控接入方式的网络拓扑是环型结构，分为集中式控制和分散式控制。集中式控制使用轮询方法，主机按顺序逐个询问各站是否有数据需要发送。分散式控制即使用令牌，在环路中有一个特殊的帧——『令牌』，沿着环路传递，只有获得了令牌的站才有权发送信息。 随机接入随机接入方式的网络拓扑是总线型结构，所有的站点可随时发送数据，争用信道，容易产生冲突，经典的协议有ALOHA，CSMA和CSMA/CD。 信道的静态和动态分配信道的静态分配即将信道资源N等分，这个资源包括时隙（slot）、频谱（frequency）和码字（code），适用于用户数量少、数据量大的情况。这种信道的分配方式在某系情况下是不合理，它不能满足用户对资源占用的不同需求，效率低，不合适多站点，不适于突发性数据。 信道的动态分配使用多路访问协议，动态分配信道资源提高信道利用率。可以这么理解：不对信道资源进行划分，用户产生了需求就进行处理，处理时占用全部的信道资源。这么做不可避免的会产生信道争用和冲突问题，可以牺牲一点自由，使用受控接入方式可以隐藏争用问题和解决冲突问题。或者可以直面信道争用和冲突，使用随机接入方式，其中一个重要的协议就是ALOHA。 从一个更高的角度上来看，信道复用技术是一种信道的静态分配技术，受控接入和随机接入是一种信道的动态分配技术。 ALOHA前面讲到，ALOHA协议是一种信道的动态分配协议，它实现了信道共享方式中的一种随机接入技术。在这种动态分配的方式下，信道有三种状态，传输，空闲和竞争，所有的站点都通过同一信道发送或接受帧，某一特定时刻只允许一个站点使用信道。 以一个数据帧A的发送为例，考虑其如何才能成功发送。发送时机有两种选择，连续时间或时间片，前者允许在任意时刻发送，后者将时间用时钟分离为片段，帧只允许在每一个片段开始瞬间发生。若是以连续时间发送，帧发送时，若信道是空闲状态，则成功开始发送帧，此时信道为传输状态，假设在帧发送时间内又有数据帧B的发送请求产生，则信道进入竞争状态，产生了冲突，帧A发送失败，帧B也发送失败，都需要重传，二者分别随机等待一段时间，然后进行发送，直到发送成功。 纯ALOHA帧传输示意图我们把以连续时间发送的称为纯ALOHA（pure ALOHA），按时间片发送到称为时隙ALOHA（slotted ALOHA），下面对它们的信道利用率进行分析。 pure ALOHA 信道利用率分析首先考虑pure ALOHA中一帧发送成功的条件，假设帧长固定，发送所需时间为T，则不难推知发送成功的条件为该帧发送前后各有一段T时间内没有其他帧发送，如下图所示。 纯ALOHA的帧发送成功条件 对其信道利用率分析我们先要确定一些条件： 假设：帧长固定，无限用户，按泊松分布产生新的数据帧。 网络负载为G，表示在T内总共发送的平均帧数，包括发送成功的帧和因碰撞未发送成功的帧。 吞吐率为S，表示在帧的发送时间T内成功发送的平均帧数。 简单分析可知，0&lt;=S&lt;=1，S=0表示在信道上无成功发送的数据；S=1表示数据帧一个接一个发送，这是不可能的。G只有在不发送碰撞时才和S相等，且可以远大于1。 我们研究信道利用率，就是要考虑在什么的样的网络负载下，能够取得最大的吞吐率，并且要知道这个最大的吞吐率。 对这个问题进行理论分析并不困难，稳定情况下，S=G*P[发送成功]，求出一个数据帧发送成功概率P即可，由前面的分析可知，当前帧要想发送成功，以为着当前时刻的前后T时间内，共2T时间内，没有其他数据帧的发送请求产生，按照数据帧的产生数或者说数据帧请求产生数在T时间内服从参数为G的泊松分布，不难得出P[发送成功]=((2G)^0/0!)*e^(-2G)，则吞吐率S=G*P[发送成功]=G*e^(-2G)，求极值可知，当G=0.5时，S取最大值0.184，非常小。 对这个过程进行MATLAB仿真并不难，具体思路如下：产生一系列值的G，对每一个帧，产生若干个服从参数为G的泊松分布随机数，若连续的前后两个随机数和为0，则表示发送成功，统计发送成功的数占所有随机数的比即为该负载G下发送成功的概率，在和G相乘求得此时的吞吐率S，对每一个G都这么求即可得出一系列的(G,S)，再使用plot作出图像，如下所示： 纯ALOHA的信道吞吐率与网络负载的关系 slotted ALOHA 信道利用率分析时隙ALOHA协议下，将信道时间划分为离散的时间隙，隙长为一个帧所需的发送时间，每个站点只能在时隙开始时才允许发。 分析信道利用率时，条件和纯ALOHA相同。重点也是在考虑发送成功的概率，在时隙ALOHA协议下，当前帧发送成功的条件为：当前发送时隙前的一个时隙T内没有新的数据帧发送请求产生。事实上，由于只允许在时隙开始时发送请求，站点发送的数据帧都是积攒下来的。可以求出P[发送成功]=(G^0/0!)*e^(-G)，S=G*e^(-G)，当G=1时，S取最大值0.368，是纯ALOHA的2倍，但还是不够高。仿真思路同纯ALOHA，最后作出的S-G图像如下所示： 时隙ALOHA的信道吞吐率与网络负载的关系 附MATLAB仿真代码：aloha_.mview raw12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455clear all;clc;% ALOHA 仿真% 网络负载G% 成功发送条件，请求为0T = 100000; % 仿真时间 1000个帧长load_scale = 0.1;G = 0:load_scale:5; % 网络负载requests = zeros(T+1, size(G,2)); % 请求次数pure_ALOHA_sucess = zeros(1,size(G,2)); % pure ALOHA成功次数slotted_ALOHA_sucess = zeros(1,size(G,2)); % slotted ALOHA% 产生请求for g = 1:size(G,2) requests(:,g) = random('Poisson',G(g),T+1,1);end% pure ALOHAfor g = 1:size(G,2) for index = 1:T if requests(index,g) + requests(index+1,g) == 0 pure_ALOHA_sucess(g) = pure_ALOHA_sucess(g) + 1; end if requests(index,g) == 0 slotted_ALOHA_sucess(g) = slotted_ALOHA_sucess(g) + 1; end endend%% calculate% pure ALOHAprobl_pure_ALOHA = pure_ALOHA_sucess / T; % 成功概率S_pure_ALOHA = G.*probl_pure_ALOHA; % 吞吐率% slotted ALOHAprobl_slotted_ALOHA = slotted_ALOHA_sucess / T;S_slotted_ALOHA = G.*probl_slotted_ALOHA;%% plot% purefigure(1)yyaxis leftplot(G,probl_pure_ALOHA)ylabel('Probablity of Sucess')yyaxis rightplot(G,S_pure_ALOHA)title('Average Throughput of Pure ALOHA')xlabel('G')ylabel('Average Throughput')grid on% slottedfigure(2)yyaxis leftplot(G,probl_slotted_ALOHA)ylabel('Probablity of Sucess')yyaxis rightplot(G,S_slotted_ALOHA)title('Average Throughput of Slotted ALOHA')xlabel('G')ylabel('Average Throughput')grid on","content":"<p>MAC（Media Access Control）协议，即介质访问控制协议。MAC层需要实现数据帧的封装卸装、帧寻址和识别、帧的接受和发送、链路的管理和帧的差错控制等。屏蔽了不同物理链路的种类差异性。其核心是<strong>对有限物理资源的高效利用</strong>。在Ad Hoc网络中，由于其无中心和使用无线信道等特点，新带来的问题有：选择什么样的信道共享方式，如何处理终端暴露问题，如何隐藏终端，以及如何处理节点移动带来的影响。因而对MAC协议的要求更高。本文将探讨简单的信道共享技术，并对动态接入协议<code>ALOHA</code>进行分析和<br>MATLAB仿真。<br><a id=\"more\"></a></p>\n<h2 id=\"信道共享技术分类\"><a href=\"#信道共享技术分类\" class=\"headerlink\" title=\"信道共享技术分类\"></a>信道共享技术分类</h2><p>信道共享技术又称为多点接入技术，原理是通过一个专用信道将所有的用户连接起来。按照多个用户与一个主机连接的访问方法来划分，信道共享技术可以分为通过集中器或复用器相连和直接相连，前者即信道复用，后者又可分为受控接入和随机接入。</p>\n<ul>\n<li><a href=\"#信道复用\">信道复用</a></li>\n<li><a href=\"#受控接入\">受控接入</a></li>\n<li><a href=\"#随机接入\">随机接入</a></li>\n</ul>\n<h3 id=\"信道复用\"><a href=\"#信道复用\" class=\"headerlink\" title=\"信道复用\"></a>信道复用</h3><p>这是一种应用的比较成熟的技术，集中器或复用器按顺序不断扫描各个端口，或采用中断技术来接受用户信息或转发。如<code>FDM</code>，<code>TDM</code>，<code>CDM</code>，<code>WDM</code>和<code>STDM</code>。<br>考虑一个实际例子：两个用户A和B，都需要需要发送信息；如果采用FDM方式，则分别为A和B分配一条不同频率的信道，允许二者一起发送而不产生冲突；如果采用TDM方式，则A和B的数据帧交给集中器，集中器把二者的帧放在不同的时隙发送然后发送，也可以避免冲突。这可以通过集中器扫描，也可以通过用户发送请求产生中断来执行。<br>其实这就是一种静态的信道分配，按频率、时间或码字对信道进行划分。显然，这会造成资源的浪费。</p>\n<h3 id=\"受控接入\"><a href=\"#受控接入\" class=\"headerlink\" title=\"受控接入\"></a>受控接入</h3><p>受控接入方式的网络拓扑是环型结构，分为集中式控制和分散式控制。集中式控制使用轮询方法，主机按顺序逐个询问各站是否有数据需要发送。分散式控制即使用令牌，在环路中有一个特殊的帧——『令牌』，沿着环路传递，只有获得了令牌的站才有权发送信息。</p>\n<h3 id=\"随机接入\"><a href=\"#随机接入\" class=\"headerlink\" title=\"随机接入\"></a>随机接入</h3><p>随机接入方式的网络拓扑是总线型结构，所有的站点可随时发送数据，争用信道，容易产生冲突，经典的协议有ALOHA，CSMA和CSMA/CD。</p>\n<h3 id=\"信道的静态和动态分配\"><a href=\"#信道的静态和动态分配\" class=\"headerlink\" title=\"信道的静态和动态分配\"></a>信道的静态和动态分配</h3><p>信道的静态分配即将信道资源N等分，这个资源包括时隙（slot）、频谱（frequency）和码字（code），适用于用户数量少、数据量大的情况。这种信道的分配方式在某系情况下是不合理，它不能满足用户对资源占用的不同需求，效率低，不合适多站点，不适于突发性数据。</p>\n<p>信道的动态分配使用多路访问协议，动态分配信道资源提高信道利用率。可以这么理解：不对信道资源进行划分，用户产生了需求就进行处理，处理时占用全部的信道资源。这么做不可避免的会产生信道争用和冲突问题，可以牺牲一点自由，使用受控接入方式可以隐藏争用问题和解决冲突问题。或者可以直面信道争用和冲突，使用随机接入方式，其中一个重要的协议就是ALOHA。</p>\n<p>从一个更高的角度上来看，信道复用技术是一种信道的静态分配技术，受控接入和随机接入是一种信道的动态分配技术。</p>\n<h2 id=\"ALOHA\"><a href=\"#ALOHA\" class=\"headerlink\" title=\"ALOHA\"></a>ALOHA</h2><p>前面讲到，ALOHA协议是一种信道的动态分配协议，它实现了信道共享方式中的一种随机接入技术。在这种动态分配的方式下，信道有三种状态，<code>传输</code>，<code>空闲</code>和<code>竞争</code>，所有的站点都通过同一信道发送或接受帧，某一特定时刻只允许一个站点使用信道。</p>\n<p>以一个数据帧A的发送为例，考虑其如何才能成功发送。发送时机有两种选择，连续时间或时间片，前者允许在任意时刻发送，后者将时间用时钟分离为片段，帧只允许在每一个片段开始瞬间发生。若是以连续时间发送，帧发送时，若信道是空闲状态，则成功开始发送帧，此时信道为传输状态，假设在帧发送时间内又有数据帧B的发送请求产生，则信道进入竞争状态，产生了<em>冲突</em>，帧A发送失败，帧B也发送失败，都需要重传，二者分别随机等待一段时间，然后进行发送，直到发送成功。</p>\n<p><div align=\"center\" class=\"img\"><br>    <img src=\"/assets/img/2020/aloha_principle_illustration.png\" alt=\"aloha_principle_illustration\" width=\"750\"><br>    <span align=\"center\" style=\"color:#999\">纯ALOHA帧传输示意图</span><br></div><br>我们把以连续时间发送的称为纯ALOHA（pure ALOHA），按时间片发送到称为时隙ALOHA（slotted ALOHA），下面对它们的信道利用率进行分析。</p>\n<h3 id=\"pure-ALOHA-信道利用率分析\"><a href=\"#pure-ALOHA-信道利用率分析\" class=\"headerlink\" title=\"pure ALOHA 信道利用率分析\"></a>pure ALOHA 信道利用率分析</h3><p>首先考虑<code>pure ALOHA</code>中一帧发送成功的条件，假设帧长固定，发送所需时间为T，则不难推知发送成功的条件为<strong>该帧发送前后各有一段T时间内没有其他帧发送</strong>，如下图所示。</p>\n<p align=\"center\" class=\"img\"><br><img src=\"/assets/img/2020/aloha_success.png\" alt=\"pure_aloha_success\" width=\"750\"><br>    <span align=\"center\" style=\"color:#999\">纯ALOHA的帧发送成功条件</span><br></p>\n\n<p>对其信道利用率分析我们先要确定一些条件：</p>\n<ul>\n<li>假设：帧长固定，无限用户，按泊松分布产生新的数据帧。</li>\n<li>网络负载为G，表示在T内总共发送的平均帧数，包括发送成功的帧和因碰撞未发送成功的帧。</li>\n<li>吞吐率为S，表示在帧的发送时间T内成功发送的平均帧数。</li>\n</ul>\n<p>简单分析可知，0&lt;=S&lt;=1，S=0表示在信道上无成功发送的数据；S=1表示数据帧一个接一个发送，这是不可能的。G只有在不发送碰撞时才和S相等，且可以远大于1。</p>\n<p>我们研究信道利用率，就是要考虑在什么的样的网络负载下，能够取得最大的吞吐率，并且要知道这个最大的吞吐率。</p>\n<p>对这个问题进行理论分析并不困难，稳定情况下，<code>S=G*P[发送成功]</code>，求出一个数据帧发送成功概率P即可，由前面的分析可知，当前帧要想发送成功，以为着当前时刻的前后T时间内，共2T时间内，没有其他数据帧的发送请求产生，按照数据帧的产生数或者说数据帧请求产生数在T时间内服从参数为G的泊松分布，不难得出<code>P[发送成功]=((2G)^0/0!)*e^(-2G)</code>，则吞吐率<code>S=G*P[发送成功]=G*e^(-2G)</code>，求极值可知，当G=0.5时，S取最大值0.184，非常小。</p>\n<p>对这个过程进行MATLAB仿真并不难，具体思路如下：产生一系列值的G，对每一个帧，产生若干个服从参数为G的泊松分布随机数，若连续的前后两个随机数和为0，则表示发送成功，统计发送成功的数占所有随机数的比即为该负载G下发送成功的概率，在和G相乘求得此时的吞吐率S，对每一个G都这么求即可得出一系列的(G,S)，再使用plot作出图像，如下所示：</p>\n<p align=\"center\" class=\"img\"><br><img src=\"/assets/img/2020/pure_aloha.jpg\" alt=\"pure_aloha\" width=\"750\"><br>    <span align=\"center\" style=\"color:#999\">纯ALOHA的信道吞吐率与网络负载的关系</span><br></p>\n\n<h3 id=\"slotted-ALOHA-信道利用率分析\"><a href=\"#slotted-ALOHA-信道利用率分析\" class=\"headerlink\" title=\"slotted ALOHA 信道利用率分析\"></a>slotted ALOHA 信道利用率分析</h3><p>时隙ALOHA协议下，将信道时间划分为离散的时间隙，隙长为一个帧所需的发送时间，每个站点只能在时隙开始时才允许发。</p>\n<p>分析信道利用率时，条件和纯ALOHA相同。重点也是在考虑发送成功的概率，在时隙ALOHA协议下，当前帧发送成功的条件为：当前发送时隙前的一个时隙T内没有新的数据帧发送请求产生。事实上，由于只允许在时隙开始时发送请求，站点发送的数据帧都是积攒下来的。可以求出<code>P[发送成功]=(G^0/0!)*e^(-G)</code>，<code>S=G*e^(-G)</code>，当G=1时，S取最大值0.368，是纯ALOHA的2倍，但还是不够高。<br>仿真思路同纯ALOHA，最后作出的S-G图像如下所示：</p>\n<p align=\"center\" class=\"img\"><br>    <img src=\"/assets/img/2020/slotted_aloha.jpg\" alt=\"slotted_aloha\" width=\"750\"><br>    <span align=\"center\" style=\"color:#999\">时隙ALOHA的信道吞吐率与网络负载的关系</span><br></p>\n\n<p>附MATLAB仿真代码：<br><figure class=\"highlight matlab\"><figcaption><span>aloha_.m</span><a href=\"/downloads/code/aloha_.m\">view raw</a></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">clear all;clc;</span><br><span class=\"line\"><span class=\"comment\">% ALOHA 仿真</span></span><br><span class=\"line\"><span class=\"comment\">% 网络负载G</span></span><br><span class=\"line\"><span class=\"comment\">% 成功发送条件，请求为0</span></span><br><span class=\"line\">T = <span class=\"number\">100000</span>;   <span class=\"comment\">% 仿真时间 1000个帧长</span></span><br><span class=\"line\">load_scale = <span class=\"number\">0.1</span>;</span><br><span class=\"line\">G = <span class=\"number\">0</span>:load_scale:<span class=\"number\">5</span>; <span class=\"comment\">% 网络负载</span></span><br><span class=\"line\">requests = <span class=\"built_in\">zeros</span>(T+<span class=\"number\">1</span>, <span class=\"built_in\">size</span>(G,<span class=\"number\">2</span>)); <span class=\"comment\">% 请求次数</span></span><br><span class=\"line\">pure_ALOHA_sucess = <span class=\"built_in\">zeros</span>(<span class=\"number\">1</span>,<span class=\"built_in\">size</span>(G,<span class=\"number\">2</span>)); <span class=\"comment\">% pure ALOHA成功次数</span></span><br><span class=\"line\">slotted_ALOHA_sucess = <span class=\"built_in\">zeros</span>(<span class=\"number\">1</span>,<span class=\"built_in\">size</span>(G,<span class=\"number\">2</span>)); <span class=\"comment\">% slotted ALOHA</span></span><br><span class=\"line\"><span class=\"comment\">% 产生请求</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> g = <span class=\"number\">1</span>:<span class=\"built_in\">size</span>(G,<span class=\"number\">2</span>)</span><br><span class=\"line\">    requests(:,g) = random(<span class=\"string\">'Poisson'</span>,G(g),T+<span class=\"number\">1</span>,<span class=\"number\">1</span>);</span><br><span class=\"line\"><span class=\"keyword\">end</span></span><br><span class=\"line\"><span class=\"comment\">% pure ALOHA</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> g = <span class=\"number\">1</span>:<span class=\"built_in\">size</span>(G,<span class=\"number\">2</span>)</span><br><span class=\"line\">    <span class=\"keyword\">for</span> index = <span class=\"number\">1</span>:T</span><br><span class=\"line\">       <span class=\"keyword\">if</span> requests(index,g) + requests(index+<span class=\"number\">1</span>,g) == <span class=\"number\">0</span></span><br><span class=\"line\">           pure_ALOHA_sucess(g) = pure_ALOHA_sucess(g) + <span class=\"number\">1</span>;</span><br><span class=\"line\">       <span class=\"keyword\">end</span></span><br><span class=\"line\">       <span class=\"keyword\">if</span> requests(index,g) == <span class=\"number\">0</span></span><br><span class=\"line\">           slotted_ALOHA_sucess(g) = slotted_ALOHA_sucess(g) + <span class=\"number\">1</span>;</span><br><span class=\"line\">       <span class=\"keyword\">end</span></span><br><span class=\"line\">    <span class=\"keyword\">end</span></span><br><span class=\"line\"><span class=\"keyword\">end</span></span><br><span class=\"line\"><span class=\"comment\">%% calculate</span></span><br><span class=\"line\"><span class=\"comment\">% pure ALOHA</span></span><br><span class=\"line\">probl_pure_ALOHA = pure_ALOHA_sucess / T; <span class=\"comment\">% 成功概率</span></span><br><span class=\"line\">S_pure_ALOHA = G.*probl_pure_ALOHA;       <span class=\"comment\">% 吞吐率</span></span><br><span class=\"line\"><span class=\"comment\">% slotted ALOHA</span></span><br><span class=\"line\">probl_slotted_ALOHA = slotted_ALOHA_sucess / T;</span><br><span class=\"line\">S_slotted_ALOHA = G.*probl_slotted_ALOHA;</span><br><span class=\"line\"><span class=\"comment\">%% plot</span></span><br><span class=\"line\"><span class=\"comment\">% pure</span></span><br><span class=\"line\">figure(<span class=\"number\">1</span>)</span><br><span class=\"line\">yyaxis left</span><br><span class=\"line\">plot(G,probl_pure_ALOHA)</span><br><span class=\"line\">ylabel(<span class=\"string\">'Probablity of Sucess'</span>)</span><br><span class=\"line\">yyaxis right</span><br><span class=\"line\">plot(G,S_pure_ALOHA)</span><br><span class=\"line\">title(<span class=\"string\">'Average Throughput of Pure ALOHA'</span>)</span><br><span class=\"line\">xlabel(<span class=\"string\">'G'</span>)</span><br><span class=\"line\">ylabel(<span class=\"string\">'Average Throughput'</span>)</span><br><span class=\"line\">grid on</span><br><span class=\"line\"><span class=\"comment\">% slotted</span></span><br><span class=\"line\">figure(<span class=\"number\">2</span>)</span><br><span class=\"line\">yyaxis left</span><br><span class=\"line\">plot(G,probl_slotted_ALOHA)</span><br><span class=\"line\">ylabel(<span class=\"string\">'Probablity of Sucess'</span>)</span><br><span class=\"line\">yyaxis right</span><br><span class=\"line\">plot(G,S_slotted_ALOHA)</span><br><span class=\"line\">title(<span class=\"string\">'Average Throughput of Slotted ALOHA'</span>)</span><br><span class=\"line\">xlabel(<span class=\"string\">'G'</span>)</span><br><span class=\"line\">ylabel(<span class=\"string\">'Average Throughput'</span>)</span><br><span class=\"line\">grid on</span><br></pre></td></tr></table></figure></p>\n","tags":[{"name":"网络","slug":"网络","permalink":"https://jonathan1214.github.io/tags/网络/"},{"name":"Ad-Hoc","slug":"Ad-Hoc","permalink":"https://jonathan1214.github.io/tags/Ad-Hoc/"},{"name":"MAC协议","slug":"MAC协议","permalink":"https://jonathan1214.github.io/tags/MAC协议/"},{"name":"MATLAB","slug":"MATLAB","permalink":"https://jonathan1214.github.io/tags/MATLAB/"}]},{"title":"新学期的第一周","date":"2020-03-15T12:15:57.000Z","path":"2020/03/first-week-record-of-new-term/","text":"震惊的Joey 不知不觉间大三已经过完一半，想起在过去的两年半中好像没有值得纪念的事，有点无可奈何，但要说没有发生那么一件在当时让我很有感触的事，当然也不可能，只是我以为自己的记忆会帮我保存那些真正重要的感觉，因此没有记录，但是这样的事怎么会有那么多呢？亲人故去、终有所成之类的记忆深刻的事不常发生，更多的是生活中有感触的小事，它们发生很触动我，但它们又是那么不起眼，不久后我就会忘记。过去的都过去了，不过现在我不想就让现在的它们被遗忘，我要尽可能地记录。 新学期的第一周也就这么过去了，或者说新学期的第三周就这么过去了，因为疫情耽搁在家没法返校，导致前两周的电工实习没法线下上也没法在线上操作，因此前两周没课，所以这一周才算是我的新学期第一周，没有开始上课怎么能叫新学期呢？不管怎么算，这一周的的确确就这么过去了。 新学期的前三门课过去的一周里，我上了三门课：《计算机通信网络》、《无线自组织网络与应用》和《光通信网络》。每科两节课，一共是六节课。三位老师都很有意思，有说自己从教一纪不知点名为何物的，有网课平台整三四个的，课下还提醒你『你啥时候进的直播啥时候出去我这都有记录，那些进来签个到就走了的同学自己注意点』，也有正常上课群里发『1』签到的。抛开这些不说，老师们课上得挺好。 atimelogger 记录每一分钟周一晚上突然翻到这个自己两年前就下载过的APP————atimelogger，这是一个记录自己每一分钟用在何处的APP，我决定不再试一把，尝试记录自己每一分钟用在何处。从周二开始，这一周每一天我都几乎记录下了自己的每一分钟，这种感觉很奇妙，当你做什么的时候，你会意识到有一个时钟在走，你会不由自主地集中注意力，想要它走慢一点或者抓紧利用这有限的时间。后面我想，不管它在不在，我的生命时钟都在不停地走，不知道在某一天就会停下来，因为它是如此的不可感知，我很少注意到它，但是这个APP帮助我意识到了，它具象了我的生命时钟，让我感受到我的时间在不断消耗，我必须抓紧每一分钟。atimelogger上的记录显示：我每天都花了30~40分钟玩2K19；每天晚上我都会看一集『老友记』，用时22分钟；每天都会记单词，用时20~30分钟；每天我都至少在『微信读书』APP上看了1h书；每天我都至少在床上睡了8个小时；每天我都至少在学习成长上花了6h。我开始喜欢上这种记录的感觉。 重启 Blog周四晚上折腾了一晚，重启Blog，后面几天也在不断完善，终于到了现在这个样子。换了站点的头像，给站点添加了访问人数统计，为每一篇博文添加阅读数统计，在此感谢不蒜子大佬的脚本。周六晚上还添加了相册，到周日晚上，终于可以正常使用了。关于重启博客我是这样想的，上个月我就重启了『记录计划』，只是在手机上写，既然都要记录，为什么不放到网上呢？这样还方便查看，而且我会更有动力去写，Blog是一个比较好的选择。 话不多说，以上就是这一周，关于上的这些课的具体内容我会在后面的文章中详细记录。这些网络类的课很有意思，它们有一种规则的美感，我想如果能自己亲手制定某些规则并加以实现肯定让人兴奋。生活总是有很多的不确定，但我确定关于『记录』这件事我会坚持下去。","content":"<p></p><p align=\"center\" class=\"img\"><br>    <img src=\"/assets/img/2020/astonished_joey.jpg\" alt=\"astonished_joey\" width=\"750\"><br>    <span align=\"center\" style=\"color:#999\">震惊的Joey</span></p>\n<h2 id=\"\"><a href=\"#\" class=\"headerlink\" title=\"\"></a><p></p></h2><p>不知不觉间大三已经过完一半，想起在过去的两年半中好像没有值得纪念的事，有点无可奈何，但要说没有发生那么一件在当时让我很有感触的事，当然也不可能，只是我以为自己的记忆会帮我保存那些真正重要的感觉，因此没有记录，但是这样的事怎么会有那么多呢？亲人故去、终有所成之类的记忆深刻的事不常发生，更多的是生活中有感触的小事，它们发生很触动我，但它们又是那么不起眼，不久后我就会忘记。过去的都过去了，不过现在我不想就让现在的它们被遗忘，我要尽可能地记录。<br><a id=\"more\"></a></p>\n<p>新学期的第一周也就这么过去了，或者说新学期的第三周就这么过去了，因为疫情耽搁在家没法返校，导致前两周的电工实习没法线下上也没法在线上操作，因此前两周没课，所以这一周才算是我的新学期第一周，没有开始上课怎么能叫新学期呢？不管怎么算，这一周的的确确就这么过去了。</p>\n<h2 id=\"新学期的前三门课\"><a href=\"#新学期的前三门课\" class=\"headerlink\" title=\"新学期的前三门课\"></a>新学期的前三门课</h2><p>过去的一周里，我上了三门课：《计算机通信网络》、《无线自组织网络与应用》和《光通信网络》。每科两节课，一共是六节课。三位老师都很有意思，有说自己从教一纪不知点名为何物的，有网课平台整三四个的，课下还提醒你『你啥时候进的直播啥时候出去我这都有记录，那些进来签个到就走了的同学自己注意点』，也有正常上课群里发『1』签到的。抛开这些不说，老师们课上得挺好。</p>\n<h2 id=\"atimelogger-记录每一分钟\"><a href=\"#atimelogger-记录每一分钟\" class=\"headerlink\" title=\"atimelogger 记录每一分钟\"></a>atimelogger 记录每一分钟</h2><p>周一晚上突然翻到这个自己两年前就下载过的APP————atimelogger，这是一个记录自己每一分钟用在何处的APP，我决定不再试一把，尝试记录自己每一分钟用在何处。从周二开始，这一周每一天我都几乎记录下了自己的每一分钟，这种感觉很奇妙，当你做什么的时候，你会意识到有一个时钟在走，你会不由自主地集中注意力，想要它走慢一点或者抓紧利用这有限的时间。后面我想，不管它在不在，我的生命时钟都在不停地走，不知道在某一天就会停下来，因为它是如此的不可感知，我很少注意到它，但是这个APP帮助我意识到了，它具象了我的生命时钟，让我感受到我的时间在不断消耗，我必须抓紧每一分钟。<br>atimelogger上的记录显示：我每天都花了30~40分钟玩2K19；每天晚上我都会看一集『老友记』，用时22分钟；每天都会记单词，用时20~30分钟；每天我都至少在『微信读书』APP上看了1h书；每天我都至少在床上睡了8个小时；每天我都至少在学习成长上花了6h。我开始喜欢上这种记录的感觉。</p>\n<h2 id=\"重启-Blog\"><a href=\"#重启-Blog\" class=\"headerlink\" title=\"重启 Blog\"></a>重启 Blog</h2><p>周四晚上折腾了一晚，重启Blog，后面几天也在不断完善，终于到了现在这个样子。换了站点的头像，给站点添加了访问人数统计，为每一篇博文添加阅读数统计，在此感谢不蒜子大佬的脚本。周六晚上还添加了<code>相册</code>，到周日晚上，终于可以正常使用了。关于重启博客我是这样想的，上个月我就重启了『记录计划』，只是在手机上写，既然都要记录，为什么不放到网上呢？这样还方便查看，而且我会更有动力去写，Blog是一个比较好的选择。</p>\n<hr>\n<p>话不多说，以上就是这一周，关于上的这些课的具体内容我会在后面的文章中详细记录。这些网络类的课很有意思，它们有一种规则的美感，我想如果能自己亲手制定某些规则并加以实现肯定让人兴奋。生活总是有很多的不确定，但我确定关于『记录』这件事我会坚持下去。</p>\n","tags":[{"name":"记录","slug":"记录","permalink":"https://jonathan1214.github.io/tags/记录/"},{"name":"weekly","slug":"weekly","permalink":"https://jonathan1214.github.io/tags/weekly/"}]},{"title":"union-find算法的原理及实现","date":"2020-03-13T07:26:53.000Z","path":"2020/03/union-find/","text":"在计算机网络中，对于任意两个节点，可以在其间构建一条连接建立通信，这样做没有问题，但是在整个网络中都这么做会导致需要建立的连接非常多，容易计算得到N个节点的网络需要的连接数N(N-1)/2，这增加了网络的负担，实现起来也不容易，有什么办法改进呢？六度空间理论大家都知道，说的是最多通过六个人，我们可以和世界上任何人建立联系，那么如何知道两个人之间是否可以建立联系呢？这两个问题其实都属于连通性问题，可以使用union-find算法解决，步骤如下： 1. 数据准备p和q表示两个抽象的节点，可以用整数表示，如果『p，q 是相连的』，则意味着： 自反性：p和p是相连的。 对称性：如果p和q相连，则q和p也是相连的。 传递性：如果p和q相连，q和r相连，则p和r也相连。 我们可以用一个数组表示所有的节点，数组的每个位置表示一个节点，每个位置的值表示这个节点所在分量的标识符，初始化的时候每个节点的标识符都是其本身，如下所示： 12345void UF(int N) &#123; a = new int[N]; // 初始化节点数组 for (int i = 0; i &lt; N; i++) a[i] = i;&#125; 2. 实现quick-find在union-find算法中，有两个目标需要实现：判断两个节点是否连通和连接两个节点的。一种简单的思路是这样的，规定同属一个连通分量的标识符相同，比如：节点0，1和2是连通的，我们选择1为标识符，那么a[0]=a[1]=a[2]=1。这样做判断两个节点是否连通就可以在常数时间完成，基于此规则我们可以实现quick-find算法，但是这样做union的成本就会上升，每次union，需要遍历所有的节点，并对合适节点的标识符进行改变，这是个平方级别的算法，如下所示。 123456789101112boolean isConnected(int p, int q) &#123; return find(p)==find(q);&#125;int find(int p) &#123; return a[p]; &#125;void union(int p, int q) &#123; int pp = find(p); // p 节点的标识符 int qq = find(q); // q 节点的标识符 if (pp == qq) return; // 将 pp 标识符全部改成 qq for (int i = 0; i &lt; a.length; i++) if (a[i] == pp) a[i] = qq;&#125; quick-unionquick-find算法中，union的成本是平方级别的，其原因在于每次union需要遍历全部的节点，可以进行一些调整，得到改进，这就是quick-union算法。具体实现：在同一类别的中的节点，我们不再让所有节点保存相同的标识符，而是在节点中保持其父节点，类似一棵树，不过是向上走的，子节点指向父节点，根节点保存的是他自己，这样一来，进行union操作时，至于遍历找到根节点，然后让其中一个根节点指向另一个根节点即可，进行find操作时，只需遍历找到根节点即指向自身的节点。 12345678910int find(int p) &#123; while (a[p] != p) p = a[p]; return p;&#125;void union(int p, int q) &#123; int pRoot = find(p); int qRoot = find(q); // pRoot 节点指向 Qroot a[pRoot] = qRoot;&#125; 加权 quick-union这样做没什么问题，但是在最坏情况下，节点是依次相连的，串成一串，这会导致算法的性能下降，我们对其稍加改进，每次union时，都把节点数小的那一组连接到节点数大的那一组，这就是加权的quick-union算法。实现这个算法我们需要一个数组保存每个节点下节点的数目，对根节点而言，这个数就是它所在组的大小。 123456789101112131415161718192021UF(int N) &#123; a = new int[N]; // 初始化节点数组 sz = new int[N]; // 保存节点数目 for (int i = 0; i &lt; N; i++) a[i] = i; for (int i = 0; i &lt; N; i++) sz[i] = 1;&#125;// find 算法没有改变void union(int p, int q) &#123; int pRoot = find(p); int qRoot = find(q); if (pRoot == qRoot) return; if (sz[pRoot] &gt; sz[qRoot]) &#123; // p 所在组较大 a[qRoot] = pRoot; // 将q连接到q上 sz[pRoot] += sz[qRoot]; // 更新 pRoot 下的节点数 &#125; else &#123; // q 所在组较大 a[pRoot] = qRoot; sz[qRoot] += sz[pRoot]; &#125;&#125; 路径压缩还有一种路径压缩算法可以改进quick-union，即每次查找时，都把途径的节点指向根节点，这样均摊下来的find成本比较小，可以证明，路径压缩的加权quick-union算法是实现union-find最快的算法。 12345678910int find(int p) &#123; int x = p, t; while (a[p] != p) p = a[p]; // 找到根节点 while (x != p) &#123; // 直到到达根节点 t = a[x]; // 保存当前节点的父节点 a[x] = p; // 当前节点直接连接到根节点 x = t; // 移动到当前节点的父节点 &#125;&#125;// union 算法不变 回到开头的那两个问题，有了union-find算法，我们来尝试解决它们。对于网络中节点是否需要构建新的连接，抽象出网络的节点构建起UF后，执行isConnected()即可判断是否需要建立新的连接，对于两个人是否可以建立连接的问题，我们用同样的方法也可以解决，但要是想通过最少的中间人就认识一个人，该怎么做呢，这又是另外一个问题了。","content":"<p>在计算机网络中，对于任意两个节点，可以在其间构建一条连接建立通信，这样做没有问题，但是在整个网络中都这么做会导致需要建立的连接非常多，容易计算得到<code>N</code>个节点的网络需要的连接数<code>N(N-1)/2</code>，这增加了网络的负担，实现起来也不容易，有什么办法改进呢？六度空间理论大家都知道，说的是最多通过六个人，我们可以和世界上任何人建立联系，那么如何知道两个人之间是否可以建立联系呢？这两个问题其实都属于连通性问题，可以使用<code>union-find</code>算法解决，步骤如下：</p>\n<h2 id=\"1-数据准备\"><a href=\"#1-数据准备\" class=\"headerlink\" title=\"1. 数据准备\"></a>1. 数据准备</h2><p><code>p</code>和<code>q</code>表示两个抽象的节点，可以用整数表示，如果『p，q 是相连的』，则意味着：</p>\n<ul>\n<li>自反性：<code>p</code>和<code>p</code>是相连的。</li>\n<li>对称性：如果<code>p</code>和<code>q</code>相连，则<code>q</code>和<code>p</code>也是相连的。</li>\n<li>传递性：如果<code>p</code>和<code>q</code>相连，<code>q</code>和<code>r</code>相连，则<code>p</code>和<code>r</code>也相连。</li>\n</ul>\n<p>我们可以用一个数组表示所有的节点，数组的每个位置表示一个节点，每个位置的值表示这个节点所在分量的标识符，初始化的时候每个节点的标识符都是其本身，如下所示：<br><a id=\"more\"></a></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">UF</span><span class=\"params\">(<span class=\"keyword\">int</span> N)</span> </span>&#123;</span><br><span class=\"line\">    a = <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[N]; <span class=\"comment\">// 初始化节点数组</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; N; i++)</span><br><span class=\"line\">        a[i] = i;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"2-实现\"><a href=\"#2-实现\" class=\"headerlink\" title=\"2. 实现\"></a>2. 实现</h2><h3 id=\"quick-find\"><a href=\"#quick-find\" class=\"headerlink\" title=\"quick-find\"></a>quick-find</h3><p>在<code>union-find</code>算法中，有两个目标需要实现：判断两个节点是否连通和连接两个节点的。一种简单的思路是这样的，规定同属一个连通分量的标识符相同，比如：节点<code>0</code>，<code>1</code>和<code>2</code>是连通的，我们选择<code>1</code>为标识符，那么<code>a[0]=a[1]=a[2]=1</code>。这样做判断两个节点是否连通就可以在常数时间完成，基于此规则我们可以实现<code>quick-find</code>算法，但是这样做<code>union</code>的成本就会上升，每次<code>union</code>，需要遍历所有的节点，并对合适节点的标识符进行改变，这是个平方级别的算法，如下所示。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">boolean</span> <span class=\"title\">isConnected</span><span class=\"params\">(<span class=\"keyword\">int</span> p, <span class=\"keyword\">int</span> q)</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> find(p)==find(q);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">find</span><span class=\"params\">(<span class=\"keyword\">int</span> p)</span> </span>&#123; <span class=\"keyword\">return</span> a[p]; &#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">union</span><span class=\"params\">(<span class=\"keyword\">int</span> p, <span class=\"keyword\">int</span> q)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> pp = find(p);   <span class=\"comment\">// p 节点的标识符</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> qq = find(q);   <span class=\"comment\">// q 节点的标识符</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (pp == qq) <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    <span class=\"comment\">// 将 pp 标识符全部改成 qq</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; a.length; i++)</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (a[i] == pp) a[i] = qq;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"quick-union\"><a href=\"#quick-union\" class=\"headerlink\" title=\"quick-union\"></a>quick-union</h3><p>quick-find算法中，union的成本是平方级别的，其原因在于每次union需要遍历全部的节点，可以进行一些调整，得到改进，这就是quick-union算法。具体实现：在同一类别的中的节点，我们不再让所有节点保存相同的标识符，而是在节点中保持其父节点，类似一棵树，不过是向上走的，子节点指向父节点，根节点保存的是他自己，这样一来，进行union操作时，至于遍历找到根节点，然后让其中一个根节点指向另一个根节点即可，进行find操作时，只需遍历找到根节点即指向自身的节点。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">find</span><span class=\"params\">(<span class=\"keyword\">int</span> p)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (a[p] != p) p = a[p];</span><br><span class=\"line\">    <span class=\"keyword\">return</span> p;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">union</span><span class=\"params\">(<span class=\"keyword\">int</span> p, <span class=\"keyword\">int</span> q)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> pRoot = find(p);</span><br><span class=\"line\">    <span class=\"keyword\">int</span> qRoot = find(q);</span><br><span class=\"line\">    <span class=\"comment\">// pRoot 节点指向 Qroot</span></span><br><span class=\"line\">    a[pRoot] = qRoot;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"加权-quick-union\"><a href=\"#加权-quick-union\" class=\"headerlink\" title=\"加权 quick-union\"></a>加权 quick-union</h3><p>这样做没什么问题，但是在最坏情况下，节点是依次相连的，串成一串，这会导致算法的性能下降，我们对其稍加改进，每次union时，都把节点数小的那一组连接到节点数大的那一组，这就是加权的quick-union算法。实现这个算法我们需要一个数组保存每个节点下节点的数目，对根节点而言，这个数就是它所在组的大小。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">UF(<span class=\"keyword\">int</span> N) &#123;</span><br><span class=\"line\">    a = <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[N];     <span class=\"comment\">// 初始化节点数组</span></span><br><span class=\"line\">    sz = <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[N];    <span class=\"comment\">// 保存节点数目</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; N; i++)</span><br><span class=\"line\">        a[i] = i;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; N; i++)</span><br><span class=\"line\">        sz[i] = <span class=\"number\">1</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// find 算法没有改变</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">union</span><span class=\"params\">(<span class=\"keyword\">int</span> p, <span class=\"keyword\">int</span> q)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> pRoot = find(p);</span><br><span class=\"line\">    <span class=\"keyword\">int</span> qRoot = find(q);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (pRoot == qRoot) <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (sz[pRoot] &gt; sz[qRoot]) &#123; <span class=\"comment\">// p 所在组较大</span></span><br><span class=\"line\">        a[qRoot] = pRoot; <span class=\"comment\">// 将q连接到q上</span></span><br><span class=\"line\">        sz[pRoot] += sz[qRoot]; <span class=\"comment\">// 更新 pRoot 下的节点数</span></span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;    <span class=\"comment\">// q 所在组较大</span></span><br><span class=\"line\">        a[pRoot] = qRoot;</span><br><span class=\"line\">        sz[qRoot] += sz[pRoot];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"路径压缩\"><a href=\"#路径压缩\" class=\"headerlink\" title=\"路径压缩\"></a>路径压缩</h3><p>还有一种路径压缩算法可以改进quick-union，即每次查找时，都把途径的节点指向根节点，这样均摊下来的find成本比较小，可以证明，路径压缩的加权quick-union算法是实现union-find最快的算法。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">find</span><span class=\"params\">(<span class=\"keyword\">int</span> p)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> x = p, t;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (a[p] != p) p = a[p]; <span class=\"comment\">// 找到根节点</span></span><br><span class=\"line\">    <span class=\"keyword\">while</span> (x != p) &#123; <span class=\"comment\">// 直到到达根节点</span></span><br><span class=\"line\">        t = a[x];   <span class=\"comment\">// 保存当前节点的父节点</span></span><br><span class=\"line\">        a[x] = p;   <span class=\"comment\">// 当前节点直接连接到根节点</span></span><br><span class=\"line\">        x = t;      <span class=\"comment\">// 移动到当前节点的父节点</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// union 算法不变</span></span><br></pre></td></tr></table></figure>\n<hr>\n<p>回到开头的那两个问题，有了union-find算法，我们来尝试解决它们。对于网络中节点是否需要构建新的连接，抽象出网络的节点构建起<code>UF</code>后，执行<code>isConnected()</code>即可判断是否需要建立新的连接，对于两个人是否可以建立连接的问题，我们用同样的方法也可以解决，但要是想通过最少的中间人就认识一个人，该怎么做呢，这又是另外一个问题了。</p>\n","tags":[{"name":"算法","slug":"算法","permalink":"https://jonathan1214.github.io/tags/算法/"},{"name":"Java","slug":"Java","permalink":"https://jonathan1214.github.io/tags/Java/"},{"name":"union-find","slug":"union-find","permalink":"https://jonathan1214.github.io/tags/union-find/"}]},{"title":"算法的分析方法","date":"2020-03-10T13:30:43.000Z","path":"2020/03/a-way-to-algorithm-analysis/","text":"也看了几天『算法』了，总是觉得不得要领，在此做一点笔记想必会有所帮助，能够完整地写下来或者清楚地讲述给别人并使之理解才算掌握了知识，这个观点来自费曼，我深以为然。 算法及其重要性算法 被用来描述一种有限的、确定的、有效的并适合计算机程序来实现的解决问题的方法，它是计算机科学的基础，是这个领域研究的核心。『算法』在前言中就如此讲到： 算法和数据结构的学习的学习是所有计算机教学计划的基础。 我想算法的重要性已不言而喻，这也是我在此努力学习的原因，当然我不是计算机系的学生，但我深信一定程度上了解算法和其分析方法对我的专业学习和理解也很有帮助。 使用数据抽象开发可重用的算法虽然我关心的是算法背后的逻辑，但是真正实现起来还是落在代码上，为了保证其可重用性，使用数据抽象，让我们更关注算法的内核，而不是具体的数据。按照下面的步骤解决问题： 定义 API 根据特定的应用场景开发用例代码 描述一种数据结构，并在 API 说对应的抽象数据类型的实现中根据它定义类的实例变量 描述算法 分析算法的性能特点 算法分析诸如『我的算法会运行多久？』和『为什么我的程序耗尽了所有的内存』这样的基础问题，我们使用 科学方法 可以给出实际性的回答，如下所示，同时使用 数学分析 为算法建立模型，还可以使用 实验数据 验证模型。 细致的观察真实世界的特点 根据观察的结果提出假设模型 预测未来事件 继续观测并核实预测的准确性 如此反复直到确认预测和观察一致 进行实际分析之前，首先要确定 输入模型 和 问题的规模，其实就是说 输入数据量的大小 和 数据的特点 对运行时间的影响，显然运行时间会随着规模的增大而变长。 关于数学分析，依据 Knuth 的观点，程序运行的总时间主要与 执行每条语句的耗时 和 执行每条语句的频率有关。对于前者，这由机器决定，我们不关心，而后者由程序和输入决定，这正是我们要分析的。对于语句频率的分析我们会采用近似的方法，这由会得到 增长的数量级 这一概念，当输入规模很大时，这被验证是可行的，而我们正是关注算法处理大规模输入的性能。 增长的数量级概念的应用使我们能够 将程序和它实现的算法隔离开，算法和输入模型决定了增长的数量级。 使用 成本模型 评估算法的性质，该模型定义了算法中的基本操作，如数组的访问次数和元素的交换次数等等。在选定的数学模型下，我们或许可以用精确的数学语言说明算法的性质，这正是我们进行数学分析的目的。 以上我们可以得出分析程序运行时间数学模型的步骤如下： 确定输入模型下，定义问题的规模 识别内循环 根据内循环的操作确定成本模型 对于规定的输入，判断这些操作的执行频率","content":"<p>也看了几天『算法』了，总是觉得不得要领，在此做一点笔记想必会有所帮助，能够完整地写下来或者清楚地讲述给别人并使之理解才算掌握了知识，这个观点来自费曼，我深以为然。<br><!-- 这里应该添加一个目录 --><br><a id=\"more\"></a></p>\n<h2 id=\"算法及其重要性\"><a href=\"#算法及其重要性\" class=\"headerlink\" title=\"算法及其重要性\"></a>算法及其重要性</h2><p><strong>算法</strong> 被用来描述一种有限的、确定的、有效的并适合计算机程序来实现的解决问题的方法，它是计算机科学的基础，是这个领域研究的核心。『算法』在前言中就如此讲到：</p>\n<blockquote>\n<p>算法和数据结构的学习的学习是所有计算机教学计划的基础。</p>\n</blockquote>\n<p>我想算法的重要性已不言而喻，这也是我在此努力学习的原因，当然我不是计算机系的学生，但我深信一定程度上了解算法和其分析方法对我的专业学习和理解也很有帮助。</p>\n<h2 id=\"使用数据抽象开发可重用的算法\"><a href=\"#使用数据抽象开发可重用的算法\" class=\"headerlink\" title=\"使用数据抽象开发可重用的算法\"></a>使用数据抽象开发可重用的算法</h2><p>虽然我关心的是算法背后的逻辑，但是真正实现起来还是落在代码上，为了保证其可重用性，使用数据抽象，让我们更关注算法的内核，而不是具体的数据。按照下面的步骤解决问题：</p>\n<ul>\n<li>定义 API</li>\n<li>根据特定的应用场景开发用例代码</li>\n<li>描述一种数据结构，并在 API 说对应的抽象数据类型的实现中根据它定义类的实例变量</li>\n<li>描述算法</li>\n<li>分析算法的性能特点</li>\n</ul>\n<h2 id=\"算法分析\"><a href=\"#算法分析\" class=\"headerlink\" title=\"算法分析\"></a>算法分析</h2><p>诸如『我的算法会运行多久？』和『为什么我的程序耗尽了所有的内存』这样的基础问题，我们使用 <em>科学方法</em> 可以给出实际性的回答，如下所示，同时使用 <em>数学分析</em> 为算法建立模型，还可以使用 <em>实验数据</em> 验证模型。</p>\n<ul>\n<li>细致的观察真实世界的特点</li>\n<li>根据观察的结果提出假设模型</li>\n<li>预测未来事件</li>\n<li>继续观测并核实预测的准确性</li>\n<li>如此反复直到确认预测和观察一致</li>\n</ul>\n<p>进行实际分析之前，首先要确定 <strong>输入模型</strong> 和 <strong>问题的规模</strong>，其实就是说 <strong>输入数据量的大小</strong> 和 <strong>数据的特点</strong> 对运行时间的影响，显然运行时间会随着规模的增大而变长。</p>\n<p>关于数学分析，依据 Knuth 的观点，程序运行的总时间主要与 <strong>执行每条语句的耗时</strong> 和 <strong>执行每条语句的频率有关</strong>。对于前者，这由机器决定，我们不关心，而后者由程序和输入决定，这正是我们要分析的。对于语句频率的分析我们会采用近似的方法，这由会得到 <strong>增长的数量级</strong> 这一概念，当输入规模很大时，这被验证是可行的，而我们正是关注算法处理大规模输入的性能。</p>\n<p>增长的数量级概念的应用使我们能够 <strong>将程序和它实现的算法隔离开</strong>，算法和输入模型决定了增长的数量级。</p>\n<p>使用 <strong>成本模型</strong> 评估算法的性质，该模型定义了算法中的基本操作，如数组的访问次数和元素的交换次数等等。在选定的数学模型下，我们或许可以用精确的数学语言说明算法的性质，这正是我们进行数学分析的目的。</p>\n<p>以上我们可以得出分析程序运行时间数学模型的步骤如下：</p>\n<ul>\n<li>确定输入模型下，定义问题的规模</li>\n<li>识别内循环</li>\n<li>根据内循环的操作确定成本模型</li>\n<li>对于规定的输入，判断这些操作的执行频率</li>\n</ul>\n","tags":[{"name":"算法","slug":"算法","permalink":"https://jonathan1214.github.io/tags/算法/"},{"name":"Java","slug":"Java","permalink":"https://jonathan1214.github.io/tags/Java/"}]},{"title":"记录高频硬件课程设计","date":"2019-12-29T01:23:10.000Z","path":"2019/12/record-of-high-frequency-course-design/","text":"本文绝大部分内容是在19年12月29日写的，我记得很清楚，那天是周日上午，我没有为即将到来的通原考试而复习，而是选择去写点东西记录几天前刚刚结束的高频课设，这是一次很难忘的经历，有痛苦也有快乐，有想过放弃但还是坚持了下来，感谢自己和队友们。现在是2020年3月15日，本该在学校度过周日的我，和所有的大学生一样，因为肺炎疫情只能在家里学习，我没什么学习状态，有些无聊，因此整理博客，把这篇去年的记录整理整理，发到GitHubBlog上，留作纪念，发表日期还是使用去年写这篇文章的日子。 最终验收12月24号，高频硬件课设验收，在队友的强烈要求下，我们选择了一个比较宽松的老师给我们验收，因为我们功率达不到，但还想 『恰完烂分』，这能对他的保研有所帮助。最后的结果很好，我们拿到了5分（满分5分），『烂分恰完』。 最终验收时电路连接和波形 开始12月17号周二下午考完『随机过程』，终于有时间休息了，躺了一个小时，吃个饭，室友已经去搞硬件了，虽然已经是晚上9点多了，但我还想去，带上东西，去李老师办公室焊。折腾了两个小时，焊好了一个西勒振荡器，但没有测试工具，只能第二天测试焊接是否正确，测试工具缺乏和焊接出错这两个问题在整个课设过程中一直困扰着我们。 第一天晚上焊好的西勒振荡器 一起干第二天是周三，没有课，我和赵公子决定去实验室接着焊板子，顺便测试下昨晚上焊的振荡器。两个小时后，我们焊好了发射机和接收机的振荡器，经过测试，他的能用，而我的那块振荡器产生了寄生调幅。检查了电路没有任何问题，折腾到下午，最后发现是射极偏置电阻过大导致的，微调射极电阻，即可解决这个问题。 下午和晚上我们都在实验室呆着，一直做到晚上11点。因为我已经很久没焊接东西，有点手生，他更是没啥经验，我们效率比较低，只焊好了一个乘法电路、一个中频放大器和一个包络检波器。后面测试时发现，我焊接的那个乘法电路不能实现信号相乘。那时我还不知道，接下来3天我都会把时间花在乘法电路上，如果早知道调试它会这么折腾，第一天晚上就应该当机立断重新焊一个的。 心生退意接下来的几天我感到痛苦不堪，我焊接乘法电路始终不好使，不知为什么我就是不愿重新焊一块，执着地想把它修好，但这一切都是徒劳的。看着周围的同学一个个都做出来乘法电路了，我开始怀疑自己：如果做不出来是不是证明我不行，我怎么能不行呢？要不放弃吧，这样就不存在证明了，我告诉自己这些bonus对我来说并不那么重要，我保研与否与这课设5分没什么关系。沃老板执着地说焊板子的烟搞得他很难受，实验室里面人太多了，空气太差，乌烟瘴气，他想回寝室做，这样的参与状态让我心有不快，偏偏他才是一定要拿这 5 分保研的人，为什么我要受这些精神折磨，我当时的确不想再做下去了。 周六早上，纠结了许久，我去教化补充了些元器件，决定去实验室再焊一个乘法器，还说服沃老板也焊一个接收机的乘法电路。我不知道是什么力量支撑着我继续做下去，这件事对我来说不是那么必要，最诱人的bonus并不是我一定需要的，如果不做课设，我可以去复习通原，我可以享受轻松的一周。事后我仔细想了想，大概是因为我自己的性格决定的，我不是那种遇到问题就放弃的人，借口谁都有一些，但是作为我，一旦开始做了，就要做到最后，没有中途放弃的，之前的软件仿真就是如此，没有理由硬件不坚持下去，到这个时候，其实做这个课设已经变成了和自己较劲了，我不想就这么输了。 周六下午去做了通信原理实验，晚上终于焊好我的第二块乘法电路，测试再次失败，沃老板也焊好接收机混频电路，经过测试也失败。这时候我心态已经到了最低点了，我真的不想再来了，前面说的那么多不服输如何如何，可是看着别人一个个做好，我的却始终不行，旁边还有人明着嘲讽我，这使我明白『挫败感』是何含义。晚上10点，我和沃老板回寝室了，赵公子在周五下午有事回家了，但他做的已经足够多了。我突然决定不再去了。 坚持才是胜利周日上午我还是去实验室了，我想就是什么都做不出来，也得一直在实验室坐着，我就要和它刚到底。好在一切坚持都没有白费，我的乘法电路测试成功了，事实证明我的电路设计没有问题，焊接的也没有问题，昨晚测试失败只是因为电路连线没有接好，胜利让我欣喜若狂，我真想大声怒吼：我终于完成了。另一边也有好消息传来，沃老板焊的和赵公子焊的乘法电路都是好使的，还有什么比此刻更快乐呢？ 赵公子的乘法器AM波形 沃老板的混频器波形 周日下午发生了一些不愉快的事情，因为下午找不到他人（其实他在午睡），我对沃老板的不满更加强烈了，而那时我已经十分疲惫，愤怒之下，下午3点左右我直接回寝室，拒绝回他消息，然后睡了一觉。期间他来找我，我『哈哈』糊弄过去，不想再干。6点多起来看一眼手机，想了想，还是再去试试，把级联和功率要求做完吧，都已经到这个份上了，干脆就把它做到完。 乘胜追击我不想就此打住，野心开始膨胀了，『恰5分』 是调侃，此时更像是口号。发射机 AM 调制输出接上我焊调试乘法器抽空焊好的小信号放大器，效果非常好！放大了80倍，但我心里清楚，因为没有接负载，最后功率肯定达不到；接收机，混频后中频放大再检波，效果很差，但也算检波出来了，在要求不那么严苛的时候，可以拿到分；发射机接收机级联成功，和仿真保持一致。 如此算来，我们已经可以拿到 4.5 分，但是我们不想收手，我们继续调放大器，要把功率的 5 分也拿到手。很不幸，我们没有成功，三极管射极电阻过小，导致射极电流过大，二极管被烧坏了，放大器也就怀了，这又是我们唯一的放大器，级联也没办法做了，这下只有 4 分了，后悔，懊恼。 第二天周一，已经是12月23号了，我都没想到自己会在这上面花上近一周时间。白天上了一天课，晚上我们接着调试了一下，还是那个问题，AM 波后的小信号放大器不好使，级联就不行，功率也没有。赵公子也回来了，我们让他重新焊了一个，失败了，因为我临时对之前测试成功的电路做了修改，为了减小电流避免三极管烧毁的事再发生，但是我没想到这么一改，电流太小，放大倍数达不到要求，而且我应该自己亲手焊的。可以说今天又是一无所获。但我不会就此打住，我不愿放弃。 周二上午上完微波课，我立马去教化买了元件，再焊一个小信号放大器，再试一次，不到最后，谁也不知道结果，我不想放弃。一番折腾，焊好，测试，成功。 下午验收前一刻，上周三买的陶瓷滤波器终于从深圳邮到了学校，我赶紧去取回来，接到电路中，完美!『烂分恰完』。 后记做完这次课设，心里有太多感慨，很多次我都想放弃了，但是总有一股力量把我拉了回来，这其中有对朋友承诺的坚守也有自己那股不服输的劲，验收成功那一刻我有点想哭，是啊，这整个过程只有我自己这么看重吧，最后还在自我感动，但如果没有这自我感动，我不知道自己能否坚持下来。当然，课设整个过程也暴露了我的一些问题：我需要有更强大的精神力量，激励自己前进，也要学会如何带领团队前进。","content":"<p>本文绝大部分内容是在19年12月29日写的，我记得很清楚，那天是周日上午，我没有为即将到来的通原考试而复习，而是选择去写点东西记录几天前刚刚结束的高频课设，这是一次很难忘的经历，有痛苦也有快乐，有想过放弃但还是坚持了下来，感谢自己和队友们。现在是2020年3月15日，本该在学校度过周日的我，和所有的大学生一样，因为肺炎疫情只能在家里学习，我没什么学习状态，有些无聊，因此整理博客，把这篇去年的记录整理整理，发到GitHubBlog上，留作纪念，发表日期还是使用去年写这篇文章的日子。<br><a id=\"more\"></a></p>\n<h2 id=\"最终验收\"><a href=\"#最终验收\" class=\"headerlink\" title=\"最终验收\"></a>最终验收</h2><p>12月24号，高频硬件课设验收，在队友的强烈要求下，我们选择了一个比较宽松的老师给我们验收，因为我们功率达不到，但还想 <strong>『恰完烂分』</strong>，这能对他的保研有所帮助。最后的结果很好，我们拿到了5分（满分5分），<strong>『烂分恰完』</strong>。</p>\n<div align=\"center\" class=\"img\"><br>    <img src=\"/assets/img/2019/final.jpg\" alt=\"验收\" height=\"400\"><br>    <p align=\"center\" style=\"color:#999\">最终验收时电路连接和波形</p><br></div>\n\n<h2 id=\"开始\"><a href=\"#开始\" class=\"headerlink\" title=\"开始\"></a>开始</h2><p>12月17号周二下午考完『随机过程』，终于有时间休息了，躺了一个小时，吃个饭，室友已经去搞硬件了，虽然已经是晚上9点多了，但我还想去，带上东西，去李老师办公室焊。折腾了两个小时，焊好了一个西勒振荡器，但没有测试工具，只能第二天测试焊接是否正确，测试工具缺乏和焊接出错这两个问题在整个课设过程中一直困扰着我们。</p>\n<div align=\"center\" class=\"img\"><br>    <img src=\"/assets/img/2019/siler_oscillator.jpg\" alt=\"西勒振荡器\" height=\"400\"><br>    <p align=\"center\" style=\"color:#999\">第一天晚上焊好的西勒振荡器</p><br></div>\n\n<h2 id=\"一起干\"><a href=\"#一起干\" class=\"headerlink\" title=\"一起干\"></a>一起干</h2><p>第二天是周三，没有课，我和赵公子决定去实验室接着焊板子，顺便测试下昨晚上焊的振荡器。两个小时后，我们焊好了发射机和接收机的振荡器，经过测试，他的能用，而我的那块振荡器产生了寄生调幅。检查了电路没有任何问题，折腾到下午，最后发现是射极偏置电阻过大导致的，微调射极电阻，即可解决这个问题。</p>\n<p>下午和晚上我们都在实验室呆着，一直做到晚上11点。因为我已经很久没焊接东西，有点手生，他更是没啥经验，我们效率比较低，只焊好了一个乘法电路、一个中频放大器和一个包络检波器。后面测试时发现，我焊接的那个乘法电路不能实现信号相乘。那时我还不知道，接下来3天我都会把时间花在乘法电路上，如果早知道调试它会这么折腾，第一天晚上就应该当机立断重新焊一个的。</p>\n<h2 id=\"心生退意\"><a href=\"#心生退意\" class=\"headerlink\" title=\"心生退意\"></a>心生退意</h2><p>接下来的几天我感到痛苦不堪，我焊接乘法电路始终不好使，不知为什么我就是不愿重新焊一块，执着地想把它修好，但这一切都是徒劳的。看着周围的同学一个个都做出来乘法电路了，我开始怀疑自己：如果做不出来是不是证明我不行，我怎么能不行呢？要不放弃吧，这样就不存在证明了，我告诉自己这些bonus对我来说并不那么重要，我保研与否与这课设5分没什么关系。沃老板执着地说焊板子的烟搞得他很难受，实验室里面人太多了，空气太差，乌烟瘴气，他想回寝室做，这样的参与状态让我心有不快，偏偏他才是一定要拿这 5 分保研的人，为什么我要受这些精神折磨，我当时的确不想再做下去了。</p>\n<p>周六早上，纠结了许久，我去教化补充了些元器件，决定去实验室再焊一个乘法器，还说服沃老板也焊一个接收机的乘法电路。我不知道是什么力量支撑着我继续做下去，这件事对我来说不是那么必要，最诱人的bonus并不是我一定需要的，如果不做课设，我可以去复习通原，我可以享受轻松的一周。事后我仔细想了想，大概是因为我自己的性格决定的，我不是那种遇到问题就放弃的人，借口谁都有一些，但是作为我，一旦开始做了，就要做到最后，没有中途放弃的，之前的软件仿真就是如此，没有理由硬件不坚持下去，到这个时候，其实做这个课设已经变成了和自己较劲了，我不想就这么输了。</p>\n<p>周六下午去做了通信原理实验，晚上终于焊好我的第二块乘法电路，测试再次失败，沃老板也焊好接收机混频电路，经过测试也失败。这时候我心态已经到了最低点了，我真的不想再来了，前面说的那么多不服输如何如何，可是看着别人一个个做好，我的却始终不行，旁边还有人明着嘲讽我，这使我明白『挫败感』是何含义。晚上10点，我和沃老板回寝室了，赵公子在周五下午有事回家了，但他做的已经足够多了。我突然决定不再去了。</p>\n<h2 id=\"坚持才是胜利\"><a href=\"#坚持才是胜利\" class=\"headerlink\" title=\"坚持才是胜利\"></a>坚持才是胜利</h2><p>周日上午我还是去实验室了，我想就是什么都做不出来，也得一直在实验室坐着，我就要和它刚到底。好在一切坚持都没有白费，我的乘法电路测试成功了，事实证明我的电路设计没有问题，焊接的也没有问题，昨晚测试失败只是因为电路连线没有接好，胜利让我欣喜若狂，我真想大声怒吼：我终于完成了。另一边也有好消息传来，沃老板焊的和赵公子焊的乘法电路都是好使的，还有什么比此刻更快乐呢？</p>\n<div align=\"center\"><br>    <img src=\"/assets/img/2019/amplitude_modulation.jpg\" alt=\"AM调幅\" height=\"400\"><br>    <p align=\"center\" style=\"color:#999\">赵公子的乘法器AM波形</p><br>    <img src=\"/assets/img/2019/mixing.jpg\" alt=\"混频\" height=\"400\"><br>    <p align=\"center\" style=\"color:#999\">沃老板的混频器波形</p><br></div>\n\n<p>周日下午发生了一些不愉快的事情，因为下午找不到他人（其实他在午睡），我对沃老板的不满更加强烈了，而那时我已经十分疲惫，愤怒之下，下午3点左右我直接回寝室，拒绝回他消息，然后睡了一觉。期间他来找我，我『哈哈』糊弄过去，不想再干。6点多起来看一眼手机，想了想，还是再去试试，把级联和功率要求做完吧，都已经到这个份上了，干脆就把它做到完。</p>\n<h2 id=\"乘胜追击\"><a href=\"#乘胜追击\" class=\"headerlink\" title=\"乘胜追击\"></a>乘胜追击</h2><p>我不想就此打住，野心开始膨胀了，<strong>『恰5分』</strong> 是调侃，此时更像是口号。发射机 AM 调制输出接上我焊调试乘法器抽空焊好的小信号放大器，效果非常好！放大了80倍，但我心里清楚，因为没有接负载，最后功率肯定达不到；接收机，混频后中频放大再检波，效果很差，但也算检波出来了，在要求不那么严苛的时候，可以拿到分；发射机接收机级联成功，和仿真保持一致。</p>\n<p>如此算来，我们已经可以拿到 4.5 分，但是我们不想收手，我们继续调放大器，要把功率的 5 分也拿到手。很不幸，我们没有成功，三极管射极电阻过小，导致射极电流过大，二极管被烧坏了，放大器也就怀了，这又是我们唯一的放大器，级联也没办法做了，这下只有 4 分了，后悔，懊恼。</p>\n<p>第二天周一，已经是12月23号了，我都没想到自己会在这上面花上近一周时间。白天上了一天课，晚上我们接着调试了一下，还是那个问题，AM 波后的小信号放大器不好使，级联就不行，功率也没有。赵公子也回来了，我们让他重新焊了一个，失败了，因为我临时对之前测试成功的电路做了修改，为了减小电流避免三极管烧毁的事再发生，但是我没想到这么一改，电流太小，放大倍数达不到要求，而且我应该自己亲手焊的。可以说今天又是一无所获。但我不会就此打住，我不愿放弃。</p>\n<p>周二上午上完微波课，我立马去教化买了元件，再焊一个小信号放大器，再试一次，不到最后，谁也不知道结果，我不想放弃。一番折腾，焊好，测试，成功。</p>\n<p>下午验收前一刻，上周三买的陶瓷滤波器终于从深圳邮到了学校，我赶紧去取回来，接到电路中，完美!<strong>『烂分恰完』</strong>。</p>\n<h2 id=\"后记\"><a href=\"#后记\" class=\"headerlink\" title=\"后记\"></a>后记</h2><p>做完这次课设，心里有太多感慨，很多次我都想放弃了，但是总有一股力量把我拉了回来，这其中有对朋友承诺的坚守也有自己那股不服输的劲，验收成功那一刻我有点想哭，是啊，这整个过程只有我自己这么看重吧，最后还在自我感动，但如果没有这自我感动，我不知道自己能否坚持下来。当然，课设整个过程也暴露了我的一些问题：我需要有更强大的精神力量，激励自己前进，也要学会如何带领团队前进。</p>\n","tags":[{"name":"记录","slug":"记录","permalink":"https://jonathan1214.github.io/tags/记录/"}]},{"title":"Believe_in_yourself","date":"2018-06-18T14:30:53.000Z","path":"2018/06/Believe-in-yourself/","text":"最近有点烦躁，事情一件接着一件地扑面而来，丝毫不给我喘气的机会，为了排遣苦闷，我嘴上的脏话多了不少，不过好在这一切都将过去了，过去了之后我一定要好好开始，现在，我只有祈祷最后能有一个好的结果。这是一个疯狂的六月！英语课程考试(6.7)，英语口语测试(6.14)，六级考试(6.16)，科创答辩(6.20)，数学建模考试(6.21)，近代史考试(6.26)，英语期末考试(6.29)……这还远没有结束，七月是工大的小学期时间！八月才放暑假！九月开学！坏消息是大物和微积分的考试放到小学期了，当然，这也可以算是好消息，至少六月份可以喘口气了，真正毫无疑问的好消息自然就是我们会搬进新公寓！","content":"<p>最近有点烦躁，事情一件接着一件地扑面而来，丝毫不给我喘气的机会，为了排遣苦闷，我嘴上的脏话多了不少，不过好在这一切都将过去了，过去了之后我一定要好好开始，现在，我只有祈祷最后能有一个好的结果。<br><a id=\"more\"></a><br>这是一个疯狂的六月！<br>英语课程考试(6.7)，英语口语测试(6.14)，六级考试(6.16)，科创答辩(6.20)，数学建模考试(6.21)，近代史考试(6.26)，英语期末考试(6.29)……这还远没有结束，七月是工大的小学期时间！八月才放暑假！九月开学！坏消息是大物和微积分的考试放到小学期了，当然，这也可以算是好消息，至少六月份可以喘口气了，真正毫无疑问的好消息自然就是我们会搬进新公寓！</p>\n","tags":[{"name":"记录","slug":"记录","permalink":"https://jonathan1214.github.io/tags/记录/"}]},{"title":"数据结构复习","date":"2018-05-14T12:25:46.000Z","path":"2018/05/review-data-structure/","text":"先抄一段Dave在他的书《The Pragmatic Programmer》中的话： You’re a Pragmatic Programmer. You aren’t wedded to any particular technology, but you have a broad enough background in the science, and your experience with practical projects allow you to choose good solution in particular situations. Theory and practice combine to make you strong. You adjust your approach to suit the current circumstance and environment. And you do this continuously as the work progresses. Pragmatic Programmers get the job done, and do it well. Ok，现在开始吧！ C语言程序设计开始 先上第一段代码： 1234567#include &lt;stdio.h&gt;int main(void)&#123; printf(\"Hello world\\n\"); printf(\"This is a C program\"); return 0;&#125; 这是一个简单的C程序，我从这里开始，解释什么的是不需要的。 第二段代码：1234567891011121314151617181920212223242526272829#include &lt;stdio.h&gt;int main (void)&#123; //这个程序根据你输入的两个整数和输入的一个四则运算符进行运算 int a, b; unsigned int Bool = 0; char ch; printf(\"请输入两个整数：\"); scanf(\"%d\", &amp;a); scanf(\"%d\", &amp;a); printf(\"\\n请输入一个四则运算符：\"); Bool = scanf(\"%c\", &amp;ch); switch (ch) &#123; case '+': printf(\"\\n%d + %d = %d\", a, b, a+b); break; case '-': printf(\"\\n%d - %d = %d\", a, b, a-b); break:; case '*': printf(\"\\n%d * %d = %d\", a, b, a*b); break; case '/': printf(\"\\n%d / %d = %f\", a, b, float(a)/b); break; default: printf(\"输入的不是四则运算符！！！\"); break; &#125; return 0;&#125; OK，上面的代码写出来了！没有什么问题！记几个需要注意的地方： 1. `scanf()`的是有返回值，读到了几个正确的输入就返回几，例如在上面的代码的中，如果输入了一个字符，`Bool`的值就变成`1`，在这里作用不大，不过就是为了复习嘛，无所谓的啦。 2. 注意`switch() case`语句的用法：`switch()`括号内的变量类型一定要是__整型或者字符型__。 第三段代码：1234567891011121314151617181920212223#include &lt;stdio.h&gt;int main (void)&#123; //定义一个二维数组并初始化 int a[2][3] = &#123; &#123;1, 2, 3&#125;, &#123;4, 5, 6&#125; &#125;; //几个指针的声明 int *pt; int (*pa)[3]; //注意：[]的优先级高于* int *pax[3]; //注意与上一个进行对比，这是不一样的 int ar1[2][3]; int ar2[3][2]; int **p2; //以下均是有效的赋值 pt = &amp;a[0][0]; pa = &amp;a[0]; //在这里pt和pa的值相同 pa = &amp;a[1]; p2 = &amp;pt;&#125; 从上面就可以看出来，指针这个东西还是很烦人的，不过也不难，多看几遍就行了，还有要注意指针和数组的关系。指针比数组更本质！ 第四段代码：1234567891011121314151617181920212223242526272829303132333435363738394041424344//找二维数组的鞍点，行最小且列最大的即为鞍点#include &lt;stdio.h&gt;int main (void)&#123; int a[20][20]; int Row, Col; int i, j; printf(\"请输入数组的行数和列数：\"); scanf(\"%d%d\", Row, Col); printf(\"\\n请输入%d个整数：\\n\\t\", Row*Col); for (i = 0; i &lt; Row; i++) for (j = 0; j &lt; Col; j++) scanf(\"%d\", &amp;a[i][j]); for (i = 0; i &lt; Row; i++) &#123; int temp = a[i][0]; int k = 0; int f = 1; for (j = 1; j &lt; Col; j++) &#123; if (temp &gt; a[i][j]) &#123; temp = a[i][j]; k = j; &#125; &#125; for (j = 0; j &lt; Row; j++) &#123; if (j == i) continue; else &#123; if (a[j][k] &gt; a[i][k]) f = 0; &#125; &#125; if (f) printf(\"\\n%d\", &amp;a[i][k]); else printf(\"\\n无鞍点\"); &#125; return 0;&#125; 我也不管什么优化了，丑就丑吧，几个循环套起来又怕什么，比比谁写的更丑，没有运行时间和内存使用限制，写起来就是爽！ 第五段代码：12345678910111213141516171819#include &lt;stdio.h&gt;int main (void)&#123; printf(\"这是一个计算函数值的程序：\\n\"); int x, y; printf(\"请输入整数x的值：\"); scanf(\"%d\", &amp;x); if (x &lt; 0) y = 5*x; else &#123; if (x &lt; 8) y = 2*x - 1; else y = x + 4; &#125; printf(\"\\ny = %d\", y); return 0;&#125; 这段代码没什么意思，纯粹是送的。 第六段代码：1234567891011121314151617181920#include &lt;stdio.h&gt;void Pri_as_ord(int *p, int *q)&#123; int temp; if (*p &gt; *q) &#123; temp = *p; *p = *q; *q = temp; &#125;&#125;int main (void)&#123; int a, b; printf(\"请输入两个整数：\"); scanf(\"%d%d\", &amp;a, &amp;b); Pri_as_ord(&amp;a, &amp;b); printf(\"按由小到大的顺序输出：%d %d\", a, b); return 0;&#125; 还是没什么意思，接着写！ 第七段代码：12345678910111213141516171819202122232425262728293031323334353637383940/*录入三个学生的学号和各自两门课的成绩*/#include &lt;stdio.h&gt;struct Student&#123; int num; float score1; float score2;&#125;;void Best(struct Student student[], int n)&#123; int i, m, aver[n]; for (i = 0; i &lt; n; i++) aver[i] = (student[i].score1 + student[i].score2)/2; if (aver[0] &gt; aver[1]) &#123; if (aver[0] &gt; aver[2]) m = 0; else m = 2; &#125; else &#123; if (aver[1] &gt; aver[2]) m = 1; else m = 2; &#125; printf(\"平均成绩最高的学生的学号是：%d\", student[m].num);&#125;int main (void)&#123; int i = 1; struct Student student[3]; for (; i &lt; 4; i++) printf(\"请输入第%d个学生的学号和两门课的成绩:%d %f %f\", i, student[i-1].num, student[i-1].score1, student[i-1].score2); Best(student, 3); return 0;&#125; 哇！写得想吐了！超级累！不管继续！ 第八段代码123456789101112131415161718192021222324252627282930313233343536/*这只是一个函数，用来实现删除单链表中码值相同的节点，只保留一个假设节点是这样的：struct node&#123; int data; struct node *next; &#125;;*/void Del(struct node *head)&#123; struct node *p, *q, *s; p = head-&gt;next; if (p == NULL) printf(\"Empty List\"); else &#123; while (p-&gt;next != NULL) &#123; q = p-&gt;next; do &#123; while ((q-&gt;data != p-&gt;data) &amp;&amp; (q-&gt;next != NULL)) &#123; s = q; q = q-&gt;next; &#125; if (q-&gt;data == x) &#123; s-&gt;next = q-&gt;next; free (q); &#125; p = s-&gt;next; &#125; while (p != NULL); p = p-&gt;next; &#125; &#125;&#125; 上面的代码有点烦，不过好在思路还算清晰，没有遇到问题，就是时间花得太长了，单链表还是不够熟练，接着来！ 第九段代码：12345678910111213141516171819202122232425//一个队列入排操作struct queue&#123; int item[max]; int front; int rear;&#125;;//初始化时rear=-1，front为0~max-1的任意值//front指向队列第一个元素的前一个位置，rear指向队尾元素所在位置//front=rear时队列满，rear=-1时队列空struct queue q;void Inqueue(struct queue q, int x)&#123; if (q.front == q.rear) printf(\"队满\"); else &#123; if (q.rear = -1) q.rear = q.front; if (q.rear = max-1) q.rear = 0; q.rear += 1; q.item[q.rear] = x; &#125;&#125; 简单的顺序存储的队列，实现入排操作不难，弄懂原理就好。","content":"<p>先抄一段Dave在他的书《The Pragmatic Programmer》中的话：</p>\n<blockquote>\n<p>You’re a Pragmatic Programmer. You aren’t wedded to any particular technology, but you have a broad enough background in the science, and your experience with practical projects allow you to choose good solution in particular situations. Theory and practice combine to make you strong. You adjust your approach to suit the current circumstance and environment. And you do this continuously as the work progresses. Pragmatic Programmers get the job done, and do it well.</p>\n</blockquote>\n<p>Ok，现在开始吧！</p>\n<a id=\"more\"></a>\n<h1 id=\"C语言程序设计\"><a href=\"#C语言程序设计\" class=\"headerlink\" title=\"C语言程序设计\"></a>C语言程序设计</h1><h2 id=\"开始\"><a href=\"#开始\" class=\"headerlink\" title=\"开始\"></a>开始</h2><ol>\n<li>先上第一段代码：</li>\n</ol>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">(<span class=\"keyword\">void</span>)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">\"Hello world\\n\"</span>);</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">\"This is a C program\"</span>);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这是一个简单的C程序，我从这里开始，解释什么的是不需要的。</p>\n<ol start=\"2\">\n<li>第二段代码：<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span> <span class=\"params\">(<span class=\"keyword\">void</span>)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//这个程序根据你输入的两个整数和输入的一个四则运算符进行运算</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> a, b;</span><br><span class=\"line\">    <span class=\"keyword\">unsigned</span> <span class=\"keyword\">int</span> Bool = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">char</span> ch;</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">\"请输入两个整数：\"</span>);</span><br><span class=\"line\">    <span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d\"</span>, &amp;a);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d\"</span>, &amp;a);</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">\"\\n请输入一个四则运算符：\"</span>);</span><br><span class=\"line\">    Bool = <span class=\"built_in\">scanf</span>(<span class=\"string\">\"%c\"</span>, &amp;ch);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">switch</span> (ch)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">case</span> <span class=\"string\">'+'</span>: <span class=\"built_in\">printf</span>(<span class=\"string\">\"\\n%d + %d = %d\"</span>, a, b, a+b);</span><br><span class=\"line\">                  <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        <span class=\"keyword\">case</span> <span class=\"string\">'-'</span>: <span class=\"built_in\">printf</span>(<span class=\"string\">\"\\n%d - %d = %d\"</span>, a, b, a-b);</span><br><span class=\"line\">                  <span class=\"keyword\">break</span>:;</span><br><span class=\"line\">        <span class=\"keyword\">case</span> <span class=\"string\">'*'</span>: <span class=\"built_in\">printf</span>(<span class=\"string\">\"\\n%d * %d = %d\"</span>, a, b, a*b);</span><br><span class=\"line\">                  <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        <span class=\"keyword\">case</span> <span class=\"string\">'/'</span>: <span class=\"built_in\">printf</span>(<span class=\"string\">\"\\n%d / %d = %f\"</span>, a, b, <span class=\"keyword\">float</span>(a)/b);</span><br><span class=\"line\">                  <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        <span class=\"keyword\">default</span>:  <span class=\"built_in\">printf</span>(<span class=\"string\">\"输入的不是四则运算符！！！\"</span>);</span><br><span class=\"line\">                  <span class=\"keyword\">break</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<p>OK，上面的代码写出来了！没有什么问题！记几个需要注意的地方：</p>\n<pre><code>1. `scanf()`的是有返回值，读到了几个正确的输入就返回几，例如在上面的代码的中，如果输入了一个字符，`Bool`的值就变成`1`，在这里作用不大，不过就是为了复习嘛，无所谓的啦。\n2. 注意`switch() case`语句的用法：`switch()`括号内的变量类型一定要是__整型或者字符型__。\n</code></pre><ol start=\"3\">\n<li>第三段代码：<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span> <span class=\"params\">(<span class=\"keyword\">void</span>)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//定义一个二维数组并初始化</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> a[<span class=\"number\">2</span>][<span class=\"number\">3</span>] = &#123;</span><br><span class=\"line\">        &#123;<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>&#125;,</span><br><span class=\"line\">        &#123;<span class=\"number\">4</span>, <span class=\"number\">5</span>, <span class=\"number\">6</span>&#125;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//几个指针的声明</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> *pt;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> (*pa)[<span class=\"number\">3</span>];  <span class=\"comment\">//注意：[]的优先级高于*</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> *pax[<span class=\"number\">3</span>];   <span class=\"comment\">//注意与上一个进行对比，这是不一样的</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> ar1[<span class=\"number\">2</span>][<span class=\"number\">3</span>];</span><br><span class=\"line\">    <span class=\"keyword\">int</span> ar2[<span class=\"number\">3</span>][<span class=\"number\">2</span>];</span><br><span class=\"line\">    <span class=\"keyword\">int</span> **p2;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//以下均是有效的赋值</span></span><br><span class=\"line\">    pt = &amp;a[<span class=\"number\">0</span>][<span class=\"number\">0</span>];</span><br><span class=\"line\">    pa = &amp;a[<span class=\"number\">0</span>];   <span class=\"comment\">//在这里pt和pa的值相同</span></span><br><span class=\"line\">    pa = &amp;a[<span class=\"number\">1</span>];</span><br><span class=\"line\">    p2 = &amp;pt;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<p>从上面就可以看出来，指针这个东西还是很烦人的，不过也不难，多看几遍就行了，还有要注意指针和数组的关系。指针比数组更本质！</p>\n<ol start=\"4\">\n<li>第四段代码：<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//找二维数组的鞍点，行最小且列最大的即为鞍点</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span> <span class=\"params\">(<span class=\"keyword\">void</span>)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> a[<span class=\"number\">20</span>][<span class=\"number\">20</span>];</span><br><span class=\"line\">    <span class=\"keyword\">int</span> Row, Col;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> i, j;</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">\"请输入数组的行数和列数：\"</span>);</span><br><span class=\"line\">    <span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d%d\"</span>, Row, Col);</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">\"\\n请输入%d个整数：\\n\\t\"</span>, Row*Col);</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (i = <span class=\"number\">0</span>; i &lt; Row; i++)</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (j = <span class=\"number\">0</span>; j &lt; Col; j++)</span><br><span class=\"line\">            <span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d\"</span>, &amp;a[i][j]);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (i = <span class=\"number\">0</span>; i &lt; Row; i++)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> temp = a[i][<span class=\"number\">0</span>];</span><br><span class=\"line\">        <span class=\"keyword\">int</span> k = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> f = <span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (j = <span class=\"number\">1</span>; j &lt; Col; j++)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (temp &gt; a[i][j])</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                temp = a[i][j];</span><br><span class=\"line\">                k = j;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (j = <span class=\"number\">0</span>; j &lt; Row; j++)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (j == i)</span><br><span class=\"line\">                <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">            <span class=\"keyword\">else</span></span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (a[j][k] &gt; a[i][k])</span><br><span class=\"line\">                    f = <span class=\"number\">0</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (f)</span><br><span class=\"line\">            <span class=\"built_in\">printf</span>(<span class=\"string\">\"\\n%d\"</span>, &amp;a[i][k]);</span><br><span class=\"line\">        <span class=\"keyword\">else</span></span><br><span class=\"line\">            <span class=\"built_in\">printf</span>(<span class=\"string\">\"\\n无鞍点\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<p>我也不管什么优化了，丑就丑吧，几个循环套起来又怕什么，比比谁写的更丑，没有运行时间和内存使用限制，写起来就是爽！</p>\n<ol start=\"5\">\n<li>第五段代码：<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span> <span class=\"params\">(<span class=\"keyword\">void</span>)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">\"这是一个计算函数值的程序：\\n\"</span>);</span><br><span class=\"line\">    <span class=\"keyword\">int</span> x, y;</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">\"请输入整数x的值：\"</span>);</span><br><span class=\"line\">    <span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d\"</span>, &amp;x);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (x &lt; <span class=\"number\">0</span>)</span><br><span class=\"line\">        y = <span class=\"number\">5</span>*x;</span><br><span class=\"line\">    <span class=\"keyword\">else</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (x &lt; <span class=\"number\">8</span>)</span><br><span class=\"line\">            y = <span class=\"number\">2</span>*x - <span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"keyword\">else</span></span><br><span class=\"line\">            y = x + <span class=\"number\">4</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">\"\\ny = %d\"</span>, y);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<p>这段代码没什么意思，纯粹是送的。</p>\n<ol start=\"6\">\n<li>第六段代码：<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">Pri_as_ord</span><span class=\"params\">(<span class=\"keyword\">int</span> *p, <span class=\"keyword\">int</span> *q)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> temp;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (*p &gt; *q)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        temp = *p;</span><br><span class=\"line\">        *p = *q;</span><br><span class=\"line\">        *q = temp;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span> <span class=\"params\">(<span class=\"keyword\">void</span>)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> a, b;</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">\"请输入两个整数：\"</span>);</span><br><span class=\"line\">    <span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d%d\"</span>, &amp;a, &amp;b);</span><br><span class=\"line\">    Pri_as_ord(&amp;a, &amp;b);</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">\"按由小到大的顺序输出：%d %d\"</span>, a, b);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<p>还是没什么意思，接着写！</p>\n<ol start=\"7\">\n<li>第七段代码：<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/*录入三个学生的学号和各自两门课的成绩</span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">Student</span>&#123;</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> num;</span><br><span class=\"line\">    <span class=\"keyword\">float</span> score1;</span><br><span class=\"line\">    <span class=\"keyword\">float</span> score2;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">Best</span><span class=\"params\">(struct Student student[], <span class=\"keyword\">int</span> n)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> i, m, aver[n];</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (i = <span class=\"number\">0</span>; i &lt; n; i++)</span><br><span class=\"line\">        aver[i] = (student[i].score1 + student[i].score2)/<span class=\"number\">2</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (aver[<span class=\"number\">0</span>] &gt; aver[<span class=\"number\">1</span>])</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (aver[<span class=\"number\">0</span>] &gt; aver[<span class=\"number\">2</span>])</span><br><span class=\"line\">            m = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">else</span></span><br><span class=\"line\">            m = <span class=\"number\">2</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">else</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (aver[<span class=\"number\">1</span>] &gt; aver[<span class=\"number\">2</span>])</span><br><span class=\"line\">            m = <span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"keyword\">else</span></span><br><span class=\"line\">            m = <span class=\"number\">2</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">\"平均成绩最高的学生的学号是：%d\"</span>, student[m].num);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span> <span class=\"params\">(<span class=\"keyword\">void</span>)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> i = <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">Student</span> <span class=\"title\">student</span>[3];</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (; i &lt; <span class=\"number\">4</span>; i++)</span><br><span class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">\"请输入第%d个学生的学号和两门课的成绩:%d %f %f\"</span>,</span><br><span class=\"line\">                i, student[i<span class=\"number\">-1</span>].num, student[i<span class=\"number\">-1</span>].score1, student[i<span class=\"number\">-1</span>].score2);</span><br><span class=\"line\">    Best(student, <span class=\"number\">3</span>);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<p>哇！写得想吐了！超级累！不管继续！</p>\n<ol start=\"8\">\n<li>第八段代码<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/*这只是一个函数，用来实现删除单链表中码值相同的节点，只保留一个</span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\">假设节点是这样的：struct node&#123;</span></span><br><span class=\"line\"><span class=\"comment\">\t\t\t\t\tint data;</span></span><br><span class=\"line\"><span class=\"comment\">\t\t\t\t\tstruct node *next;</span></span><br><span class=\"line\"><span class=\"comment\">\t\t\t\t&#125;;</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">Del</span><span class=\"params\">(struct node *head)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">node</span> *<span class=\"title\">p</span>, *<span class=\"title\">q</span>, *<span class=\"title\">s</span>;</span></span><br><span class=\"line\">    p = head-&gt;next;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (p == <span class=\"literal\">NULL</span>)</span><br><span class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">\"Empty List\"</span>);</span><br><span class=\"line\">    <span class=\"keyword\">else</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (p-&gt;next != <span class=\"literal\">NULL</span>)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            q = p-&gt;next;</span><br><span class=\"line\">            <span class=\"keyword\">do</span> &#123;</span><br><span class=\"line\">                <span class=\"keyword\">while</span> ((q-&gt;data != p-&gt;data) &amp;&amp; (q-&gt;next != <span class=\"literal\">NULL</span>))</span><br><span class=\"line\">                &#123;</span><br><span class=\"line\">                    s = q;</span><br><span class=\"line\">                    q = q-&gt;next;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (q-&gt;data == x)</span><br><span class=\"line\">                &#123;</span><br><span class=\"line\">                    s-&gt;next = q-&gt;next;</span><br><span class=\"line\">                    <span class=\"built_in\">free</span> (q);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                p = s-&gt;next;</span><br><span class=\"line\">            &#125; <span class=\"keyword\">while</span> (p != <span class=\"literal\">NULL</span>);</span><br><span class=\"line\">            p = p-&gt;next;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<p>上面的代码有点烦，不过好在思路还算清晰，没有遇到问题，就是时间花得太长了，单链表还是不够熟练，接着来！</p>\n<ol start=\"9\">\n<li>第九段代码：<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//一个队列入排操作</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">queue</span>&#123;</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> item[max];</span><br><span class=\"line\">    <span class=\"keyword\">int</span> front;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> rear;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//初始化时rear=-1，front为0~max-1的任意值</span></span><br><span class=\"line\"><span class=\"comment\">//front指向队列第一个元素的前一个位置，rear指向队尾元素所在位置</span></span><br><span class=\"line\"><span class=\"comment\">//front=rear时队列满，rear=-1时队列空</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">queue</span> <span class=\"title\">q</span>;</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">Inqueue</span><span class=\"params\">(struct <span class=\"built_in\">queue</span> q, <span class=\"keyword\">int</span> x)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (q.front == q.rear)</span><br><span class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">\"队满\"</span>);</span><br><span class=\"line\">    <span class=\"keyword\">else</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (q.rear = <span class=\"number\">-1</span>)</span><br><span class=\"line\">            q.rear = q.front;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (q.rear = max<span class=\"number\">-1</span>)</span><br><span class=\"line\">            q.rear = <span class=\"number\">0</span>;</span><br><span class=\"line\">        q.rear += <span class=\"number\">1</span>;</span><br><span class=\"line\">        q.item[q.rear] = x;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<p>简单的顺序存储的队列，实现入排操作不难，弄懂原理就好。</p>\n","tags":[{"name":"数据结构","slug":"数据结构","permalink":"https://jonathan1214.github.io/tags/数据结构/"},{"name":"C/C++","slug":"C-C","permalink":"https://jonathan1214.github.io/tags/C-C/"}]},{"title":"一点思考","date":"2018-04-16T14:17:54.000Z","path":"2018/04/A_little_thinking/","text":"时间总是不等人的，转眼大一快过完了，看着现在的窘境，回首过去，难免有一点伤感，如果那些时候换些选择，现在肯定不一样，不过转念一想，每准一切都是最好的安排，在那些时候做的那些选择成就了今天的我，好坏都这样吧，我得直视前方，正所谓，往者不可谏，来者犹可追。","content":"<p>时间总是不等人的，转眼大一快过完了，看着现在的窘境，回首过去，难免有一点伤感，如果那些时候换些选择，现在肯定不一样，不过转念一想，每准一切都是最好的安排，在那些时候做的那些选择成就了今天的我，好坏都这样吧，我得直视前方，正所谓，往者不可谏，来者犹可追。</p>\n","tags":[{"name":"思考","slug":"思考","permalink":"https://jonathan1214.github.io/tags/思考/"}]},{"title":"记录科创中期答辩","date":"2018-04-13T12:10:29.000Z","path":"2018/04/My_first_lose/","text":"今天下午的科创中期答辩我们组当掉了，说实话我们什么都没做，单纯的想敷衍过去，很不幸，老师没有让我们通过，4月29号要再来一次，希望可以通过吧。关于这次答辩，我还是有些东西想记下来的： 我们都有自己擅长的事，当然也有自己的绝不擅长甚至不愿触碰的事儿，很不幸，上台发言就是我不愿触碰的事儿，我害怕自己讲不清楚，害怕自己口齿不清，害怕失败，这或许是这次失败的一个重要原因吧。我们应该考虑下次答辩换一个人的，换一个会说的人，再有就是大二科创一定要好好选队友，海鹏非常可以，有拼劲儿，天行表达非常好，到时候再说，我只是一个中规中矩的驱动人物罢了，现在需要多学一点知识，也好让人家接受你成为队友。 我算是认识到了，要想做好一件事情，一个好的态度是非常是非常重要的。对应到这次科创，这态度体现在，如下几个方面，我们有没有好好做这个项目或者说有没有做，有没有认真准备PPT，有没有认真准备报告。总结起来就是既要好好做也要好好说，anyway，这一次已经过去了，我们要把剩下的路走完。 合理安排自己的时间，不要再浪费了，有许多美好值得去追求，有很多有意义的事儿可以去做，不要再浪费时间做一些没有意义的如玩手机的事儿了。 最后，不要再赶ddl，一定要提前做好。","content":"<p>今天下午的科创中期答辩我们组当掉了，说实话我们什么都没做，单纯的想敷衍过去，很不幸，老师没有让我们通过，4月29号要再来一次，希望可以通过吧。<br><a id=\"more\"></a><br>关于这次答辩，我还是有些东西想记下来的：</p>\n<p>我们都有自己擅长的事，当然也有自己的绝不擅长甚至不愿触碰的事儿，很不幸，上台发言就是我不愿触碰的事儿，我害怕自己讲不清楚，害怕自己口齿不清，害怕失败，这或许是这次失败的一个重要原因吧。我们应该考虑下次答辩换一个人的，换一个会说的人，再有就是大二科创一定要好好选队友，海鹏非常可以，有拼劲儿，天行表达非常好，到时候再说，我只是一个中规中矩的驱动人物罢了，现在需要多学一点知识，也好让人家接受你成为队友。</p>\n<p>我算是认识到了，要想做好一件事情，一个好的态度是非常是非常重要的。对应到这次科创，这态度体现在，如下几个方面，我们有没有好好做这个项目或者说有没有做，有没有认真准备PPT，有没有认真准备报告。总结起来就是既要好好做也要好好说，anyway，这一次已经过去了，我们要把剩下的路走完。</p>\n<p>合理安排自己的时间，不要再浪费了，有许多美好值得去追求，有很多有意义的事儿可以去做，不要再浪费时间做一些没有意义的如玩手机的事儿了。</p>\n<p>最后，不要再赶ddl，一定要提前做好。</p>\n","tags":[{"name":"记录","slug":"记录","permalink":"https://jonathan1214.github.io/tags/记录/"}]}]
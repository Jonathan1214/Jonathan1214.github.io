[{"title":"union-find算法的原理及实现","date":"2020-03-13T07:26:53.000Z","path":"2020/03/13/union-find/","text":"在无线自组织网络中，对于任意两个节点，可以在其间构建一条连接建立通信，但是这样做会导致网络中需要建立的连接非常多，容易计算得到N个节点的网络需要的连接数N(N-1)/2，这没有用到无线自组织网络多跳的特点，连接增多，增加了网络的负担，实现起来也不容易，有什么办法改进呢。六度空间理论大家都知道，说的是最多通过六个人，我们可以和世界上的任何人建立联系，那么如何知道两个人之间是否可以建立联系呢？这两个问题其实都属于连通性问题，可以使用union-find算法解决，步骤如下： 1. 数据准备p和q表示两个抽象的节点，可以用整数表示，如果『p，q 是相连的』，则意味着： 自反性：p和p是相连的。 对称性：如果p和q相连，则q和p也是相连的。 传递性：如果p和q相连，q和r相连，则p和r也相连。 我们可以用一个数组表示所有的节点，数组的每个位置表示一个节点，每个位置的值表示这个节点所在分量的标识符，初始化的时候每个节点的标识符都是其本身，如下所示： 12345void UF(int N) &#123; a = new int[N]; // 初始化数组 for (int i = 0; i &lt; N; i++) a[i] = i;&#125; 2. 简单实现在union-find算法中，有两个目标需要实现：判断两个节点是否连通和连接两个节点的。一种简单的思路是这样的，规定同属一个连通分量的标识符相同，比如：节点0，1和2是连通的，我们选择1为标识符，那么a[0]=a[1]=a[2]=1。这样做判断两个节点是否连通就可以在常数时间完成，基于此规则我们可以实现quick-find算法，但是这样做union的成本就会上升，每次union，需要遍历所有的节点，并对合适节点的标识符进行改变，这是个平方级别的算法，如下所示。 12345678910boolean isConnected(int p, int q) &#123; return find(p)==find(q); &#125;int find(int p) &#123; return a[p]; &#125;void union(int p, int q) &#123; int pp = find(p); // p 节点的标识符 int qq = find(q); // q 节点的标识符 if (pp == qq) return; // 将 pp 标识符全部改成 qq for (int i = 0; i &lt; a.length; i++) if (a[i] == pp) a[i] = qq;&#125; 3. 改进","content":"<p>在无线自组织网络中，对于任意两个节点，可以在其间构建一条连接建立通信，但是这样做会导致网络中需要建立的连接非常多，容易计算得到<code>N</code>个节点的网络需要的连接数<code>N(N-1)/2</code>，这没有用到无线自组织网络多跳的特点，连接增多，增加了网络的负担，实现起来也不容易，有什么办法改进呢。六度空间理论大家都知道，说的是最多通过六个人，我们可以和世界上的任何人建立联系，那么如何知道两个人之间是否可以建立联系呢？这两个问题其实都属于连通性问题，可以使用<code>union-find</code>算法解决，步骤如下：</p>\n<h2 id=\"1-数据准备\"><a href=\"#1-数据准备\" class=\"headerlink\" title=\"1. 数据准备\"></a>1. 数据准备</h2><p><code>p</code>和<code>q</code>表示两个抽象的节点，可以用整数表示，如果『p，q 是相连的』，则意味着：</p>\n<ul>\n<li>自反性：<code>p</code>和<code>p</code>是相连的。</li>\n<li>对称性：如果<code>p</code>和<code>q</code>相连，则<code>q</code>和<code>p</code>也是相连的。</li>\n<li>传递性：如果<code>p</code>和<code>q</code>相连，<code>q</code>和<code>r</code>相连，则<code>p</code>和<code>r</code>也相连。</li>\n</ul>\n<p>我们可以用一个数组表示所有的节点，数组的每个位置表示一个节点，每个位置的值表示这个节点所在分量的标识符，初始化的时候每个节点的标识符都是其本身，如下所示：<br><a id=\"more\"></a></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">UF</span><span class=\"params\">(<span class=\"keyword\">int</span> N)</span> </span>&#123;</span><br><span class=\"line\">    a = <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[N]; <span class=\"comment\">// 初始化数组</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; N; i++)</span><br><span class=\"line\">        a[i] = i;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"2-简单实现\"><a href=\"#2-简单实现\" class=\"headerlink\" title=\"2. 简单实现\"></a>2. 简单实现</h2><p>在<code>union-find</code>算法中，有两个目标需要实现：判断两个节点是否连通和连接两个节点的。一种简单的思路是这样的，规定同属一个连通分量的标识符相同，比如：节点<code>0</code>，<code>1</code>和<code>2</code>是连通的，我们选择<code>1</code>为标识符，那么<code>a[0]=a[1]=a[2]=1</code>。这样做判断两个节点是否连通就可以在常数时间完成，基于此规则我们可以实现<code>quick-find</code>算法，但是这样做<code>union</code>的成本就会上升，每次<code>union</code>，需要遍历所有的节点，并对合适节点的标识符进行改变，这是个平方级别的算法，如下所示。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">boolean</span> <span class=\"title\">isConnected</span><span class=\"params\">(<span class=\"keyword\">int</span> p, <span class=\"keyword\">int</span> q)</span> </span>&#123; <span class=\"keyword\">return</span> find(p)==find(q); &#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">find</span><span class=\"params\">(<span class=\"keyword\">int</span> p)</span> </span>&#123; <span class=\"keyword\">return</span> a[p]; &#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">union</span><span class=\"params\">(<span class=\"keyword\">int</span> p, <span class=\"keyword\">int</span> q)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> pp = find(p);   <span class=\"comment\">// p 节点的标识符</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> qq = find(q);   <span class=\"comment\">// q 节点的标识符</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (pp == qq) <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    <span class=\"comment\">// 将 pp 标识符全部改成 qq</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; a.length; i++)</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (a[i] == pp) a[i] = qq;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"3-改进\"><a href=\"#3-改进\" class=\"headerlink\" title=\"3. 改进\"></a>3. 改进</h2>","updated":"2020-03-13T14:18:53.355Z","tags":[{"name":"算法","slug":"算法","permalink":"https://jonathan1214.github.io/tags/算法/"},{"name":"Java","slug":"Java","permalink":"https://jonathan1214.github.io/tags/Java/"},{"name":"union-find","slug":"union-find","permalink":"https://jonathan1214.github.io/tags/union-find/"}]},{"title":"算法的分析方法","date":"2020-03-10T13:30:43.000Z","path":"2020/03/10/a-way-to-algorithm-analysis/","text":"也看了几天『算法』了，总是觉得不得要领，在此做一点笔记想必会有所帮助，能够完整地写下来或者清楚地讲述给别人并使之理解才算掌握了知识，这个观点来自费曼，我深以为然。 算法及其重要性算法 被用来描述一种有限的、确定的、有效的并适合计算机程序来实现的解决问题的方法，它是计算机科学的基础，是这个领域研究的核心。『算法』在前言中就如此讲到： 算法和数据结构的学习的学习是所有计算机教学计划的基础。 我想算法的重要性已不言而喻，这也是我在此努力学习的原因，当然我不是计算机系的学生，但我深信一定程度上了解算法和其分析方法对我的专业学习和理解也很有帮助。 使用数据抽象开发可重用的算法虽然我关心的是算法背后的逻辑，但是真正实现起来还是落在代码上，为了保证其可重用性，使用数据抽象，让我们更关注算法的内核，而不是具体的数据。按照下面的步骤解决问题： 定义 API 根据特定的应用场景开发用例代码 描述一种数据结构，并在 API 说对应的抽象数据类型的实现中根据它定义类的实例变量 描述算法 分析算法的性能特点 算法分析诸如『我的算法会运行多久？』和『为什么我的程序耗尽了所有的内存』这样的基础问题，我们使用 科学方法 可以给出实际性的回答，如下所示，同时使用 数学分析 为算法建立模型，还可以使用 实验数据 验证模型。 细致的观察真实世界的特点 根据观察的结果提出假设模型 预测未来事件 继续观测并核实预测的准确性 如此反复直到确认预测和观察一致 进行实际分析之前，首先要确定 输入模型 和 问题的规模，其实就是说 输入数据量的大小 和 数据的特点 对运行时间的影响，显然运行时间会随着规模的增大而变长。 关于数学分析，依据 Knuth 的观点，程序运行的总时间主要与 执行每条语句的耗时 和 执行每条语句的频率有关。对于前者，这由机器决定，我们不关心，而后者由程序和输入决定，这正是我们要分析的。对于语句频率的分析我们会采用近似的方法，这由会得到 增长的数量级 这一概念，当输入规模很大时，这被验证是可行的，而我们正是关注算法处理大规模输入的性能。 增长的数量级概念的应用使我们能够 将程序和它实现的算法隔离开，算法和输入模型决定了增长的数量级。 使用 成本模型 评估算法的性质，该模型定义了算法中的基本操作，如数组的访问次数和元素的交换次数等等。在选定的数学模型下，我们或许可以用精确的数学语言说明算法的性质，这正是我们进行数学分析的目的。 以上我们可以得出分析程序运行时间数学模型的步骤如下： 确定输入模型下，定义问题的规模 识别内循环 根据内循环的操作确定成本模型 对于规定的输入，判断这些操作的执行频率","content":"<p>也看了几天『算法』了，总是觉得不得要领，在此做一点笔记想必会有所帮助，能够完整地写下来或者清楚地讲述给别人并使之理解才算掌握了知识，这个观点来自费曼，我深以为然。<br><!-- 这里应该添加一个目录 --><br><a id=\"more\"></a></p>\n<h2 id=\"算法及其重要性\"><a href=\"#算法及其重要性\" class=\"headerlink\" title=\"算法及其重要性\"></a>算法及其重要性</h2><p><strong>算法</strong> 被用来描述一种有限的、确定的、有效的并适合计算机程序来实现的解决问题的方法，它是计算机科学的基础，是这个领域研究的核心。『算法』在前言中就如此讲到：</p>\n<blockquote>\n<p>算法和数据结构的学习的学习是所有计算机教学计划的基础。</p>\n</blockquote>\n<p>我想算法的重要性已不言而喻，这也是我在此努力学习的原因，当然我不是计算机系的学生，但我深信一定程度上了解算法和其分析方法对我的专业学习和理解也很有帮助。</p>\n<h2 id=\"使用数据抽象开发可重用的算法\"><a href=\"#使用数据抽象开发可重用的算法\" class=\"headerlink\" title=\"使用数据抽象开发可重用的算法\"></a>使用数据抽象开发可重用的算法</h2><p>虽然我关心的是算法背后的逻辑，但是真正实现起来还是落在代码上，为了保证其可重用性，使用数据抽象，让我们更关注算法的内核，而不是具体的数据。按照下面的步骤解决问题：</p>\n<ul>\n<li>定义 API</li>\n<li>根据特定的应用场景开发用例代码</li>\n<li>描述一种数据结构，并在 API 说对应的抽象数据类型的实现中根据它定义类的实例变量</li>\n<li>描述算法</li>\n<li>分析算法的性能特点</li>\n</ul>\n<h2 id=\"算法分析\"><a href=\"#算法分析\" class=\"headerlink\" title=\"算法分析\"></a>算法分析</h2><p>诸如『我的算法会运行多久？』和『为什么我的程序耗尽了所有的内存』这样的基础问题，我们使用 <em>科学方法</em> 可以给出实际性的回答，如下所示，同时使用 <em>数学分析</em> 为算法建立模型，还可以使用 <em>实验数据</em> 验证模型。</p>\n<ul>\n<li>细致的观察真实世界的特点</li>\n<li>根据观察的结果提出假设模型</li>\n<li>预测未来事件</li>\n<li>继续观测并核实预测的准确性</li>\n<li>如此反复直到确认预测和观察一致</li>\n</ul>\n<p>进行实际分析之前，首先要确定 <strong>输入模型</strong> 和 <strong>问题的规模</strong>，其实就是说 <strong>输入数据量的大小</strong> 和 <strong>数据的特点</strong> 对运行时间的影响，显然运行时间会随着规模的增大而变长。</p>\n<p>关于数学分析，依据 Knuth 的观点，程序运行的总时间主要与 <strong>执行每条语句的耗时</strong> 和 <strong>执行每条语句的频率有关</strong>。对于前者，这由机器决定，我们不关心，而后者由程序和输入决定，这正是我们要分析的。对于语句频率的分析我们会采用近似的方法，这由会得到 <strong>增长的数量级</strong> 这一概念，当输入规模很大时，这被验证是可行的，而我们正是关注算法处理大规模输入的性能。</p>\n<p>增长的数量级概念的应用使我们能够 <strong>将程序和它实现的算法隔离开</strong>，算法和输入模型决定了增长的数量级。</p>\n<p>使用 <strong>成本模型</strong> 评估算法的性质，该模型定义了算法中的基本操作，如数组的访问次数和元素的交换次数等等。在选定的数学模型下，我们或许可以用精确的数学语言说明算法的性质，这正是我们进行数学分析的目的。</p>\n<p>以上我们可以得出分析程序运行时间数学模型的步骤如下：</p>\n<ul>\n<li>确定输入模型下，定义问题的规模</li>\n<li>识别内循环</li>\n<li>根据内循环的操作确定成本模型</li>\n<li>对于规定的输入，判断这些操作的执行频率</li>\n</ul>\n","updated":"2020-03-13T07:29:13.204Z","tags":[{"name":"算法","slug":"算法","permalink":"https://jonathan1214.github.io/tags/算法/"},{"name":"Java","slug":"Java","permalink":"https://jonathan1214.github.io/tags/Java/"}]},{"title":"数据结构复习","date":"2018-05-14T12:25:46.000Z","path":"2018/05/14/review-data-structure/","text":"先抄一段Dave在他的书《The Pragmatic Programmer》中的话： You’re a Pragmatic Programmer. You aren’t wedded to any particular technology, but you have a broad enough background in the science, and your experience with practical projects allow you to choose good solution in particular situations. Theory and practice combine to make you strong. You adjust your approach to suit the current circumstance and environment. And you do this continuously as the work progresses. Pragmatic Programmers get the job done, and do it well. Ok，现在开始吧！ C语言程序设计开始 先上第一段代码： 1234567#include &lt;stdio.h&gt;int main(void)&#123; printf(\"Hello world\\n\"); printf(\"This is a C program\"); return 0;&#125; 这是一个简单的C程序，我从这里开始，解释什么的是不需要的。 第二段代码：1234567891011121314151617181920212223242526272829#include &lt;stdio.h&gt;int main (void)&#123; //这个程序根据你输入的两个整数和输入的一个四则运算符进行运算 int a, b; unsigned int Bool = 0; char ch; printf(\"请输入两个整数：\"); scanf(\"%d\", &amp;a); scanf(\"%d\", &amp;a); printf(\"\\n请输入一个四则运算符：\"); Bool = scanf(\"%c\", &amp;ch); switch (ch) &#123; case '+': printf(\"\\n%d + %d = %d\", a, b, a+b); break; case '-': printf(\"\\n%d - %d = %d\", a, b, a-b); break:; case '*': printf(\"\\n%d * %d = %d\", a, b, a*b); break; case '/': printf(\"\\n%d / %d = %f\", a, b, float(a)/b); break; default: printf(\"输入的不是四则运算符！！！\"); break; &#125; return 0;&#125; OK，上面的代码写出来了！没有什么问题！记几个需要注意的地方： 1. `scanf()`的是有返回值，读到了几个正确的输入就返回几，例如在上面的代码的中，如果输入了一个字符，`Bool`的值就变成`1`，在这里作用不大，不过就是为了复习嘛，无所谓的啦。 2. 注意`switch() case`语句的用法：`switch()`括号内的变量类型一定要是__整型或者字符型__。 第三段代码：1234567891011121314151617181920212223#include &lt;stdio.h&gt;int main (void)&#123; //定义一个二维数组并初始化 int a[2][3] = &#123; &#123;1, 2, 3&#125;, &#123;4, 5, 6&#125; &#125;; //几个指针的声明 int *pt; int (*pa)[3]; //注意：[]的优先级高于* int *pax[3]; //注意与上一个进行对比，这是不一样的 int ar1[2][3]; int ar2[3][2]; int **p2; //以下均是有效的赋值 pt = &amp;a[0][0]; pa = &amp;a[0]; //在这里pt和pa的值相同 pa = &amp;a[1]; p2 = &amp;pt;&#125; 从上面就可以看出来，指针这个东西还是很烦人的，不过也不难，多看几遍就行了，还有要注意指针和数组的关系。指针比数组更本质！ 第四段代码：1234567891011121314151617181920212223242526272829303132333435363738394041424344//找二维数组的鞍点，行最小且列最大的即为鞍点#include &lt;stdio.h&gt;int main (void)&#123; int a[20][20]; int Row, Col; int i, j; printf(\"请输入数组的行数和列数：\"); scanf(\"%d%d\", Row, Col); printf(\"\\n请输入%d个整数：\\n\\t\", Row*Col); for (i = 0; i &lt; Row; i++) for (j = 0; j &lt; Col; j++) scanf(\"%d\", &amp;a[i][j]); for (i = 0; i &lt; Row; i++) &#123; int temp = a[i][0]; int k = 0; int f = 1; for (j = 1; j &lt; Col; j++) &#123; if (temp &gt; a[i][j]) &#123; temp = a[i][j]; k = j; &#125; &#125; for (j = 0; j &lt; Row; j++) &#123; if (j == i) continue; else &#123; if (a[j][k] &gt; a[i][k]) f = 0; &#125; &#125; if (f) printf(\"\\n%d\", &amp;a[i][k]); else printf(\"\\n无鞍点\"); &#125; return 0;&#125; 我也不管什么优化了，丑就丑吧，几个循环套起来又怕什么，比比谁写的更丑，没有运行时间和内存使用限制，写起来就是爽！ 第五段代码：12345678910111213141516171819#include &lt;stdio.h&gt;int main (void)&#123; printf(\"这是一个计算函数值的程序：\\n\"); int x, y; printf(\"请输入整数x的值：\"); scanf(\"%d\", &amp;x); if (x &lt; 0) y = 5*x; else &#123; if (x &lt; 8) y = 2*x - 1; else y = x + 4; &#125; printf(\"\\ny = %d\", y); return 0;&#125; 这段代码没什么意思，纯粹是送的。 第六段代码：1234567891011121314151617181920#include &lt;stdio.h&gt;void Pri_as_ord(int *p, int *q)&#123; int temp; if (*p &gt; *q) &#123; temp = *p; *p = *q; *q = temp; &#125;&#125;int main (void)&#123; int a, b; printf(\"请输入两个整数：\"); scanf(\"%d%d\", &amp;a, &amp;b); Pri_as_ord(&amp;a, &amp;b); printf(\"按由小到大的顺序输出：%d %d\", a, b); return 0;&#125; 还是没什么意思，接着写！ 第七段代码：12345678910111213141516171819202122232425262728293031323334353637383940/*录入三个学生的学号和各自两门课的成绩*/#include &lt;stdio.h&gt;struct Student&#123; int num; float score1; float score2;&#125;;void Best(struct Student student[], int n)&#123; int i, m, aver[n]; for (i = 0; i &lt; n; i++) aver[i] = (student[i].score1 + student[i].score2)/2; if (aver[0] &gt; aver[1]) &#123; if (aver[0] &gt; aver[2]) m = 0; else m = 2; &#125; else &#123; if (aver[1] &gt; aver[2]) m = 1; else m = 2; &#125; printf(\"平均成绩最高的学生的学号是：%d\", student[m].num);&#125;int main (void)&#123; int i = 1; struct Student student[3]; for (; i &lt; 4; i++) printf(\"请输入第%d个学生的学号和两门课的成绩:%d %f %f\", i, student[i-1].num, student[i-1].score1, student[i-1].score2); Best(student, 3); return 0;&#125; 哇！写得想吐了！超级累！不管继续！ 第八段代码123456789101112131415161718192021222324252627282930313233343536/*这只是一个函数，用来实现删除单链表中码值相同的节点，只保留一个假设节点是这样的：struct node&#123; int data; struct node *next; &#125;;*/void Del(struct node *head)&#123; struct node *p, *q, *s; p = head-&gt;next; if (p == NULL) printf(\"Empty List\"); else &#123; while (p-&gt;next != NULL) &#123; q = p-&gt;next; do &#123; while ((q-&gt;data != p-&gt;data) &amp;&amp; (q-&gt;next != NULL)) &#123; s = q; q = q-&gt;next; &#125; if (q-&gt;data == x) &#123; s-&gt;next = q-&gt;next; free (q); &#125; p = s-&gt;next; &#125; while (p != NULL); p = p-&gt;next; &#125; &#125;&#125; 上面的代码有点烦，不过好在思路还算清晰，没有遇到问题，就是时间花得太长了，单链表还是不够熟练，接着来！ 第九段代码：12345678910111213141516171819202122232425//一个队列入排操作struct queue&#123; int item[max]; int front; int rear;&#125;;//初始化时rear=-1，front为0~max-1的任意值//front指向队列第一个元素的前一个位置，rear指向队尾元素所在位置//front=rear时队列满，rear=-1时队列空struct queue q;void Inqueue(struct queue q, int x)&#123; if (q.front == q.rear) printf(\"队满\"); else &#123; if (q.rear = -1) q.rear = q.front; if (q.rear = max-1) q.rear = 0; q.rear += 1; q.item[q.rear] = x; &#125;&#125; 简单的顺序存储的队列，实现入排操作不难，弄懂原理就好。","content":"<p>先抄一段Dave在他的书《The Pragmatic Programmer》中的话：</p>\n<blockquote>\n<p>You’re a Pragmatic Programmer. You aren’t wedded to any particular technology, but you have a broad enough background in the science, and your experience with practical projects allow you to choose good solution in particular situations. Theory and practice combine to make you strong. You adjust your approach to suit the current circumstance and environment. And you do this continuously as the work progresses. Pragmatic Programmers get the job done, and do it well.</p>\n</blockquote>\n<p>Ok，现在开始吧！</p>\n<a id=\"more\"></a>\n<h1 id=\"C语言程序设计\"><a href=\"#C语言程序设计\" class=\"headerlink\" title=\"C语言程序设计\"></a>C语言程序设计</h1><h2 id=\"开始\"><a href=\"#开始\" class=\"headerlink\" title=\"开始\"></a>开始</h2><ol>\n<li>先上第一段代码：</li>\n</ol>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">(<span class=\"keyword\">void</span>)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">\"Hello world\\n\"</span>);</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">\"This is a C program\"</span>);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这是一个简单的C程序，我从这里开始，解释什么的是不需要的。</p>\n<ol start=\"2\">\n<li>第二段代码：<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span> <span class=\"params\">(<span class=\"keyword\">void</span>)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//这个程序根据你输入的两个整数和输入的一个四则运算符进行运算</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> a, b;</span><br><span class=\"line\">    <span class=\"keyword\">unsigned</span> <span class=\"keyword\">int</span> Bool = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">char</span> ch;</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">\"请输入两个整数：\"</span>);</span><br><span class=\"line\">    <span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d\"</span>, &amp;a);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d\"</span>, &amp;a);</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">\"\\n请输入一个四则运算符：\"</span>);</span><br><span class=\"line\">    Bool = <span class=\"built_in\">scanf</span>(<span class=\"string\">\"%c\"</span>, &amp;ch);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">switch</span> (ch)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">case</span> <span class=\"string\">'+'</span>: <span class=\"built_in\">printf</span>(<span class=\"string\">\"\\n%d + %d = %d\"</span>, a, b, a+b);</span><br><span class=\"line\">                  <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        <span class=\"keyword\">case</span> <span class=\"string\">'-'</span>: <span class=\"built_in\">printf</span>(<span class=\"string\">\"\\n%d - %d = %d\"</span>, a, b, a-b);</span><br><span class=\"line\">                  <span class=\"keyword\">break</span>:;</span><br><span class=\"line\">        <span class=\"keyword\">case</span> <span class=\"string\">'*'</span>: <span class=\"built_in\">printf</span>(<span class=\"string\">\"\\n%d * %d = %d\"</span>, a, b, a*b);</span><br><span class=\"line\">                  <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        <span class=\"keyword\">case</span> <span class=\"string\">'/'</span>: <span class=\"built_in\">printf</span>(<span class=\"string\">\"\\n%d / %d = %f\"</span>, a, b, <span class=\"keyword\">float</span>(a)/b);</span><br><span class=\"line\">                  <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        <span class=\"keyword\">default</span>:  <span class=\"built_in\">printf</span>(<span class=\"string\">\"输入的不是四则运算符！！！\"</span>);</span><br><span class=\"line\">                  <span class=\"keyword\">break</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<p>OK，上面的代码写出来了！没有什么问题！记几个需要注意的地方：</p>\n<pre><code>1. `scanf()`的是有返回值，读到了几个正确的输入就返回几，例如在上面的代码的中，如果输入了一个字符，`Bool`的值就变成`1`，在这里作用不大，不过就是为了复习嘛，无所谓的啦。\n2. 注意`switch() case`语句的用法：`switch()`括号内的变量类型一定要是__整型或者字符型__。\n</code></pre><ol start=\"3\">\n<li>第三段代码：<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span> <span class=\"params\">(<span class=\"keyword\">void</span>)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//定义一个二维数组并初始化</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> a[<span class=\"number\">2</span>][<span class=\"number\">3</span>] = &#123;</span><br><span class=\"line\">        &#123;<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>&#125;,</span><br><span class=\"line\">        &#123;<span class=\"number\">4</span>, <span class=\"number\">5</span>, <span class=\"number\">6</span>&#125;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//几个指针的声明</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> *pt;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> (*pa)[<span class=\"number\">3</span>];  <span class=\"comment\">//注意：[]的优先级高于*</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> *pax[<span class=\"number\">3</span>];   <span class=\"comment\">//注意与上一个进行对比，这是不一样的</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> ar1[<span class=\"number\">2</span>][<span class=\"number\">3</span>];</span><br><span class=\"line\">    <span class=\"keyword\">int</span> ar2[<span class=\"number\">3</span>][<span class=\"number\">2</span>];</span><br><span class=\"line\">    <span class=\"keyword\">int</span> **p2;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//以下均是有效的赋值</span></span><br><span class=\"line\">    pt = &amp;a[<span class=\"number\">0</span>][<span class=\"number\">0</span>];</span><br><span class=\"line\">    pa = &amp;a[<span class=\"number\">0</span>];   <span class=\"comment\">//在这里pt和pa的值相同</span></span><br><span class=\"line\">    pa = &amp;a[<span class=\"number\">1</span>];</span><br><span class=\"line\">    p2 = &amp;pt;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<p>从上面就可以看出来，指针这个东西还是很烦人的，不过也不难，多看几遍就行了，还有要注意指针和数组的关系。指针比数组更本质！</p>\n<ol start=\"4\">\n<li>第四段代码：<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//找二维数组的鞍点，行最小且列最大的即为鞍点</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span> <span class=\"params\">(<span class=\"keyword\">void</span>)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> a[<span class=\"number\">20</span>][<span class=\"number\">20</span>];</span><br><span class=\"line\">    <span class=\"keyword\">int</span> Row, Col;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> i, j;</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">\"请输入数组的行数和列数：\"</span>);</span><br><span class=\"line\">    <span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d%d\"</span>, Row, Col);</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">\"\\n请输入%d个整数：\\n\\t\"</span>, Row*Col);</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (i = <span class=\"number\">0</span>; i &lt; Row; i++)</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (j = <span class=\"number\">0</span>; j &lt; Col; j++)</span><br><span class=\"line\">            <span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d\"</span>, &amp;a[i][j]);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (i = <span class=\"number\">0</span>; i &lt; Row; i++)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> temp = a[i][<span class=\"number\">0</span>];</span><br><span class=\"line\">        <span class=\"keyword\">int</span> k = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> f = <span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (j = <span class=\"number\">1</span>; j &lt; Col; j++)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (temp &gt; a[i][j])</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                temp = a[i][j];</span><br><span class=\"line\">                k = j;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (j = <span class=\"number\">0</span>; j &lt; Row; j++)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (j == i)</span><br><span class=\"line\">                <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">            <span class=\"keyword\">else</span></span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (a[j][k] &gt; a[i][k])</span><br><span class=\"line\">                    f = <span class=\"number\">0</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (f)</span><br><span class=\"line\">            <span class=\"built_in\">printf</span>(<span class=\"string\">\"\\n%d\"</span>, &amp;a[i][k]);</span><br><span class=\"line\">        <span class=\"keyword\">else</span></span><br><span class=\"line\">            <span class=\"built_in\">printf</span>(<span class=\"string\">\"\\n无鞍点\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<p>我也不管什么优化了，丑就丑吧，几个循环套起来又怕什么，比比谁写的更丑，没有运行时间和内存使用限制，写起来就是爽！</p>\n<ol start=\"5\">\n<li>第五段代码：<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span> <span class=\"params\">(<span class=\"keyword\">void</span>)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">\"这是一个计算函数值的程序：\\n\"</span>);</span><br><span class=\"line\">    <span class=\"keyword\">int</span> x, y;</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">\"请输入整数x的值：\"</span>);</span><br><span class=\"line\">    <span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d\"</span>, &amp;x);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (x &lt; <span class=\"number\">0</span>)</span><br><span class=\"line\">        y = <span class=\"number\">5</span>*x;</span><br><span class=\"line\">    <span class=\"keyword\">else</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (x &lt; <span class=\"number\">8</span>)</span><br><span class=\"line\">            y = <span class=\"number\">2</span>*x - <span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"keyword\">else</span></span><br><span class=\"line\">            y = x + <span class=\"number\">4</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">\"\\ny = %d\"</span>, y);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<p>这段代码没什么意思，纯粹是送的。</p>\n<ol start=\"6\">\n<li>第六段代码：<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">Pri_as_ord</span><span class=\"params\">(<span class=\"keyword\">int</span> *p, <span class=\"keyword\">int</span> *q)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> temp;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (*p &gt; *q)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        temp = *p;</span><br><span class=\"line\">        *p = *q;</span><br><span class=\"line\">        *q = temp;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span> <span class=\"params\">(<span class=\"keyword\">void</span>)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> a, b;</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">\"请输入两个整数：\"</span>);</span><br><span class=\"line\">    <span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d%d\"</span>, &amp;a, &amp;b);</span><br><span class=\"line\">    Pri_as_ord(&amp;a, &amp;b);</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">\"按由小到大的顺序输出：%d %d\"</span>, a, b);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<p>还是没什么意思，接着写！</p>\n<ol start=\"7\">\n<li>第七段代码：<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/*录入三个学生的学号和各自两门课的成绩</span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">Student</span>&#123;</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> num;</span><br><span class=\"line\">    <span class=\"keyword\">float</span> score1;</span><br><span class=\"line\">    <span class=\"keyword\">float</span> score2;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">Best</span><span class=\"params\">(struct Student student[], <span class=\"keyword\">int</span> n)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> i, m, aver[n];</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (i = <span class=\"number\">0</span>; i &lt; n; i++)</span><br><span class=\"line\">        aver[i] = (student[i].score1 + student[i].score2)/<span class=\"number\">2</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (aver[<span class=\"number\">0</span>] &gt; aver[<span class=\"number\">1</span>])</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (aver[<span class=\"number\">0</span>] &gt; aver[<span class=\"number\">2</span>])</span><br><span class=\"line\">            m = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">else</span></span><br><span class=\"line\">            m = <span class=\"number\">2</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">else</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (aver[<span class=\"number\">1</span>] &gt; aver[<span class=\"number\">2</span>])</span><br><span class=\"line\">            m = <span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"keyword\">else</span></span><br><span class=\"line\">            m = <span class=\"number\">2</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">\"平均成绩最高的学生的学号是：%d\"</span>, student[m].num);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span> <span class=\"params\">(<span class=\"keyword\">void</span>)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> i = <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">Student</span> <span class=\"title\">student</span>[3];</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (; i &lt; <span class=\"number\">4</span>; i++)</span><br><span class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">\"请输入第%d个学生的学号和两门课的成绩:%d %f %f\"</span>, </span><br><span class=\"line\">                i, student[i<span class=\"number\">-1</span>].num, student[i<span class=\"number\">-1</span>].score1, student[i<span class=\"number\">-1</span>].score2);</span><br><span class=\"line\">    Best(student, <span class=\"number\">3</span>);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<p>哇！写得想吐了！超级累！不管继续！</p>\n<ol start=\"8\">\n<li>第八段代码<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/*这只是一个函数，用来实现删除单链表中码值相同的节点，只保留一个</span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\">假设节点是这样的：struct node&#123;</span></span><br><span class=\"line\"><span class=\"comment\">\t\t\t\t\tint data;</span></span><br><span class=\"line\"><span class=\"comment\">\t\t\t\t\tstruct node *next;</span></span><br><span class=\"line\"><span class=\"comment\">\t\t\t\t&#125;;</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">Del</span><span class=\"params\">(struct node *head)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">node</span> *<span class=\"title\">p</span>, *<span class=\"title\">q</span>, *<span class=\"title\">s</span>;</span></span><br><span class=\"line\">    p = head-&gt;next;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (p == <span class=\"literal\">NULL</span>)</span><br><span class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">\"Empty List\"</span>);</span><br><span class=\"line\">    <span class=\"keyword\">else</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (p-&gt;next != <span class=\"literal\">NULL</span>)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            q = p-&gt;next;</span><br><span class=\"line\">            <span class=\"keyword\">do</span> &#123;</span><br><span class=\"line\">                <span class=\"keyword\">while</span> ((q-&gt;data != p-&gt;data) &amp;&amp; (q-&gt;next != <span class=\"literal\">NULL</span>))</span><br><span class=\"line\">                &#123;</span><br><span class=\"line\">                    s = q;</span><br><span class=\"line\">                    q = q-&gt;next;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (q-&gt;data == x)</span><br><span class=\"line\">                &#123;</span><br><span class=\"line\">                    s-&gt;next = q-&gt;next;</span><br><span class=\"line\">                    <span class=\"built_in\">free</span> (q);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                p = s-&gt;next;</span><br><span class=\"line\">            &#125; <span class=\"keyword\">while</span> (p != <span class=\"literal\">NULL</span>);</span><br><span class=\"line\">            p = p-&gt;next;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<p>上面的代码有点烦，不过好在思路还算清晰，没有遇到问题，就是时间花得太长了，单链表还是不够熟练，接着来！</p>\n<ol start=\"9\">\n<li>第九段代码：<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//一个队列入排操作</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">queue</span>&#123;</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> item[max];</span><br><span class=\"line\">    <span class=\"keyword\">int</span> front;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> rear;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//初始化时rear=-1，front为0~max-1的任意值</span></span><br><span class=\"line\"><span class=\"comment\">//front指向队列第一个元素的前一个位置，rear指向队尾元素所在位置</span></span><br><span class=\"line\"><span class=\"comment\">//front=rear时队列满，rear=-1时队列空</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">queue</span> <span class=\"title\">q</span>;</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">Inqueue</span><span class=\"params\">(struct <span class=\"built_in\">queue</span> q, <span class=\"keyword\">int</span> x)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (q.front == q.rear)</span><br><span class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">\"队满\"</span>);</span><br><span class=\"line\">    <span class=\"keyword\">else</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (q.rear = <span class=\"number\">-1</span>)</span><br><span class=\"line\">            q.rear = q.front;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (q.rear = max<span class=\"number\">-1</span>)</span><br><span class=\"line\">            q.rear = <span class=\"number\">0</span>;</span><br><span class=\"line\">        q.rear += <span class=\"number\">1</span>;</span><br><span class=\"line\">        q.item[q.rear] = x;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<p>简单的顺序存储的队列，实现入排操作不难，弄懂原理就好。</p>\n","updated":"2020-03-11T12:10:12.000Z","tags":[{"name":"C语言","slug":"C语言","permalink":"https://jonathan1214.github.io/tags/C语言/"},{"name":"考试","slug":"考试","permalink":"https://jonathan1214.github.io/tags/考试/"},{"name":"数据结构","slug":"数据结构","permalink":"https://jonathan1214.github.io/tags/数据结构/"}]},{"title":"一点思考","date":"2018-04-16T14:17:54.000Z","path":"2018/04/16/A_little_thinking/","text":"时间总是不等人的，转眼大一快过完了，看着现在的窘境，回首过去，难免有一点伤感，如果那些时候换些选择，现在肯定不一样，不过转念一想，每准一切都是最好的安排，在那些时候做的那些选择成就了今天的我，好坏都这样吧，我得直视前方，正所谓，往者不可谏，来者犹可追。","content":"<p>时间总是不等人的，转眼大一快过完了，看着现在的窘境，回首过去，难免有一点伤感，如果那些时候换些选择，现在肯定不一样，不过转念一想，每准一切都是最好的安排，在那些时候做的那些选择成就了今天的我，好坏都这样吧，我得直视前方，正所谓，往者不可谏，来者犹可追。</p>\n","updated":"2020-03-12T12:22:06.697Z","tags":[{"name":"思考","slug":"思考","permalink":"https://jonathan1214.github.io/tags/思考/"}]},{"title":"记录科创中期答辩","date":"2018-04-13T12:10:29.000Z","path":"2018/04/13/My_first_lose/","text":"今天下午的科创中期答辩我们组当掉了，说实话我们什么都没做，单纯的想敷衍过去，很不幸，老师没有让我们通过，4月29号要再来一次，希望可以通过吧。关于这次答辩，我还是有些东西想记下来的： 我们都有自己擅长的事，当然也有自己的绝不擅长甚至不愿触碰的事儿，很不幸，上台发言就是我不愿触碰的事儿，我害怕自己讲不清楚，害怕自己口齿不清，害怕失败，这或许是这次失败的一个重要原因吧。我们应该考虑下次答辩换一个人的，换一个会说的人，再有就是大二科创一定要好好选队友，海鹏非常可以，有拼劲儿，天行表达非常好，到时候再说，我只是一个中规中矩的驱动人物罢了，现在需要多学一点知识，也好让人家接受你成为队友。 我算是认识到了，要想做好一件事情，一个好的态度是非常是非常重要的。对应到这次科创，这态度体现在，如下几个方面，我们有没有好好做这个项目或者说有没有做，有没有认真准备PPT，有没有认真准备报告。总结起来就是既要好好做也要好好说，anyway，这一次已经过去了，我们要把剩下的路走完。 合理安排自己的时间，不要再浪费了，有许多美好值得去追求，有很多有意义的事儿可以去做，不要再浪费时间做一些没有意义的如玩手机的事儿了。 最后，不要再赶ddl，一定要提前做好。","content":"<p>今天下午的科创中期答辩我们组当掉了，说实话我们什么都没做，单纯的想敷衍过去，很不幸，老师没有让我们通过，4月29号要再来一次，希望可以通过吧。<br><a id=\"more\"></a><br>关于这次答辩，我还是有些东西想记下来的：</p>\n<p>我们都有自己擅长的事，当然也有自己的绝不擅长甚至不愿触碰的事儿，很不幸，上台发言就是我不愿触碰的事儿，我害怕自己讲不清楚，害怕自己口齿不清，害怕失败，这或许是这次失败的一个重要原因吧。我们应该考虑下次答辩换一个人的，换一个会说的人，再有就是大二科创一定要好好选队友，海鹏非常可以，有拼劲儿，天行表达非常好，到时候再说，我只是一个中规中矩的驱动人物罢了，现在需要多学一点知识，也好让人家接受你成为队友。</p>\n<p>我算是认识到了，要想做好一件事情，一个好的态度是非常是非常重要的。对应到这次科创，这态度体现在，如下几个方面，我们有没有好好做这个项目或者说有没有做，有没有认真准备PPT，有没有认真准备报告。总结起来就是既要好好做也要好好说，anyway，这一次已经过去了，我们要把剩下的路走完。</p>\n<p>合理安排自己的时间，不要再浪费了，有许多美好值得去追求，有很多有意义的事儿可以去做，不要再浪费时间做一些没有意义的如玩手机的事儿了。</p>\n<p>最后，不要再赶ddl，一定要提前做好。</p>\n","updated":"2020-03-12T12:22:16.499Z","tags":[{"name":"记录","slug":"记录","permalink":"https://jonathan1214.github.io/tags/记录/"}]}]